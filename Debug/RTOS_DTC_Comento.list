
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b8d4  0800b8d4  0000c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b948  0800b948  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b948  0800b948  0000c948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b950  0800b950  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b950  0800b950  0000c950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b954  0800b954  0000c954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b958  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e90  20000010  0800b968  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ea0  0800b968  0000dea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9f4  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f2  00000000  00000000  0002aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124b  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d1a  00000000  00000000  000314fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5f9  00000000  00000000  00055215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e246f  00000000  00000000  0007180e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006274  00000000  00000000  00153cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00159f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b8bc 	.word	0x0800b8bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800b8bc 	.word	0x0800b8bc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <App_Main>:
static const float V_REF                   = 3.3f;
static const float ADC_RESOLUTION          = 4095.0f;
static const float VOLTAGE_SPEC_HIGH       = 2.5f;
static const float VOLTAGE_SPEC_LOW        = 1.5f;

void App_Main(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	@ 0x48
 8000550:	af00      	add	r7, sp, #0

    PMIC_Init(&hi2c1);
 8000552:	481f      	ldr	r0, [pc, #124]	@ (80005d0 <App_Main+0x84>)
 8000554:	f001 f9e8 	bl	8001928 <PMIC_Init>
    EEPROM_Init(&hspi1);
 8000558:	481e      	ldr	r0, [pc, #120]	@ (80005d4 <App_Main+0x88>)
 800055a:	f001 f971 	bl	8001840 <EEPROM_Init>
    CAN_Manager_Init(&hcan1);
 800055e:	481e      	ldr	r0, [pc, #120]	@ (80005d8 <App_Main+0x8c>)
 8000560:	f001 fa34 	bl	80019cc <CAN_Manager_Init>

    canRxQueueHandle = osMessageQueueNew(8, 8, NULL); // CAN 수신 데이터(최대 8바이트)
 8000564:	2200      	movs	r2, #0
 8000566:	2108      	movs	r1, #8
 8000568:	2008      	movs	r0, #8
 800056a:	f008 fa99 	bl	8008aa0 <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a1a      	ldr	r2, [pc, #104]	@ (80005dc <App_Main+0x90>)
 8000572:	6013      	str	r3, [r2, #0]
    dtcStorageQueueHandle = osMessageQueueNew(5, sizeof(uint32_t), NULL); // 저장할 DTC 코드
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	2005      	movs	r0, #5
 800057a:	f008 fa91 	bl	8008aa0 <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a17      	ldr	r2, [pc, #92]	@ (80005e0 <App_Main+0x94>)
 8000582:	6013      	str	r3, [r2, #0]

    osThreadNew(Task_1ms_CriticalOps, NULL, &(osThreadAttr_t){.name = "Task_1ms_Critical", .priority = osPriorityHigh});
 8000584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000588:	2224      	movs	r2, #36	@ 0x24
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f00b f95b 	bl	800b848 <memset>
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <App_Main+0x98>)
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
 8000596:	2328      	movs	r3, #40	@ 0x28
 8000598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800059a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059e:	461a      	mov	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	4811      	ldr	r0, [pc, #68]	@ (80005e8 <App_Main+0x9c>)
 80005a4:	f008 f9bd 	bl	8008922 <osThreadNew>
    osThreadNew(Task_5ms_Monitoring, NULL, &(osThreadAttr_t){.name = "Task_5ms_Monitor", .priority = osPriorityNormal});
 80005a8:	463b      	mov	r3, r7
 80005aa:	2224      	movs	r2, #36	@ 0x24
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f00b f94a 	bl	800b848 <memset>
 80005b4:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <App_Main+0xa0>)
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	2318      	movs	r3, #24
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	463b      	mov	r3, r7
 80005be:	461a      	mov	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <App_Main+0xa4>)
 80005c4:	f008 f9ad 	bl	8008922 <osThreadNew>
}
 80005c8:	bf00      	nop
 80005ca:	3748      	adds	r7, #72	@ 0x48
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	200002cc 	.word	0x200002cc
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	20000030 	.word	0x20000030
 80005e4:	0800b8d4 	.word	0x0800b8d4
 80005e8:	080005f5 	.word	0x080005f5
 80005ec:	0800b8e8 	.word	0x0800b8e8
 80005f0:	080006a9 	.word	0x080006a9

080005f4 <Task_1ms_CriticalOps>:

/* 1ms 주기: I2C/SPI/CAN 핵심 제어 Task */
void Task_1ms_CriticalOps(void *argument) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    FaultType_t pmicFault;
    uint32_t dtcFromAdc;
    uint8_t canRxData[8];

    for (;;) {
        tick = osKernelGetTickCount();
 80005fc:	f008 f97c 	bl	80088f8 <osKernelGetTickCount>
 8000600:	61b8      	str	r0, [r7, #24]

        // 1. PMIC Fault 감지 및 처리
        pmicFault = PMIC_Check_Faults();
 8000602:	f001 f9a1 	bl	8001948 <PMIC_Check_Faults>
 8000606:	4603      	mov	r3, r0
 8000608:	75fb      	strb	r3, [r7, #23]
        if (pmicFault != FAULT_TYPE_NONE) {
 800060a:	7dfb      	ldrb	r3, [r7, #23]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d018      	beq.n	8000642 <Task_1ms_CriticalOps+0x4e>
            uint32_t dtcToStore = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
            if(pmicFault == FAULT_TYPE_OV) dtcToStore = DTC_PMIC_OV;
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d102      	bne.n	8000620 <Task_1ms_CriticalOps+0x2c>
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <Task_1ms_CriticalOps+0xa0>)
 800061c:	61fb      	str	r3, [r7, #28]
 800061e:	e00a      	b.n	8000636 <Task_1ms_CriticalOps+0x42>
            else if(pmicFault == FAULT_TYPE_OC) dtcToStore = DTC_PMIC_OC;
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d102      	bne.n	800062c <Task_1ms_CriticalOps+0x38>
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <Task_1ms_CriticalOps+0xa4>)
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	e004      	b.n	8000636 <Task_1ms_CriticalOps+0x42>
            else if(pmicFault == FAULT_TYPE_UV) dtcToStore = DTC_PMIC_UV;
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d101      	bne.n	8000636 <Task_1ms_CriticalOps+0x42>
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <Task_1ms_CriticalOps+0xa8>)
 8000634:	61fb      	str	r3, [r7, #28]

            EEPROM_Write_DTC(dtcToStore);
 8000636:	69f8      	ldr	r0, [r7, #28]
 8000638:	f001 f912 	bl	8001860 <EEPROM_Write_DTC>
            CAN_Transmit_DTC_Broadcast(dtcToStore);
 800063c:	69f8      	ldr	r0, [r7, #28]
 800063e:	f001 f9e5 	bl	8001a0c <CAN_Transmit_DTC_Broadcast>
        }

        // 2. 5ms Task로부터 온 ADC 관련 DTC 저장 요청 처리
        if (osMessageQueueGet(dtcStorageQueueHandle, &dtcFromAdc, NULL, 0U) == osOK) {
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <Task_1ms_CriticalOps+0xac>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f107 0110 	add.w	r1, r7, #16
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	f008 fafb 	bl	8008c48 <osMessageQueueGet>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d107      	bne.n	8000668 <Task_1ms_CriticalOps+0x74>
            EEPROM_Write_DTC(dtcFromAdc);
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f900 	bl	8001860 <EEPROM_Write_DTC>
            CAN_Transmit_DTC_Broadcast(dtcFromAdc);
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f9d2 	bl	8001a0c <CAN_Transmit_DTC_Broadcast>
        }

        // 3. CAN 수신 명령 처리
        if (osMessageQueueGet(canRxQueueHandle, &canRxData, NULL, 0U) == osOK) {
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <Task_1ms_CriticalOps+0xb0>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	f107 0108 	add.w	r1, r7, #8
 8000670:	2300      	movs	r3, #0
 8000672:	2200      	movs	r2, #0
 8000674:	f008 fae8 	bl	8008c48 <osMessageQueueGet>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d104      	bne.n	8000688 <Task_1ms_CriticalOps+0x94>
            Process_CAN_Command(canRxData);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f878 	bl	8000778 <Process_CAN_Command>
        }

        osDelayUntil(tick + 1);
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	3301      	adds	r3, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f008 f9da 	bl	8008a46 <osDelayUntil>
        tick = osKernelGetTickCount();
 8000692:	e7b3      	b.n	80005fc <Task_1ms_CriticalOps+0x8>
 8000694:	c0033333 	.word	0xc0033333
 8000698:	c0022222 	.word	0xc0022222
 800069c:	c0011111 	.word	0xc0011111
 80006a0:	20000030 	.word	0x20000030
 80006a4:	2000002c 	.word	0x2000002c

080006a8 <Task_5ms_Monitoring>:
    }
}

/* 5ms 주기: ADC 모니터링 및 UART 로깅 Task */
void Task_5ms_Monitoring(void *argument) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    uint32_t tick;
    uint32_t adcValue;
    float voltage;
    uint32_t newDtc = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]

    for (;;) {
        tick = osKernelGetTickCount();
 80006b4:	f008 f920 	bl	80088f8 <osKernelGetTickCount>
 80006b8:	6178      	str	r0, [r7, #20]

        // 1. ADC 전압 모니터링
        HAL_ADC_Start(&hadc1);
 80006ba:	4827      	ldr	r0, [pc, #156]	@ (8000758 <Task_5ms_Monitoring+0xb0>)
 80006bc:	f001 fae2 	bl	8001c84 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 80006c0:	2101      	movs	r1, #1
 80006c2:	4825      	ldr	r0, [pc, #148]	@ (8000758 <Task_5ms_Monitoring+0xb0>)
 80006c4:	f001 fbc5 	bl	8001e52 <HAL_ADC_PollForConversion>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d134      	bne.n	8000738 <Task_5ms_Monitoring+0x90>
            adcValue = HAL_ADC_GetValue(&hadc1);
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <Task_5ms_Monitoring+0xb0>)
 80006d0:	f001 fc4a 	bl	8001f68 <HAL_ADC_GetValue>
 80006d4:	6138      	str	r0, [r7, #16]
            voltage = (adcValue / ADC_RESOLUTION) * V_REF;
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006e0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800075c <Task_5ms_Monitoring+0xb4>
 80006e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000760 <Task_5ms_Monitoring+0xb8>
 80006ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f0:	edc7 7a03 	vstr	s15, [r7, #12]

            if (voltage > VOLTAGE_SPEC_HIGH) {
 80006f4:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80006f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80006fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000704:	dd02      	ble.n	800070c <Task_5ms_Monitoring+0x64>
                newDtc = DTC_BRAKE_VOLTAGE_HIGH;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <Task_5ms_Monitoring+0xbc>)
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	e00a      	b.n	8000722 <Task_5ms_Monitoring+0x7a>
            } else if (voltage < VOLTAGE_SPEC_LOW) {
 800070c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000710:	edd7 7a03 	vldr	s15, [r7, #12]
 8000714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071c:	d501      	bpl.n	8000722 <Task_5ms_Monitoring+0x7a>
                newDtc = DTC_BRAKE_VOLTAGE_LOW;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <Task_5ms_Monitoring+0xc0>)
 8000720:	60bb      	str	r3, [r7, #8]
            }

            if (newDtc != 0) {
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <Task_5ms_Monitoring+0x90>
                // 1ms Task에 DTC 저장을 요청
                osMessageQueuePut(dtcStorageQueueHandle, &newDtc, 0U, 0U);
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <Task_5ms_Monitoring+0xc4>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	f107 0108 	add.w	r1, r7, #8
 8000730:	2300      	movs	r3, #0
 8000732:	2200      	movs	r2, #0
 8000734:	f008 fa28 	bl	8008b88 <osMessageQueuePut>
            }
        }
        HAL_ADC_Stop(&hadc1);
 8000738:	4807      	ldr	r0, [pc, #28]	@ (8000758 <Task_5ms_Monitoring+0xb0>)
 800073a:	f001 fb57 	bl	8001dec <HAL_ADC_Stop>

        // 2. UART로 ECU 정상 동작 메시지 송출
        HAL_UART_Transmit(&huart4, (uint8_t*)"ECU Status: OK\r\n", 18, 10);
 800073e:	230a      	movs	r3, #10
 8000740:	2212      	movs	r2, #18
 8000742:	490b      	ldr	r1, [pc, #44]	@ (8000770 <Task_5ms_Monitoring+0xc8>)
 8000744:	480b      	ldr	r0, [pc, #44]	@ (8000774 <Task_5ms_Monitoring+0xcc>)
 8000746:	f007 f882 	bl	800784e <HAL_UART_Transmit>

        osDelayUntil(tick + 5);
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3305      	adds	r3, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f008 f979 	bl	8008a46 <osDelayUntil>
        tick = osKernelGetTickCount();
 8000754:	e7ae      	b.n	80006b4 <Task_5ms_Monitoring+0xc>
 8000756:	bf00      	nop
 8000758:	20000034 	.word	0x20000034
 800075c:	457ff000 	.word	0x457ff000
 8000760:	40533333 	.word	0x40533333
 8000764:	c1010100 	.word	0xc1010100
 8000768:	c1010200 	.word	0xc1010200
 800076c:	20000030 	.word	0x20000030
 8000770:	0800b8fc 	.word	0x0800b8fc
 8000774:	200004fc 	.word	0x200004fc

08000778 <Process_CAN_Command>:
    }
}

void Process_CAN_Command(uint8_t *data) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    uint8_t command = data[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	75fb      	strb	r3, [r7, #23]
    uint8_t responseData[8] = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

    switch(command) {
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d002      	beq.n	800079c <Process_CAN_Command+0x24>
 8000796:	2b02      	cmp	r3, #2
 8000798:	d01f      	beq.n	80007da <Process_CAN_Command+0x62>
            responseData[0] = command;
            responseData[1] = 0xAA;    // 성공 응답 코드
            CAN_Transmit_Diag_Response(responseData, 2);
            break;
    }
}
 800079a:	e02b      	b.n	80007f4 <Process_CAN_Command+0x7c>
                uint32_t readDtc = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
                EEPROM_Read_DTC(&readDtc);
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 f893 	bl	80018d0 <EEPROM_Read_DTC>
                responseData[0] = command;
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	733b      	strb	r3, [r7, #12]
                responseData[1] = (readDtc >> 24) & 0xFF;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	0e1b      	lsrs	r3, r3, #24
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	737b      	strb	r3, [r7, #13]
                responseData[2] = (readDtc >> 16) & 0xFF;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	73bb      	strb	r3, [r7, #14]
                responseData[3] = (readDtc >> 8) & 0xFF;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	73fb      	strb	r3, [r7, #15]
                responseData[4] = readDtc & 0xFF;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	743b      	strb	r3, [r7, #16]
                CAN_Transmit_Diag_Response(responseData, 5);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f952 	bl	8001a7c <CAN_Transmit_Diag_Response>
            break;
 80007d8:	e00c      	b.n	80007f4 <Process_CAN_Command+0x7c>
            EEPROM_Clear_DTC();
 80007da:	f001 f89d 	bl	8001918 <EEPROM_Clear_DTC>
            responseData[0] = command;
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	733b      	strb	r3, [r7, #12]
            responseData[1] = 0xAA;    // 성공 응답 코드
 80007e2:	23aa      	movs	r3, #170	@ 0xaa
 80007e4:	737b      	strb	r3, [r7, #13]
            CAN_Transmit_Diag_Response(responseData, 2);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2102      	movs	r1, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f945 	bl	8001a7c <CAN_Transmit_Diag_Response>
            break;
 80007f2:	bf00      	nop
}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f001 f966 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f81a 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 fa54 	bl	8000cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 800080c:	f000 f9ec 	bl	8000be8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000810:	f000 f872 	bl	80008f8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000814:	f000 f8c2 	bl	800099c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000818:	f000 f8f4 	bl	8000a04 <MX_I2C1_Init>
  MX_I2C2_Init();
 800081c:	f000 f920 	bl	8000a60 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000820:	f000 f94c 	bl	8000abc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000824:	f000 f980 	bl	8000b28 <MX_SPI2_Init>
  MX_UART4_Init();
 8000828:	f000 f9b4 	bl	8000b94 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800082c:	f008 f81a 	bl	8008864 <osKernelInitialize>

  App_Main(); //edit
 8000830:	f7ff fe8c 	bl	800054c <App_Main>

  /* Start scheduler */
  osKernelStart();
 8000834:	f008 f83a 	bl	80088ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <main+0x3c>

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	@ 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f00a fffc 	bl	800b848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <SystemClock_Config+0xb4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <SystemClock_Config+0xb4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <SystemClock_Config+0xb4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <SystemClock_Config+0xb8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <SystemClock_Config+0xb8>)
 8000886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <SystemClock_Config+0xb8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000898:	2302      	movs	r3, #2
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	2301      	movs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2310      	movs	r3, #16
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 fe37 	bl	8006520 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008b8:	f000 fa76 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f005 fc42 	bl	8006160 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008e2:	f000 fa61 	bl	8000da8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	@ 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_ADC1_Init+0x98>)
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <MX_ADC1_Init+0x9c>)
 800090e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_ADC1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_ADC1_Init+0xa0>)
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000944:	2201      	movs	r2, #1
 8000946:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_ADC1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000952:	2201      	movs	r2, #1
 8000954:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000958:	f001 f950 	bl	8001bfc <HAL_ADC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fa21 	bl	8000da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000966:	2302      	movs	r3, #2
 8000968:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000978:	f001 fb04 	bl	8001f84 <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f000 fa11 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000034 	.word	0x20000034
 8000994:	40012000 	.word	0x40012000
 8000998:	0f000001 	.word	0x0f000001

0800099c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009a2:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_CAN1_Init+0x60>)
 80009ea:	f001 fcf9 	bl	80023e0 <HAL_CAN_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 f9d8 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000007c 	.word	0x2000007c
 8000a00:	40006400 	.word	0x40006400

08000a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <MX_I2C1_Init+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a10:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x58>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a42:	f003 f8cd 	bl	8003be0 <HAL_I2C_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a4c:	f000 f9ac 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000a4 	.word	0x200000a4
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_I2C2_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_I2C2_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_I2C2_Init+0x50>)
 8000a9e:	f003 f89f 	bl	8003be0 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f97e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000f8 	.word	0x200000f8
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f005 ff8b 	bl	8006a28 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 f946 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200002cc 	.word	0x200002cc
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <MX_SPI2_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b7a:	f005 ff55 	bl	8006a28 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f910 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000324 	.word	0x20000324
 8000b90:	40003800 	.word	0x40003800

08000b94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <MX_UART4_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_UART4_Init+0x4c>)
 8000bcc:	f006 fdf2 	bl	80077b4 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f8e7 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200004fc 	.word	0x200004fc
 8000be4:	40004c00 	.word	0x40004c00

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <MX_DMA_Init+0xc8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8000cb0 <MX_DMA_Init+0xc8>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <MX_DMA_Init+0xc8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_DMA_Init+0xc8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a27      	ldr	r2, [pc, #156]	@ (8000cb0 <MX_DMA_Init+0xc8>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_DMA_Init+0xc8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2105      	movs	r1, #5
 8000c2a:	200b      	movs	r0, #11
 8000c2c:	f002 fa69 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c30:	200b      	movs	r0, #11
 8000c32:	f002 fa82 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	200d      	movs	r0, #13
 8000c3c:	f002 fa61 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c40:	200d      	movs	r0, #13
 8000c42:	f002 fa7a 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	200e      	movs	r0, #14
 8000c4c:	f002 fa59 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c50:	200e      	movs	r0, #14
 8000c52:	f002 fa72 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f002 fa51 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c60:	200f      	movs	r0, #15
 8000c62:	f002 fa6a 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2011      	movs	r0, #17
 8000c6c:	f002 fa49 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c70:	2011      	movs	r0, #17
 8000c72:	f002 fa62 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2105      	movs	r1, #5
 8000c7a:	202f      	movs	r0, #47	@ 0x2f
 8000c7c:	f002 fa41 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c80:	202f      	movs	r0, #47	@ 0x2f
 8000c82:	f002 fa5a 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2105      	movs	r1, #5
 8000c8a:	2038      	movs	r0, #56	@ 0x38
 8000c8c:	f002 fa39 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c90:	2038      	movs	r0, #56	@ 0x38
 8000c92:	f002 fa52 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	203b      	movs	r0, #59	@ 0x3b
 8000c9c:	f002 fa31 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ca0:	203b      	movs	r0, #59	@ 0x3b
 8000ca2:	f002 fa4a 	bl	800313a <HAL_NVIC_EnableIRQ>

}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a33      	ldr	r2, [pc, #204]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a2c      	ldr	r2, [pc, #176]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a25      	ldr	r2, [pc, #148]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_GPIO_Init+0xec>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2107      	movs	r1, #7
 8000d5a:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <MX_GPIO_Init+0xf0>)
 8000d5c:	f002 ff26 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d60:	2303      	movs	r3, #3
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <MX_GPIO_Init+0xf0>)
 8000d78:	f002 fd84 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d80:	2311      	movs	r3, #17
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_GPIO_Init+0xf0>)
 8000d94:	f002 fd76 	bl	8003884 <HAL_GPIO_Init>

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_MspInit+0x54>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a11      	ldr	r2, [pc, #68]	@ (8000e08 <HAL_MspInit+0x54>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_MspInit+0x54>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_MspInit+0x54>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_MspInit+0x54>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_MspInit+0x54>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f06f 0001 	mvn.w	r0, #1
 8000dfa:	f002 f982 	bl	8003102 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <HAL_ADC_MspInit+0x7c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d127      	bne.n	8000e7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e66:	2304      	movs	r3, #4
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_ADC_MspInit+0x84>)
 8000e7a:	f002 fd03 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012000 	.word	0x40012000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a21      	ldr	r2, [pc, #132]	@ (8000f38 <HAL_CAN_MspInit+0xa4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d13b      	bne.n	8000f2e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <HAL_CAN_MspInit+0xa8>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <HAL_CAN_MspInit+0xa8>)
 8000ec0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_CAN_MspInit+0xa8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_CAN_MspInit+0xa8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a18      	ldr	r2, [pc, #96]	@ (8000f3c <HAL_CAN_MspInit+0xa8>)
 8000edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_CAN_MspInit+0xa8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000efe:	2309      	movs	r3, #9
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <HAL_CAN_MspInit+0xac>)
 8000f0a:	f002 fcbb 	bl	8003884 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2105      	movs	r1, #5
 8000f12:	2013      	movs	r0, #19
 8000f14:	f002 f8f5 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f18:	2013      	movs	r0, #19
 8000f1a:	f002 f90e 	bl	800313a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2014      	movs	r0, #20
 8000f24:	f002 f8ed 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f28:	2014      	movs	r0, #20
 8000f2a:	f002 f906 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	@ 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40006400 	.word	0x40006400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40021800 	.word	0x40021800

08000f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a9c      	ldr	r2, [pc, #624]	@ (80011d4 <HAL_I2C_MspInit+0x290>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	f040 809b 	bne.w	800109e <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	4a99      	ldr	r2, [pc, #612]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f78:	4b97      	ldr	r3, [pc, #604]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f84:	23c0      	movs	r3, #192	@ 0xc0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f94:	2304      	movs	r3, #4
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	488f      	ldr	r0, [pc, #572]	@ (80011dc <HAL_I2C_MspInit+0x298>)
 8000fa0:	f002 fc70 	bl	8003884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	4b8b      	ldr	r3, [pc, #556]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	4a8a      	ldr	r2, [pc, #552]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 8000fae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb4:	4b88      	ldr	r3, [pc, #544]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000fc0:	4b87      	ldr	r3, [pc, #540]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fc2:	4a88      	ldr	r2, [pc, #544]	@ (80011e4 <HAL_I2C_MspInit+0x2a0>)
 8000fc4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000fc6:	4b86      	ldr	r3, [pc, #536]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fcc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fce:	4b84      	ldr	r3, [pc, #528]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b82      	ldr	r3, [pc, #520]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b81      	ldr	r3, [pc, #516]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe8:	4b7d      	ldr	r3, [pc, #500]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fee:	4b7c      	ldr	r3, [pc, #496]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000ff6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ffa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffc:	4b78      	ldr	r3, [pc, #480]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001002:	4877      	ldr	r0, [pc, #476]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8001004:	f002 f8b4 	bl	8003170 <HAL_DMA_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800100e:	f7ff fecb 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a72      	ldr	r2, [pc, #456]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 8001016:	639a      	str	r2, [r3, #56]	@ 0x38
 8001018:	4a71      	ldr	r2, [pc, #452]	@ (80011e0 <HAL_I2C_MspInit+0x29c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800101e:	4b72      	ldr	r3, [pc, #456]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001020:	4a72      	ldr	r2, [pc, #456]	@ (80011ec <HAL_I2C_MspInit+0x2a8>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001024:	4b70      	ldr	r3, [pc, #448]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001026:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800102a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800102c:	4b6e      	ldr	r3, [pc, #440]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 800102e:	2240      	movs	r2, #64	@ 0x40
 8001030:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001032:	4b6d      	ldr	r3, [pc, #436]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001038:	4b6b      	ldr	r3, [pc, #428]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 800103a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001040:	4b69      	ldr	r3, [pc, #420]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001046:	4b68      	ldr	r3, [pc, #416]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800104c:	4b66      	ldr	r3, [pc, #408]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001052:	4b65      	ldr	r3, [pc, #404]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001054:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001058:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105a:	4b63      	ldr	r3, [pc, #396]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001060:	4861      	ldr	r0, [pc, #388]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001062:	f002 f885 	bl	8003170 <HAL_DMA_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 800106c:	f7ff fe9c 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a5d      	ldr	r2, [pc, #372]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
 8001076:	4a5c      	ldr	r2, [pc, #368]	@ (80011e8 <HAL_I2C_MspInit+0x2a4>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2105      	movs	r1, #5
 8001080:	201f      	movs	r0, #31
 8001082:	f002 f83e 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001086:	201f      	movs	r0, #31
 8001088:	f002 f857 	bl	800313a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2105      	movs	r1, #5
 8001090:	2020      	movs	r0, #32
 8001092:	f002 f836 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001096:	2020      	movs	r0, #32
 8001098:	f002 f84f 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800109c:	e095      	b.n	80011ca <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a53      	ldr	r2, [pc, #332]	@ (80011f0 <HAL_I2C_MspInit+0x2ac>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	f040 8090 	bne.w	80011ca <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b4a      	ldr	r3, [pc, #296]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a49      	ldr	r2, [pc, #292]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b47      	ldr	r3, [pc, #284]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4844      	ldr	r0, [pc, #272]	@ (80011f4 <HAL_I2C_MspInit+0x2b0>)
 80010e2:	f002 fbcf 	bl	8003884 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a3a      	ldr	r2, [pc, #232]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_I2C_MspInit+0x294>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001102:	4b3d      	ldr	r3, [pc, #244]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001104:	4a3d      	ldr	r2, [pc, #244]	@ (80011fc <HAL_I2C_MspInit+0x2b8>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001108:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 800110a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800110e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800111c:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 800111e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001122:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001124:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001130:	4b31      	ldr	r3, [pc, #196]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113c:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001142:	482d      	ldr	r0, [pc, #180]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001144:	f002 f814 	bl	8003170 <HAL_DMA_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 800114e:	f7ff fe2b 	bl	8000da8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 8001156:	639a      	str	r2, [r3, #56]	@ 0x38
 8001158:	4a27      	ldr	r2, [pc, #156]	@ (80011f8 <HAL_I2C_MspInit+0x2b4>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <HAL_I2C_MspInit+0x2c0>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 8001166:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800116a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 800116e:	2240      	movs	r2, #64	@ 0x40
 8001170:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 800117a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 80011a0:	f001 ffe6 	bl	8003170 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 80011aa:	f7ff fdfd 	bl	8000da8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b4:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_I2C_MspInit+0x2bc>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	2021      	movs	r0, #33	@ 0x21
 80011c0:	f001 ff9f 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011c4:	2021      	movs	r0, #33	@ 0x21
 80011c6:	f001 ffb8 	bl	800313a <HAL_NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	@ 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	2000014c 	.word	0x2000014c
 80011e4:	40026010 	.word	0x40026010
 80011e8:	200001ac 	.word	0x200001ac
 80011ec:	400260a0 	.word	0x400260a0
 80011f0:	40005800 	.word	0x40005800
 80011f4:	40021400 	.word	0x40021400
 80011f8:	2000020c 	.word	0x2000020c
 80011fc:	40026040 	.word	0x40026040
 8001200:	2000026c 	.word	0x2000026c
 8001204:	400260b8 	.word	0x400260b8

08001208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a4a      	ldr	r2, [pc, #296]	@ (8001350 <HAL_SPI_MspInit+0x148>)
 8001226:	4293      	cmp	r3, r2
 8001228:	f040 80a0 	bne.w	800136c <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	4b48      	ldr	r3, [pc, #288]	@ (8001354 <HAL_SPI_MspInit+0x14c>)
 8001232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001234:	4a47      	ldr	r2, [pc, #284]	@ (8001354 <HAL_SPI_MspInit+0x14c>)
 8001236:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800123a:	6453      	str	r3, [r2, #68]	@ 0x44
 800123c:	4b45      	ldr	r3, [pc, #276]	@ (8001354 <HAL_SPI_MspInit+0x14c>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <HAL_SPI_MspInit+0x14c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	4a40      	ldr	r2, [pc, #256]	@ (8001354 <HAL_SPI_MspInit+0x14c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6313      	str	r3, [r2, #48]	@ 0x30
 8001258:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <HAL_SPI_MspInit+0x14c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001264:	23e0      	movs	r3, #224	@ 0xe0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001274:	2305      	movs	r3, #5
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4836      	ldr	r0, [pc, #216]	@ (8001358 <HAL_SPI_MspInit+0x150>)
 8001280:	f002 fb00 	bl	8003884 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001284:	4b35      	ldr	r3, [pc, #212]	@ (800135c <HAL_SPI_MspInit+0x154>)
 8001286:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <HAL_SPI_MspInit+0x158>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800128a:	4b34      	ldr	r3, [pc, #208]	@ (800135c <HAL_SPI_MspInit+0x154>)
 800128c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001290:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b32      	ldr	r3, [pc, #200]	@ (800135c <HAL_SPI_MspInit+0x154>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <HAL_SPI_MspInit+0x154>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a6:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012b8:	4b28      	ldr	r3, [pc, #160]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012be:	4b27      	ldr	r3, [pc, #156]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80012c4:	4825      	ldr	r0, [pc, #148]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012c6:	f001 ff53 	bl	8003170 <HAL_DMA_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80012d0:	f7ff fd6a 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a21      	ldr	r2, [pc, #132]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012da:	4a20      	ldr	r2, [pc, #128]	@ (800135c <HAL_SPI_MspInit+0x154>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80012e0:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 80012e2:	4a21      	ldr	r2, [pc, #132]	@ (8001368 <HAL_SPI_MspInit+0x160>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 80012e8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 80012f0:	2240      	movs	r2, #64	@ 0x40
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001300:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001320:	4810      	ldr	r0, [pc, #64]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 8001322:	f001 ff25 	bl	8003170 <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800132c:	f7ff fd3c 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 8001334:	649a      	str	r2, [r3, #72]	@ 0x48
 8001336:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_SPI_MspInit+0x15c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2105      	movs	r1, #5
 8001340:	2023      	movs	r0, #35	@ 0x23
 8001342:	f001 fede 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001346:	2023      	movs	r0, #35	@ 0x23
 8001348:	f001 fef7 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800134c:	e0c1      	b.n	80014d2 <HAL_SPI_MspInit+0x2ca>
 800134e:	bf00      	nop
 8001350:	40013000 	.word	0x40013000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000
 800135c:	2000037c 	.word	0x2000037c
 8001360:	40026410 	.word	0x40026410
 8001364:	200003dc 	.word	0x200003dc
 8001368:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a5a      	ldr	r2, [pc, #360]	@ (80014dc <HAL_SPI_MspInit+0x2d4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80ad 	bne.w	80014d2 <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	4b58      	ldr	r3, [pc, #352]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	4a57      	ldr	r2, [pc, #348]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001386:	6413      	str	r3, [r2, #64]	@ 0x40
 8001388:	4b55      	ldr	r3, [pc, #340]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a4:	4b4e      	ldr	r3, [pc, #312]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	4a49      	ldr	r2, [pc, #292]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c0:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <HAL_SPI_MspInit+0x2d8>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013cc:	230c      	movs	r3, #12
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013dc:	2305      	movs	r3, #5
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	483f      	ldr	r0, [pc, #252]	@ (80014e4 <HAL_SPI_MspInit+0x2dc>)
 80013e8:	f002 fa4c 	bl	8003884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013fe:	2305      	movs	r3, #5
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4837      	ldr	r0, [pc, #220]	@ (80014e8 <HAL_SPI_MspInit+0x2e0>)
 800140a:	f002 fa3b 	bl	8003884 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001410:	4a37      	ldr	r2, [pc, #220]	@ (80014f0 <HAL_SPI_MspInit+0x2e8>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001414:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141a:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001420:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001428:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800143a:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001446:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800144c:	4827      	ldr	r0, [pc, #156]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 800144e:	f001 fe8f 	bl	8003170 <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001458:	f7ff fca6 	bl	8000da8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a23      	ldr	r2, [pc, #140]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001460:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001462:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <HAL_SPI_MspInit+0x2e4>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001468:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 800146a:	4a23      	ldr	r2, [pc, #140]	@ (80014f8 <HAL_SPI_MspInit+0x2f0>)
 800146c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800146e:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 8001476:	2240      	movs	r2, #64	@ 0x40
 8001478:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 8001482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001486:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014a6:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 80014a8:	f001 fe62 	bl	8003170 <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 80014b2:	f7ff fc79 	bl	8000da8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 80014ba:	649a      	str	r2, [r3, #72]	@ 0x48
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_SPI_MspInit+0x2ec>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	2024      	movs	r0, #36	@ 0x24
 80014c8:	f001 fe1b 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014cc:	2024      	movs	r0, #36	@ 0x24
 80014ce:	f001 fe34 	bl	800313a <HAL_NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	@ 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40003800 	.word	0x40003800
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020400 	.word	0x40020400
 80014ec:	2000043c 	.word	0x2000043c
 80014f0:	40026058 	.word	0x40026058
 80014f4:	2000049c 	.word	0x2000049c
 80014f8:	40026070 	.word	0x40026070

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a25      	ldr	r2, [pc, #148]	@ (80015b0 <HAL_UART_MspInit+0xb4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d144      	bne.n	80015a8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a23      	ldr	r2, [pc, #140]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 8001528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001566:	2308      	movs	r3, #8
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 8001572:	f002 f987 	bl	8003884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001576:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001588:	230b      	movs	r3, #11
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4809      	ldr	r0, [pc, #36]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 8001594:	f002 f976 	bl	8003884 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2105      	movs	r1, #5
 800159c:	2034      	movs	r0, #52	@ 0x34
 800159e:	f001 fdb0 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015a2:	2034      	movs	r0, #52	@ 0x34
 80015a4:	f001 fdc9 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40004c00 	.word	0x40004c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 fabd 	bl	8001b74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015fa:	f009 f8a9 	bl	800a750 <xTaskGetSchedulerState>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d001      	beq.n	8001608 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001604:	f009 fea0 	bl	800b348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001610:	4802      	ldr	r0, [pc, #8]	@ (800161c <DMA1_Stream0_IRQHandler+0x10>)
 8001612:	f001 feed 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000014c 	.word	0x2000014c

08001620 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <DMA1_Stream2_IRQHandler+0x10>)
 8001626:	f001 fee3 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000020c 	.word	0x2000020c

08001634 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Stream3_IRQHandler+0x10>)
 800163a:	f001 fed9 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000043c 	.word	0x2000043c

08001648 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA1_Stream4_IRQHandler+0x10>)
 800164e:	f001 fecf 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000049c 	.word	0x2000049c

0800165c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <DMA1_Stream6_IRQHandler+0x10>)
 8001662:	f001 fec5 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001ac 	.word	0x200001ac

08001670 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <CAN1_TX_IRQHandler+0x10>)
 8001676:	f001 fa3a 	bl	8002aee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000007c 	.word	0x2000007c

08001684 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <CAN1_RX0_IRQHandler+0x10>)
 800168a:	f001 fa30 	bl	8002aee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000007c 	.word	0x2000007c

08001698 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
  * @brief  CAN1 RX0 수신 메시지 대기 인터럽트 콜백
  */ // edit
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;
  uint8_t rxData[8];

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	f107 0214 	add.w	r2, r7, #20
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f001 f8e7 	bl	800287e <HAL_CAN_GetRxMessage>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
  {
    // 진단기 요청 ID check
    if (rxHeader.StdId == CAN_ID_DIAG_REQUEST) {
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 80016bc:	d10b      	bne.n	80016d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
        if (canRxQueueHandle != NULL) {
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
            osMessageQueuePut(canRxQueueHandle, rxData, 0U, 0U);
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	2300      	movs	r3, #0
 80016d0:	2200      	movs	r2, #0
 80016d2:	f007 fa59 	bl	8008b88 <osMessageQueuePut>
        }
    }
  }
}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	@ 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000002c 	.word	0x2000002c

080016e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <I2C1_EV_IRQHandler+0x10>)
 80016ea:	f002 fde3 	bl	80042b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000a4 	.word	0x200000a4

080016f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <I2C1_ER_IRQHandler+0x10>)
 80016fe:	f002 ff4a 	bl	8004596 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000a4 	.word	0x200000a4

0800170c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <I2C2_EV_IRQHandler+0x10>)
 8001712:	f002 fdcf 	bl	80042b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000f8 	.word	0x200000f8

08001720 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <SPI1_IRQHandler+0x10>)
 8001726:	f005 fdf7 	bl	8007318 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002cc 	.word	0x200002cc

08001734 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <SPI2_IRQHandler+0x10>)
 800173a:	f005 fded 	bl	8007318 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000324 	.word	0x20000324

08001748 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA1_Stream7_IRQHandler+0x10>)
 800174e:	f001 fe4f 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000026c 	.word	0x2000026c

0800175c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <UART4_IRQHandler+0x10>)
 8001762:	f006 f907 	bl	8007974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200004fc 	.word	0x200004fc

08001770 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA2_Stream0_IRQHandler+0x10>)
 8001776:	f001 fe3b 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000037c 	.word	0x2000037c

08001784 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA2_Stream3_IRQHandler+0x10>)
 800178a:	f001 fe31 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200003dc 	.word	0x200003dc

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c2:	490e      	ldr	r1, [pc, #56]	@ (80017fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017e6:	f7ff ffd7 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f00a f835 	bl	800b858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff f805 	bl	80007fc <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001800:	0800b958 	.word	0x0800b958
  ldr r2, =_sbss
 8001804:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001808:	20004ea0 	.word	0x20004ea0

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <EEPROM_CS_Select>:
#define EEPROM_CS_PORT      GPIOB
#define EEPROM_CS_PIN       GPIO_PIN_6

static SPI_HandleTypeDef *g_hspi;

static inline void EEPROM_CS_Select() { HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_RESET); }
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
 8001814:	2200      	movs	r2, #0
 8001816:	2140      	movs	r1, #64	@ 0x40
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <EEPROM_CS_Select+0x14>)
 800181a:	f002 f9c7 	bl	8003bac <HAL_GPIO_WritePin>
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020400 	.word	0x40020400

08001828 <EEPROM_CS_Deselect>:
static inline void EEPROM_CS_Deselect() { HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET); }
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
 800182c:	2201      	movs	r2, #1
 800182e:	2140      	movs	r1, #64	@ 0x40
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <EEPROM_CS_Deselect+0x14>)
 8001832:	f002 f9bb 	bl	8003bac <HAL_GPIO_WritePin>
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40020400 	.word	0x40020400

08001840 <EEPROM_Init>:

void EEPROM_Init(SPI_HandleTypeDef *hspi) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    g_hspi = hspi;
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <EEPROM_Init+0x1c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
    EEPROM_CS_Deselect();
 800184e:	f7ff ffeb 	bl	8001828 <EEPROM_CS_Deselect>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000540 	.word	0x20000540

08001860 <EEPROM_Write_DTC>:

HAL_StatusTypeDef EEPROM_Write_DTC(uint32_t dtcCode) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    uint8_t wren_cmd = EEPROM_CMD_READ;
 8001868:	2306      	movs	r3, #6
 800186a:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_header[3];

    EEPROM_CS_Select();
 800186c:	f7ff ffd0 	bl	8001810 <EEPROM_CS_Select>
    HAL_SPI_Transmit(g_hspi, &wren_cmd, 1, 100);
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <EEPROM_Write_DTC+0x6c>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	f107 010f 	add.w	r1, r7, #15
 8001878:	2364      	movs	r3, #100	@ 0x64
 800187a:	2201      	movs	r2, #1
 800187c:	f005 f95d 	bl	8006b3a <HAL_SPI_Transmit>
    EEPROM_CS_Deselect();
 8001880:	f7ff ffd2 	bl	8001828 <EEPROM_CS_Deselect>
    HAL_Delay(5);
 8001884:	2005      	movs	r0, #5
 8001886:	f000 f995 	bl	8001bb4 <HAL_Delay>

    tx_header[0] = EEPROM_CMD_WRITE;
 800188a:	2302      	movs	r3, #2
 800188c:	733b      	strb	r3, [r7, #12]
    tx_header[1] = (EEPROM_DTC_ADDRESS >> 8) & 0xFF;
 800188e:	2301      	movs	r3, #1
 8001890:	737b      	strb	r3, [r7, #13]
    tx_header[2] = EEPROM_DTC_ADDRESS & 0xFF;
 8001892:	2300      	movs	r3, #0
 8001894:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_Select();
 8001896:	f7ff ffbb 	bl	8001810 <EEPROM_CS_Select>
    HAL_SPI_Transmit(g_hspi, tx_header, 3, 100);
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <EEPROM_Write_DTC+0x6c>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	2364      	movs	r3, #100	@ 0x64
 80018a4:	2203      	movs	r2, #3
 80018a6:	f005 f948 	bl	8006b3a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(g_hspi, (uint8_t*)&dtcCode, sizeof(uint32_t), 100);
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <EEPROM_Write_DTC+0x6c>)
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	1d39      	adds	r1, r7, #4
 80018b0:	2364      	movs	r3, #100	@ 0x64
 80018b2:	2204      	movs	r2, #4
 80018b4:	f005 f941 	bl	8006b3a <HAL_SPI_Transmit>
    EEPROM_CS_Deselect();
 80018b8:	f7ff ffb6 	bl	8001828 <EEPROM_CS_Deselect>
    HAL_Delay(5);
 80018bc:	2005      	movs	r0, #5
 80018be:	f000 f979 	bl	8001bb4 <HAL_Delay>

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000540 	.word	0x20000540

080018d0 <EEPROM_Read_DTC>:

HAL_StatusTypeDef EEPROM_Read_DTC(uint32_t *dtcCode) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    uint8_t tx_header[3];

    tx_header[0] = EEPROM_CMD_READ;
 80018d8:	2306      	movs	r3, #6
 80018da:	733b      	strb	r3, [r7, #12]
    tx_header[1] = (EEPROM_DTC_ADDRESS >> 8) & 0xFF;
 80018dc:	2301      	movs	r3, #1
 80018de:	737b      	strb	r3, [r7, #13]
    tx_header[2] = EEPROM_DTC_ADDRESS & 0xFF;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_Select();
 80018e4:	f7ff ff94 	bl	8001810 <EEPROM_CS_Select>
    HAL_SPI_Transmit(g_hspi, tx_header, 3, 100);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <EEPROM_Read_DTC+0x44>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f107 010c 	add.w	r1, r7, #12
 80018f0:	2364      	movs	r3, #100	@ 0x64
 80018f2:	2203      	movs	r2, #3
 80018f4:	f005 f921 	bl	8006b3a <HAL_SPI_Transmit>
    HAL_SPI_Receive(g_hspi, (uint8_t*)dtcCode, sizeof(uint32_t), 100);
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <EEPROM_Read_DTC+0x44>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	2364      	movs	r3, #100	@ 0x64
 80018fe:	2204      	movs	r2, #4
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	f005 fa56 	bl	8006db2 <HAL_SPI_Receive>
    EEPROM_CS_Deselect();
 8001906:	f7ff ff8f 	bl	8001828 <EEPROM_CS_Deselect>

    return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000540 	.word	0x20000540

08001918 <EEPROM_Clear_DTC>:

HAL_StatusTypeDef EEPROM_Clear_DTC(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    return EEPROM_Write_DTC(0x00000000);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff ff9f 	bl	8001860 <EEPROM_Write_DTC>
 8001922:	4603      	mov	r3, r0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}

08001928 <PMIC_Init>:
    } fields;
} PmicStatusReg2_t;

static I2C_HandleTypeDef *g_hi2c;

HAL_StatusTypeDef PMIC_Init(I2C_HandleTypeDef *hi2c) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    g_hi2c = hi2c;
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <PMIC_Init+0x1c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000544 	.word	0x20000544

08001948 <PMIC_Check_Faults>:

FaultType_t PMIC_Check_Faults(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af04      	add	r7, sp, #16
    PmicStatusReg1_t statusReg1; // UV/OC check
    PmicStatusReg2_t statusReg2; // OV check

    // [고장 우선순위 1순위] OV check
    if (HAL_I2C_Mem_Read(g_hi2c, PMIC_SLAVE_ADDR, PMIC_REG_STATUS2,
 800194e:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <PMIC_Check_Faults+0x80>)
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	230a      	movs	r3, #10
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	2301      	movs	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	463b      	mov	r3, r7
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	220f      	movs	r2, #15
 8001962:	21d0      	movs	r1, #208	@ 0xd0
 8001964:	f002 fa80 	bl	8003e68 <HAL_I2C_Mem_Read>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <PMIC_Check_Faults+0x36>
    		I2C_MEMADD_SIZE_8BIT, &statusReg2.rawData, 1, 10) == HAL_OK) {
        if (statusReg2.fields.buck1_ov_flg) {
 800196e:	783b      	ldrb	r3, [r7, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <PMIC_Check_Faults+0x36>
            return FAULT_TYPE_OV;
 800197a:	2301      	movs	r3, #1
 800197c:	e020      	b.n	80019c0 <PMIC_Check_Faults+0x78>
        }
    }

    // [고장 우선순위 2, 3순위] UV/OC check
    if (HAL_I2C_Mem_Read(g_hi2c, PMIC_SLAVE_ADDR, PMIC_REG_STATUS,
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <PMIC_Check_Faults+0x80>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	230a      	movs	r3, #10
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2301      	movs	r3, #1
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	220e      	movs	r2, #14
 8001992:	21d0      	movs	r1, #208	@ 0xd0
 8001994:	f002 fa68 	bl	8003e68 <HAL_I2C_Mem_Read>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <PMIC_Check_Faults+0x76>
    		I2C_MEMADD_SIZE_8BIT, &statusReg1.rawData, 1, 10) == HAL_OK) {
        if (statusReg1.fields.buck1_oc_flg) {
 800199e:	793b      	ldrb	r3, [r7, #4]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <PMIC_Check_Faults+0x66>
            return FAULT_TYPE_OC;
 80019aa:	2302      	movs	r3, #2
 80019ac:	e008      	b.n	80019c0 <PMIC_Check_Faults+0x78>
        }
        if (statusReg1.fields.buck1_uv_flg) {
 80019ae:	793b      	ldrb	r3, [r7, #4]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <PMIC_Check_Faults+0x76>
            return FAULT_TYPE_UV;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e000      	b.n	80019c0 <PMIC_Check_Faults+0x78>
        }
    }

    return FAULT_TYPE_NONE;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000544 	.word	0x20000544

080019cc <CAN_Manager_Init>:
#define CAN_STB_PORT    GPIOC
#define CAN_STB_PIN     GPIO_PIN_13

static CAN_HandleTypeDef *g_hcan;

void CAN_Manager_Init(CAN_HandleTypeDef *hcan) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    g_hcan = hcan;
 80019d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a04 <CAN_Manager_Init+0x38>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(CAN_STB_PORT, CAN_STB_PIN, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <CAN_Manager_Init+0x3c>)
 80019e2:	f002 f8e3 	bl	8003bac <HAL_GPIO_WritePin>
    HAL_CAN_Start(g_hcan);
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <CAN_Manager_Init+0x38>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fdf3 	bl	80025d6 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(g_hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <CAN_Manager_Init+0x38>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2102      	movs	r1, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f853 	bl	8002aa2 <HAL_CAN_ActivateNotification>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000548 	.word	0x20000548
 8001a08:	40020800 	.word	0x40020800

08001a0c <CAN_Transmit_DTC_Broadcast>:

HAL_StatusTypeDef CAN_Transmit_DTC_Broadcast(uint32_t dtcCode) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	@ 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[4];
    uint32_t txMailbox;

    txHeader.StdId = CAN_ID_DTC_BROADCAST;;
 8001a14:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8001a18:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    txHeader.DLC = 4;
 8001a22:	2304      	movs	r3, #4
 8001a24:	623b      	str	r3, [r7, #32]

    txData[0] = (dtcCode >> 24) & 0xFF;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0e1b      	lsrs	r3, r3, #24
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	733b      	strb	r3, [r7, #12]
    txData[1] = (dtcCode >> 16) & 0xFF;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	737b      	strb	r3, [r7, #13]
    txData[2] = (dtcCode >> 8) & 0xFF;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	73bb      	strb	r3, [r7, #14]
    txData[3] = dtcCode & 0xFF;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_GetTxMailboxesFreeLevel(g_hcan) == 0) return HAL_BUSY;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <CAN_Transmit_DTC_Broadcast+0x6c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fee3 	bl	8002814 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <CAN_Transmit_DTC_Broadcast+0x4c>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e00a      	b.n	8001a6e <CAN_Transmit_DTC_Broadcast+0x62>
    return HAL_CAN_AddTxMessage(g_hcan, &txHeader, txData, &txMailbox);
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <CAN_Transmit_DTC_Broadcast+0x6c>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	f107 0110 	add.w	r1, r7, #16
 8001a68:	f000 fdf9 	bl	800265e <HAL_CAN_AddTxMessage>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3728      	adds	r7, #40	@ 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000548 	.word	0x20000548

08001a7c <CAN_Transmit_Diag_Response>:

HAL_StatusTypeDef CAN_Transmit_Diag_Response(uint8_t *data, uint8_t length) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.StdId = CAN_ID_DIAG_RESPONSE;
 8001a88:	f44f 63f5 	mov.w	r3, #1960	@ 0x7a8
 8001a8c:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    txHeader.DLC = length;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_GetTxMailboxesFreeLevel(g_hcan) == 0) return HAL_BUSY;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <CAN_Transmit_Diag_Response+0x50>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 feb8 	bl	8002814 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <CAN_Transmit_Diag_Response+0x32>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e009      	b.n	8001ac2 <CAN_Transmit_Diag_Response+0x46>
    return HAL_CAN_AddTxMessage(g_hcan, &txHeader, data, &txMailbox);
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <CAN_Transmit_Diag_Response+0x50>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	f107 0110 	add.w	r1, r7, #16
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	f000 fdcf 	bl	800265e <HAL_CAN_AddTxMessage>
 8001ac0:	4603      	mov	r3, r0

}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3728      	adds	r7, #40	@ 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000548 	.word	0x20000548

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f001 faf7 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff f956 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fb0f 	bl	8003156 <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f001 fad7 	bl	8003102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	@ (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008
 8001b98:	2000054c 	.word	0x2000054c

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000054c 	.word	0x2000054c

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff ffee 	bl	8001b9c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d005      	beq.n	8001bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_Delay+0x44>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bda:	bf00      	nop
 8001bdc:	f7ff ffde 	bl	8001b9c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f7      	bhi.n	8001bdc <HAL_Delay+0x28>
  {
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008

08001bfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e033      	b.n	8001c7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff f8f6 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d118      	bne.n	8001c6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c42:	f023 0302 	bic.w	r3, r3, #2
 8001c46:	f043 0202 	orr.w	r2, r3, #2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 faca 	bl	80021e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c6a:	e001      	b.n	8001c70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Start+0x1a>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e097      	b.n	8001dce <HAL_ADC_Start+0x14a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d018      	beq.n	8001ce6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc4:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <HAL_ADC_Start+0x158>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a45      	ldr	r2, [pc, #276]	@ (8001de0 <HAL_ADC_Start+0x15c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9a      	lsrs	r2, r3, #18
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d15f      	bne.n	8001db4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d32:	d106      	bne.n	8001d42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	f023 0206 	bic.w	r2, r3, #6
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d50:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_ADC_Start+0x160>)
 8001d52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d129      	bne.n	8001dcc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	e020      	b.n	8001dcc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a16      	ldr	r2, [pc, #88]	@ (8001de8 <HAL_ADC_Start+0x164>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d11b      	bne.n	8001dcc <HAL_ADC_Start+0x148>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d114      	bne.n	8001dcc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	e00b      	b.n	8001dcc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f043 0210 	orr.w	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	431bde83 	.word	0x431bde83
 8001de4:	40012300 	.word	0x40012300
 8001de8:	40012000 	.word	0x40012000

08001dec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Stop+0x16>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e021      	b.n	8001e46 <HAL_ADC_Stop+0x5a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6e:	d113      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e7e:	d10b      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e063      	b.n	8001f60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e98:	f7ff fe80 	bl	8001b9c <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e9e:	e021      	b.n	8001ee4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d01d      	beq.n	8001ee4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_ADC_PollForConversion+0x6c>
 8001eae:	f7ff fe75 	bl	8001b9c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d212      	bcs.n	8001ee4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d00b      	beq.n	8001ee4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e03d      	b.n	8001f60 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d1d6      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f06f 0212 	mvn.w	r2, #18
 8001efa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d123      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d11f      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d111      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1c>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e113      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x244>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d925      	bls.n	8001ffc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68d9      	ldr	r1, [r3, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b1e      	subs	r3, #30
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68d9      	ldr	r1, [r3, #12]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4403      	add	r3, r0
 8001fee:	3b1e      	subs	r3, #30
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	e022      	b.n	8002042 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6919      	ldr	r1, [r3, #16]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	2207      	movs	r2, #7
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	400a      	ands	r2, r1
 800201e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	4603      	mov	r3, r0
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4403      	add	r3, r0
 8002038:	409a      	lsls	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b06      	cmp	r3, #6
 8002048:	d824      	bhi.n	8002094 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b05      	subs	r3, #5
 800205c:	221f      	movs	r2, #31
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	400a      	ands	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b05      	subs	r3, #5
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	635a      	str	r2, [r3, #52]	@ 0x34
 8002092:	e04c      	b.n	800212e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d824      	bhi.n	80020e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b23      	subs	r3, #35	@ 0x23
 80020ae:	221f      	movs	r2, #31
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43da      	mvns	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	400a      	ands	r2, r1
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b23      	subs	r3, #35	@ 0x23
 80020d8:	fa00 f203 	lsl.w	r2, r0, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e4:	e023      	b.n	800212e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b41      	subs	r3, #65	@ 0x41
 80020f8:	221f      	movs	r2, #31
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	400a      	ands	r2, r1
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3b41      	subs	r3, #65	@ 0x41
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <HAL_ADC_ConfigChannel+0x250>)
 8002130:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a28      	ldr	r2, [pc, #160]	@ (80021d8 <HAL_ADC_ConfigChannel+0x254>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d10f      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1d8>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b12      	cmp	r3, #18
 8002142:	d10b      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_ADC_ConfigChannel+0x254>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d12b      	bne.n	80021be <HAL_ADC_ConfigChannel+0x23a>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_ADC_ConfigChannel+0x258>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <HAL_ADC_ConfigChannel+0x1f4>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b11      	cmp	r3, #17
 8002176:	d122      	bne.n	80021be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_ADC_ConfigChannel+0x258>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d111      	bne.n	80021be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_ADC_ConfigChannel+0x25c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <HAL_ADC_ConfigChannel+0x260>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	0c9a      	lsrs	r2, r3, #18
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40012300 	.word	0x40012300
 80021d8:	40012000 	.word	0x40012000
 80021dc:	10000012 	.word	0x10000012
 80021e0:	20000000 	.word	0x20000000
 80021e4:	431bde83 	.word	0x431bde83

080021e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f0:	4b79      	ldr	r3, [pc, #484]	@ (80023d8 <ADC_Init+0x1f0>)
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	4a58      	ldr	r2, [pc, #352]	@ (80023dc <ADC_Init+0x1f4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d022      	beq.n	80022c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800228e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e00f      	b.n	80022e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0202 	bic.w	r2, r2, #2
 80022f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e1b      	ldrb	r3, [r3, #24]
 8002300:	005a      	lsls	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01b      	beq.n	800234c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002322:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002332:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	3b01      	subs	r3, #1
 8002340:	035a      	lsls	r2, r3, #13
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	e007      	b.n	800235c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800236a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	3b01      	subs	r3, #1
 8002378:	051a      	lsls	r2, r3, #20
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800239e:	025a      	lsls	r2, r3, #9
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	029a      	lsls	r2, r3, #10
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40012300 	.word	0x40012300
 80023dc:	0f000001 	.word	0x0f000001

080023e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0ed      	b.n	80025ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe fd48 	bl	8000e94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002414:	f7ff fbc2 	bl	8001b9c <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800241a:	e012      	b.n	8002442 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800241c:	f7ff fbbe 	bl	8001b9c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b0a      	cmp	r3, #10
 8002428:	d90b      	bls.n	8002442 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0c5      	b.n	80025ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0e5      	beq.n	800241c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0202 	bic.w	r2, r2, #2
 800245e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002460:	f7ff fb9c 	bl	8001b9c <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002466:	e012      	b.n	800248e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002468:	f7ff fb98 	bl	8001b9c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d90b      	bls.n	800248e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e09f      	b.n	80025ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e5      	bne.n	8002468 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7e1b      	ldrb	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d108      	bne.n	80024b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e007      	b.n	80024c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e5b      	ldrb	r3, [r3, #25]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e007      	b.n	80024f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e9b      	ldrb	r3, [r3, #26]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d108      	bne.n	800250a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e007      	b.n	800251a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0220 	bic.w	r2, r2, #32
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7edb      	ldrb	r3, [r3, #27]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e007      	b.n	8002544 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0210 	orr.w	r2, r2, #16
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d108      	bne.n	800255e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0208 	orr.w	r2, r2, #8
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e007      	b.n	800256e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7f5b      	ldrb	r3, [r3, #29]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0204 	orr.w	r2, r2, #4
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e007      	b.n	8002598 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	1e5a      	subs	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d12e      	bne.n	8002648 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002602:	f7ff facb 	bl	8001b9c <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002608:	e012      	b.n	8002630 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800260a:	f7ff fac7 	bl	8001b9c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b0a      	cmp	r3, #10
 8002616:	d90b      	bls.n	8002630 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2205      	movs	r2, #5
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e012      	b.n	8002656 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e5      	bne.n	800260a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e006      	b.n	8002656 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800265e:	b480      	push	{r7}
 8002660:	b089      	sub	sp, #36	@ 0x24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002672:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d003      	beq.n	800268a <HAL_CAN_AddTxMessage+0x2c>
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f040 80b8 	bne.w	80027fa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a0 	beq.w	80027ea <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d907      	bls.n	80026ca <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e09e      	b.n	8002808 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026ca:	2201      	movs	r2, #1
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	6809      	ldr	r1, [r1, #0]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3318      	adds	r3, #24
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	440b      	add	r3, r1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00f      	b.n	8002718 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002702:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800270c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3318      	adds	r3, #24
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	440b      	add	r3, r1
 8002716:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3318      	adds	r3, #24
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	440b      	add	r3, r1
 8002728:	3304      	adds	r3, #4
 800272a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	7d1b      	ldrb	r3, [r3, #20]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d111      	bne.n	8002758 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3318      	adds	r3, #24
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	6811      	ldr	r1, [r2, #0]
 8002748:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3318      	adds	r3, #24
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	440b      	add	r3, r1
 8002754:	3304      	adds	r3, #4
 8002756:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3307      	adds	r3, #7
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	061a      	lsls	r2, r3, #24
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3306      	adds	r3, #6
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3305      	adds	r3, #5
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	4313      	orrs	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	3204      	adds	r2, #4
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	4610      	mov	r0, r2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	6811      	ldr	r1, [r2, #0]
 8002780:	ea43 0200 	orr.w	r2, r3, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	440b      	add	r3, r1
 800278a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800278e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3303      	adds	r3, #3
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	061a      	lsls	r2, r3, #24
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3302      	adds	r3, #2
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3301      	adds	r3, #1
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	4313      	orrs	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	7812      	ldrb	r2, [r2, #0]
 80027b0:	4610      	mov	r0, r2
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	6811      	ldr	r1, [r2, #0]
 80027b6:	ea43 0200 	orr.w	r2, r3, r0
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	440b      	add	r3, r1
 80027c0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80027c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3318      	adds	r3, #24
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	6811      	ldr	r1, [r2, #0]
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3318      	adds	r3, #24
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	440b      	add	r3, r1
 80027e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e00e      	b.n	8002808 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e006      	b.n	8002808 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3724      	adds	r7, #36	@ 0x24
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002826:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002828:	7afb      	ldrb	r3, [r7, #11]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d002      	beq.n	8002834 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d11d      	bne.n	8002870 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3301      	adds	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002892:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d003      	beq.n	80028a2 <HAL_CAN_GetRxMessage+0x24>
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	2b02      	cmp	r3, #2
 800289e:	f040 80f3 	bne.w	8002a88 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10e      	bne.n	80028c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e7      	b.n	8002a96 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0d8      	b.n	8002a96 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	331b      	adds	r3, #27
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	4413      	add	r3, r2
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0204 	and.w	r2, r3, #4
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	331b      	adds	r3, #27
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	4413      	add	r3, r2
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0d5b      	lsrs	r3, r3, #21
 8002912:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00b      	b.n	8002934 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	331b      	adds	r3, #27
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4413      	add	r3, r2
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	331b      	adds	r3, #27
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0202 	and.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	331b      	adds	r3, #27
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	4413      	add	r3, r2
 8002956:	3304      	adds	r3, #4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	331b      	adds	r3, #27
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b2da      	uxtb	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	331b      	adds	r3, #27
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	4413      	add	r3, r2
 8002986:	3304      	adds	r3, #4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0a1a      	lsrs	r2, r3, #8
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0c1a      	lsrs	r2, r3, #16
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3302      	adds	r3, #2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e1a      	lsrs	r2, r3, #24
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3303      	adds	r3, #3
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0a1a      	lsrs	r2, r3, #8
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	3305      	adds	r3, #5
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0c1a      	lsrs	r2, r3, #16
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3306      	adds	r3, #6
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e1a      	lsrs	r2, r3, #24
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	3307      	adds	r3, #7
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0220 	orr.w	r2, r2, #32
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	e007      	b.n	8002a84 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e006      	b.n	8002a96 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d002      	beq.n	8002ac0 <HAL_CAN_ActivateNotification+0x1e>
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d109      	bne.n	8002ad4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e006      	b.n	8002ae2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b08a      	sub	sp, #40	@ 0x28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d07c      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d023      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f983 	bl	8002e5c <HAL_CAN_TxMailbox0CompleteCallback>
 8002b56:	e016      	b.n	8002b86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6a:	e00c      	b.n	8002b86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7e:	e002      	b.n	8002b86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f989 	bl	8002e98 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d024      	beq.n	8002bda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f963 	bl	8002e70 <HAL_CAN_TxMailbox1CompleteCallback>
 8002baa:	e016      	b.n	8002bda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bbe:	e00c      	b.n	8002bda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd2:	e002      	b.n	8002bda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f969 	bl	8002eac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d024      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f943 	bl	8002e84 <HAL_CAN_TxMailbox2CompleteCallback>
 8002bfe:	e016      	b.n	8002c2e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	e00c      	b.n	8002c2e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c26:	e002      	b.n	8002c2e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f949 	bl	8002ec0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2210      	movs	r2, #16
 8002c50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f930 	bl	8002ed4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fe fd03 	bl	8001698 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2208      	movs	r2, #8
 8002cd0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f912 	bl	8002efc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8f9 	bl	8002ee8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2210      	movs	r2, #16
 8002d10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8fc 	bl	8002f10 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2208      	movs	r2, #8
 8002d32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8f5 	bl	8002f24 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d07b      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d072      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d043      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03e      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dbc:	2b60      	cmp	r3, #96	@ 0x60
 8002dbe:	d02b      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x32a>
 8002dc0:	2b60      	cmp	r3, #96	@ 0x60
 8002dc2:	d82e      	bhi.n	8002e22 <HAL_CAN_IRQHandler+0x334>
 8002dc4:	2b50      	cmp	r3, #80	@ 0x50
 8002dc6:	d022      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x320>
 8002dc8:	2b50      	cmp	r3, #80	@ 0x50
 8002dca:	d82a      	bhi.n	8002e22 <HAL_CAN_IRQHandler+0x334>
 8002dcc:	2b40      	cmp	r3, #64	@ 0x40
 8002dce:	d019      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x316>
 8002dd0:	2b40      	cmp	r3, #64	@ 0x40
 8002dd2:	d826      	bhi.n	8002e22 <HAL_CAN_IRQHandler+0x334>
 8002dd4:	2b30      	cmp	r3, #48	@ 0x30
 8002dd6:	d010      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x30c>
 8002dd8:	2b30      	cmp	r3, #48	@ 0x30
 8002dda:	d822      	bhi.n	8002e22 <HAL_CAN_IRQHandler+0x334>
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d002      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x2f8>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d005      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002de4:	e01d      	b.n	8002e22 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	f043 0308 	orr.w	r3, r3, #8
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dee:	e019      	b.n	8002e24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	f043 0310 	orr.w	r3, r3, #16
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002df8:	e014      	b.n	8002e24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	f043 0320 	orr.w	r3, r3, #32
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e02:	e00f      	b.n	8002e24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e0c:	e00a      	b.n	8002e24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e16:	e005      	b.n	8002e24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e20:	e000      	b.n	8002e24 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e22:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002e32:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f872 	bl	8002f38 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e54:	bf00      	nop
 8002e56:	3728      	adds	r7, #40	@ 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7e:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db0b      	blt.n	8002fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4907      	ldr	r1, [pc, #28]	@ (8002fe8 <__NVIC_EnableIRQ+0x38>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	@ (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	@ (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
         );
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	@ 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f7ff ff8e 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff29 	bl	8002f4c <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff3e 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff8e 	bl	8003040 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5d 	bl	8002fec <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff31 	bl	8002fb0 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa2 	bl	80030a8 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7fe fd0e 	bl	8001b9c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e099      	b.n	80032c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ac:	e00f      	b.n	80031ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ae:	f7fe fcf5 	bl	8001b9c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d908      	bls.n	80031ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2203      	movs	r2, #3
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e078      	b.n	80032c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e8      	bne.n	80031ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <HAL_DMA_Init+0x158>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	2b04      	cmp	r3, #4
 8003226:	d107      	bne.n	8003238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	4313      	orrs	r3, r2
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	2b04      	cmp	r3, #4
 8003260:	d117      	bne.n	8003292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fa89 	bl	800378c <DMA_CheckFifoParam>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2240      	movs	r2, #64	@ 0x40
 8003284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800328e:	2301      	movs	r3, #1
 8003290:	e016      	b.n	80032c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa40 	bl	8003720 <DMA_CalcBaseAndBitshift>
 80032a0:	4603      	mov	r3, r0
 80032a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	223f      	movs	r2, #63	@ 0x3f
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	e010803f 	.word	0xe010803f

080032cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032da:	f7fe fc5f 	bl	8001b9c <HAL_GetTick>
 80032de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d008      	beq.n	80032fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e052      	b.n	80033a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0216 	bic.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800331c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_DMA_Abort+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800334e:	e013      	b.n	8003378 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003350:	f7fe fc24 	bl	8001b9c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d90c      	bls.n	8003378 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2203      	movs	r2, #3
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e015      	b.n	80033a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e4      	bne.n	8003350 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	223f      	movs	r2, #63	@ 0x3f
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d004      	beq.n	80033ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00c      	b.n	80033e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2205      	movs	r2, #5
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003638 <HAL_DMA_IRQHandler+0x248>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a8e      	ldr	r2, [pc, #568]	@ (800363c <HAL_DMA_IRQHandler+0x24c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	2208      	movs	r2, #8
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01a      	beq.n	800345c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	2208      	movs	r2, #8
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	2201      	movs	r2, #1
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	2204      	movs	r2, #4
 8003498:	409a      	lsls	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	2204      	movs	r2, #4
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	f043 0204 	orr.w	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	2210      	movs	r2, #16
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d043      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d03c      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	2210      	movs	r2, #16
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d024      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e01f      	b.n	8003560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e016      	b.n	8003560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0208 	bic.w	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	2220      	movs	r2, #32
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 808f 	beq.w	8003690 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8087 	beq.w	8003690 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	2220      	movs	r2, #32
 8003588:	409a      	lsls	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b05      	cmp	r3, #5
 8003598:	d136      	bne.n	8003608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0216 	bic.w	r2, r2, #22
 80035a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <HAL_DMA_IRQHandler+0x1da>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0208 	bic.w	r2, r2, #8
 80035d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	223f      	movs	r2, #63	@ 0x3f
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d07e      	beq.n	80036fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
        }
        return;
 8003606:	e079      	b.n	80036fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01d      	beq.n	8003652 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	2b00      	cmp	r3, #0
 800362a:	d031      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e02c      	b.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
 8003636:	bf00      	nop
 8003638:	20000000 	.word	0x20000000
 800363c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
 8003650:	e01e      	b.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0210 	bic.w	r2, r2, #16
 800366e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003694:	2b00      	cmp	r3, #0
 8003696:	d032      	beq.n	80036fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2205      	movs	r2, #5
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3301      	adds	r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d307      	bcc.n	80036d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f2      	bne.n	80036bc <HAL_DMA_IRQHandler+0x2cc>
 80036d6:	e000      	b.n	80036da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
 80036fa:	e000      	b.n	80036fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80036fc:	bf00      	nop
    }
  }
}
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003712:	b2db      	uxtb	r3, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	3b10      	subs	r3, #16
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <DMA_CalcBaseAndBitshift+0x64>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800373a:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <DMA_CalcBaseAndBitshift+0x68>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d909      	bls.n	8003762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003760:	e007      	b.n	8003772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	aaaaaaab 	.word	0xaaaaaaab
 8003788:	0800b940 	.word	0x0800b940

0800378c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11f      	bne.n	80037e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d856      	bhi.n	800385a <DMA_CheckFifoParam+0xce>
 80037ac:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <DMA_CheckFifoParam+0x28>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d7 	.word	0x080037d7
 80037bc:	080037c5 	.word	0x080037c5
 80037c0:	0800385b 	.word	0x0800385b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d046      	beq.n	800385e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e043      	b.n	800385e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037de:	d140      	bne.n	8003862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e4:	e03d      	b.n	8003862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ee:	d121      	bne.n	8003834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d837      	bhi.n	8003866 <DMA_CheckFifoParam+0xda>
 80037f6:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <DMA_CheckFifoParam+0x70>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	08003813 	.word	0x08003813
 8003804:	0800380d 	.word	0x0800380d
 8003808:	08003825 	.word	0x08003825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e030      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d025      	beq.n	800386a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e022      	b.n	800386a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800382c:	d11f      	bne.n	800386e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003832:	e01c      	b.n	800386e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d903      	bls.n	8003842 <DMA_CheckFifoParam+0xb6>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d003      	beq.n	8003848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003840:	e018      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      break;
 8003846:	e015      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e00b      	b.n	8003872 <DMA_CheckFifoParam+0xe6>
      break;
 800385a:	bf00      	nop
 800385c:	e00a      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 800385e:	bf00      	nop
 8003860:	e008      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 8003862:	bf00      	nop
 8003864:	e006      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
 8003868:	e004      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;   
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
    }
  } 
  
  return status; 
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e165      	b.n	8003b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a0:	2201      	movs	r2, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 8154 	bne.w	8003b66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d005      	beq.n	80038d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d130      	bne.n	8003938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	2203      	movs	r2, #3
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800390c:	2201      	movs	r2, #1
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 0201 	and.w	r2, r3, #1
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b03      	cmp	r3, #3
 8003942:	d017      	beq.n	8003974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d123      	bne.n	80039c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	08da      	lsrs	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3208      	adds	r2, #8
 80039c2:	69b9      	ldr	r1, [r7, #24]
 80039c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0203 	and.w	r2, r3, #3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80ae 	beq.w	8003b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	4a5c      	ldr	r2, [pc, #368]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a26:	4a58      	ldr	r2, [pc, #352]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b8c <HAL_GPIO_Init+0x308>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d025      	beq.n	8003a9e <HAL_GPIO_Init+0x21a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4e      	ldr	r2, [pc, #312]	@ (8003b90 <HAL_GPIO_Init+0x30c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01f      	beq.n	8003a9a <HAL_GPIO_Init+0x216>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b94 <HAL_GPIO_Init+0x310>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d019      	beq.n	8003a96 <HAL_GPIO_Init+0x212>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4c      	ldr	r2, [pc, #304]	@ (8003b98 <HAL_GPIO_Init+0x314>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_GPIO_Init+0x20e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b9c <HAL_GPIO_Init+0x318>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00d      	beq.n	8003a8e <HAL_GPIO_Init+0x20a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba0 <HAL_GPIO_Init+0x31c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <HAL_GPIO_Init+0x206>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a49      	ldr	r2, [pc, #292]	@ (8003ba4 <HAL_GPIO_Init+0x320>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_GPIO_Init+0x202>
 8003a82:	2306      	movs	r3, #6
 8003a84:	e00c      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a86:	2307      	movs	r3, #7
 8003a88:	e00a      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e008      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e006      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a92:	2303      	movs	r3, #3
 8003a94:	e004      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_Init+0x21c>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	f002 0203 	and.w	r2, r2, #3
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab0:	4935      	ldr	r1, [pc, #212]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003abe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae2:	4a31      	ldr	r2, [pc, #196]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b12:	4b25      	ldr	r3, [pc, #148]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b60:	4a11      	ldr	r2, [pc, #68]	@ (8003ba8 <HAL_GPIO_Init+0x324>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b0f      	cmp	r3, #15
 8003b70:	f67f ae96 	bls.w	80038a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3724      	adds	r7, #36	@ 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	40020400 	.word	0x40020400
 8003b94:	40020800 	.word	0x40020800
 8003b98:	40020c00 	.word	0x40020c00
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40021400 	.word	0x40021400
 8003ba4:	40021800 	.word	0x40021800
 8003ba8:	40013c00 	.word	0x40013c00

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc8:	e003      	b.n	8003bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	041a      	lsls	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	619a      	str	r2, [r3, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e12b      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f99c 	bl	8000f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	@ 0x24
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c44:	f002 fc44 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a81      	ldr	r2, [pc, #516]	@ (8003e54 <HAL_I2C_Init+0x274>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d807      	bhi.n	8003c64 <HAL_I2C_Init+0x84>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a80      	ldr	r2, [pc, #512]	@ (8003e58 <HAL_I2C_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e006      	b.n	8003c72 <HAL_I2C_Init+0x92>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a7d      	ldr	r2, [pc, #500]	@ (8003e5c <HAL_I2C_Init+0x27c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0e7      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a78      	ldr	r2, [pc, #480]	@ (8003e60 <HAL_I2C_Init+0x280>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8003e54 <HAL_I2C_Init+0x274>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <HAL_I2C_Init+0xd4>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	e009      	b.n	8003cc8 <HAL_I2C_Init+0xe8>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	4a69      	ldr	r2, [pc, #420]	@ (8003e64 <HAL_I2C_Init+0x284>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	495c      	ldr	r1, [pc, #368]	@ (8003e54 <HAL_I2C_Init+0x274>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d819      	bhi.n	8003d1c <HAL_I2C_Init+0x13c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e59      	subs	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_I2C_Init+0x138>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1e59      	subs	r1, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d16:	e051      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e04f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <HAL_I2C_Init+0x168>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e012      	b.n	8003d6e <HAL_I2C_Init+0x18e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Init+0x196>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e022      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <HAL_I2C_Init+0x1bc>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e58      	subs	r0, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	440b      	add	r3, r1
 8003d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9a:	e00f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6809      	ldr	r1, [r1, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6911      	ldr	r1, [r2, #16]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	4311      	orrs	r1, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	000186a0 	.word	0x000186a0
 8003e58:	001e847f 	.word	0x001e847f
 8003e5c:	003d08ff 	.word	0x003d08ff
 8003e60:	431bde83 	.word	0x431bde83
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	@ 0x30
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	817b      	strh	r3, [r7, #10]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	813b      	strh	r3, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e82:	f7fd fe8b 	bl	8001b9c <HAL_GetTick>
 8003e86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	f040 8208 	bne.w	80042a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2319      	movs	r3, #25
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	497b      	ldr	r1, [pc, #492]	@ (800408c <HAL_I2C_Mem_Read+0x224>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f001 ff73 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
 8003eae:	e1fb      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2C_Mem_Read+0x56>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e1f4      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d007      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2222      	movs	r2, #34	@ 0x22
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2240      	movs	r2, #64	@ 0x40
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a5b      	ldr	r2, [pc, #364]	@ (8004090 <HAL_I2C_Mem_Read+0x228>)
 8003f24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f26:	88f8      	ldrh	r0, [r7, #6]
 8003f28:	893a      	ldrh	r2, [r7, #8]
 8003f2a:	8979      	ldrh	r1, [r7, #10]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4603      	mov	r3, r0
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f001 fd98 	bl	8005a6c <I2C_RequestMemoryRead>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e1b0      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e184      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e164      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	e144      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800400c:	e138      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	2b03      	cmp	r3, #3
 8004014:	f200 80f1 	bhi.w	80041fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b01      	cmp	r3, #1
 800401e:	d123      	bne.n	8004068 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004022:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f001 fffb 	bl	8006020 <I2C_WaitOnRXNEFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e139      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004066:	e10b      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b02      	cmp	r3, #2
 800406e:	d14e      	bne.n	800410e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	2200      	movs	r2, #0
 8004078:	4906      	ldr	r1, [pc, #24]	@ (8004094 <HAL_I2C_Mem_Read+0x22c>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f001 fe86 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e10e      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
 800408a:	bf00      	nop
 800408c:	00100002 	.word	0x00100002
 8004090:	ffff0000 	.word	0xffff0000
 8004094:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800410c:	e0b8      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	2200      	movs	r2, #0
 8004116:	4966      	ldr	r1, [pc, #408]	@ (80042b0 <HAL_I2C_Mem_Read+0x448>)
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f001 fe37 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0bf      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	2200      	movs	r2, #0
 8004172:	494f      	ldr	r1, [pc, #316]	@ (80042b0 <HAL_I2C_Mem_Read+0x448>)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f001 fe09 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e091      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f8:	e042      	b.n	8004280 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f001 ff0e 	bl	8006020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e04c      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d118      	bne.n	8004280 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	f47f aec2 	bne.w	800400e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3728      	adds	r7, #40	@ 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00010004 	.word	0x00010004

080042b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d003      	beq.n	80042ec <HAL_I2C_EV_IRQHandler+0x38>
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	f040 80c1 	bne.w	800446e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_I2C_EV_IRQHandler+0x6e>
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800430c:	d003      	beq.n	8004316 <HAL_I2C_EV_IRQHandler+0x62>
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004314:	d101      	bne.n	800431a <HAL_I2C_EV_IRQHandler+0x66>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_I2C_EV_IRQHandler+0x68>
 800431a:	2300      	movs	r3, #0
 800431c:	2b01      	cmp	r3, #1
 800431e:	f000 8132 	beq.w	8004586 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x92>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	0a5b      	lsrs	r3, r3, #9
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f001 fef6 	bl	800612a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fd79 	bl	8004e36 <I2C_Master_SB>
 8004344:	e092      	b.n	800446c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_I2C_EV_IRQHandler+0xb2>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	0a5b      	lsrs	r3, r3, #9
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fdef 	bl	8004f42 <I2C_Master_ADD10>
 8004364:	e082      	b.n	800446c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0xd2>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	0a5b      	lsrs	r3, r3, #9
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fe09 	bl	8004f96 <I2C_Master_ADDR>
 8004384:	e072      	b.n	800446c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03b      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a0:	f000 80f3 	beq.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	09db      	lsrs	r3, r3, #7
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00f      	beq.n	80043d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d103      	bne.n	80043d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f9f3 	bl	80047b4 <I2C_MasterTransmit_TXE>
 80043ce:	e04d      	b.n	800446c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80d6 	beq.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	0a5b      	lsrs	r3, r3, #9
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80cf 	beq.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043ec:	7bbb      	ldrb	r3, [r7, #14]
 80043ee:	2b21      	cmp	r3, #33	@ 0x21
 80043f0:	d103      	bne.n	80043fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa7a 	bl	80048ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f8:	e0c7      	b.n	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	f040 80c4 	bne.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fae8 	bl	80049d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004408:	e0bf      	b.n	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004418:	f000 80b7 	beq.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00f      	beq.n	8004448 <HAL_I2C_EV_IRQHandler+0x194>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <HAL_I2C_EV_IRQHandler+0x194>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	089b      	lsrs	r3, r3, #2
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fb5d 	bl	8004b00 <I2C_MasterReceive_RXNE>
 8004446:	e011      	b.n	800446c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 809a 	beq.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	0a5b      	lsrs	r3, r3, #9
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8093 	beq.w	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fbfc 	bl	8004c62 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800446a:	e08e      	b.n	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
 800446c:	e08d      	b.n	800458a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d004      	beq.n	8004480 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e007      	b.n	8004490 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d012      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	0a5b      	lsrs	r3, r3, #9
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00c      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 ffba 	bl	8005434 <I2C_Slave_ADDR>
 80044c0:	e066      	b.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	0a5b      	lsrs	r3, r3, #9
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fff4 	bl	80054c8 <I2C_Slave_STOPF>
 80044e0:	e056      	b.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044e2:	7bbb      	ldrb	r3, [r7, #14]
 80044e4:	2b21      	cmp	r3, #33	@ 0x21
 80044e6:	d002      	beq.n	80044ee <HAL_I2C_EV_IRQHandler+0x23a>
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	2b29      	cmp	r3, #41	@ 0x29
 80044ec:	d125      	bne.n	800453a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00f      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x266>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	0a9b      	lsrs	r3, r3, #10
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x266>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fed0 	bl	80052b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004518:	e039      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d033      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x2da>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	0a5b      	lsrs	r3, r3, #9
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02d      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fefd 	bl	8005332 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004538:	e029      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00f      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	0a9b      	lsrs	r3, r3, #10
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 ff08 	bl	8005374 <I2C_SlaveReceive_RXNE>
 8004564:	e014      	b.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	0a5b      	lsrs	r3, r3, #9
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 ff36 	bl	80053f0 <I2C_SlaveReceive_BTF>
 8004584:	e004      	b.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800458e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b08a      	sub	sp, #40	@ 0x28
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_I2C_ER_IRQHandler+0x78>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800460c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	0a9b      	lsrs	r3, r3, #10
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03f      	beq.n	800469a <HAL_I2C_ER_IRQHandler+0x104>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d039      	beq.n	800469a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004626:	7efb      	ldrb	r3, [r7, #27]
 8004628:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004638:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004640:	7ebb      	ldrb	r3, [r7, #26]
 8004642:	2b20      	cmp	r3, #32
 8004644:	d112      	bne.n	800466c <HAL_I2C_ER_IRQHandler+0xd6>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_I2C_ER_IRQHandler+0xd6>
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b21      	cmp	r3, #33	@ 0x21
 8004650:	d008      	beq.n	8004664 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	2b29      	cmp	r3, #41	@ 0x29
 8004656:	d005      	beq.n	8004664 <HAL_I2C_ER_IRQHandler+0xce>
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b28      	cmp	r3, #40	@ 0x28
 800465c:	d106      	bne.n	800466c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b21      	cmp	r3, #33	@ 0x21
 8004662:	d103      	bne.n	800466c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 f85f 	bl	8005728 <I2C_Slave_AF>
 800466a:	e016      	b.n	800469a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004674:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800467e:	7efb      	ldrb	r3, [r7, #27]
 8004680:	2b10      	cmp	r3, #16
 8004682:	d002      	beq.n	800468a <HAL_I2C_ER_IRQHandler+0xf4>
 8004684:	7efb      	ldrb	r3, [r7, #27]
 8004686:	2b40      	cmp	r3, #64	@ 0x40
 8004688:	d107      	bne.n	800469a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004698:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	0adb      	lsrs	r3, r3, #11
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00e      	beq.n	80046c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	f043 0308 	orr.w	r3, r3, #8
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80046c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f001 f896 	bl	8005808 <I2C_ITError>
  }
}
 80046dc:	bf00      	nop
 80046de:	3728      	adds	r7, #40	@ 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
 8004740:	4613      	mov	r3, r2
 8004742:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d150      	bne.n	800487c <I2C_MasterTransmit_TXE+0xc8>
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b21      	cmp	r3, #33	@ 0x21
 80047de:	d14d      	bne.n	800487c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d01d      	beq.n	8004822 <I2C_MasterTransmit_TXE+0x6e>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d01a      	beq.n	8004822 <I2C_MasterTransmit_TXE+0x6e>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047f2:	d016      	beq.n	8004822 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004802:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2211      	movs	r2, #17
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ff62 	bl	80046e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004820:	e060      	b.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004830:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004840:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b40      	cmp	r3, #64	@ 0x40
 800485a:	d107      	bne.n	800486c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ff7d 	bl	8004764 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800486a:	e03b      	b.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff35 	bl	80046e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800487a:	e033      	b.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b21      	cmp	r3, #33	@ 0x21
 8004880:	d005      	beq.n	800488e <I2C_MasterTransmit_TXE+0xda>
 8004882:	7bbb      	ldrb	r3, [r7, #14]
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d12d      	bne.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b22      	cmp	r3, #34	@ 0x22
 800488c:	d12a      	bne.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80048a8:	e01c      	b.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b40      	cmp	r3, #64	@ 0x40
 80048b4:	d103      	bne.n	80048be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f88e 	bl	80049d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80048bc:	e012      	b.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048e2:	e7ff      	b.n	80048e4 <I2C_MasterTransmit_TXE+0x130>
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b21      	cmp	r3, #33	@ 0x21
 8004904:	d164      	bne.n	80049d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004934:	e04c      	b.n	80049d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d01d      	beq.n	8004978 <I2C_MasterTransmit_BTF+0x8c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b20      	cmp	r3, #32
 8004940:	d01a      	beq.n	8004978 <I2C_MasterTransmit_BTF+0x8c>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004948:	d016      	beq.n	8004978 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004958:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2211      	movs	r2, #17
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff feb7 	bl	80046e4 <HAL_I2C_MasterTxCpltCallback>
}
 8004976:	e02b      	b.n	80049d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004986:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004996:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d107      	bne.n	80049c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fed2 	bl	8004764 <HAL_I2C_MemTxCpltCallback>
}
 80049c0:	e006      	b.n	80049d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fe8a 	bl	80046e4 <HAL_I2C_MasterTxCpltCallback>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11d      	bne.n	8004a2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10b      	bne.n	8004a10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a0e:	e073      	b.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	121b      	asrs	r3, r3, #8
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a2a:	e065      	b.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10b      	bne.n	8004a4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a4a:	e055      	b.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d151      	bne.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b22      	cmp	r3, #34	@ 0x22
 8004a58:	d10d      	bne.n	8004a76 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a68:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a74:	e040      	b.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d015      	beq.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b21      	cmp	r3, #33	@ 0x21
 8004a84:	d112      	bne.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004aaa:	e025      	b.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d120      	bne.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b21      	cmp	r3, #33	@ 0x21
 8004aba:	d11d      	bne.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004aca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ada:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fe36 	bl	8004764 <HAL_I2C_MemTxCpltCallback>
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b22      	cmp	r3, #34	@ 0x22
 8004b12:	f040 80a2 	bne.w	8004c5a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d921      	bls.n	8004b68 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	f040 8082 	bne.w	8004c5a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b64:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004b66:	e078      	b.n	8004c5a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d074      	beq.n	8004c5a <I2C_MasterReceive_RXNE+0x15a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d002      	beq.n	8004b7c <I2C_MasterReceive_RXNE+0x7c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d16e      	bne.n	8004c5a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fa1d 	bl	8005fbc <I2C_WaitOnSTOPRequestThroughIT>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d142      	bne.n	8004c0e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b96:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ba6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b40      	cmp	r3, #64	@ 0x40
 8004be0:	d10a      	bne.n	8004bf8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fdc1 	bl	8004778 <HAL_I2C_MemRxCpltCallback>
}
 8004bf6:	e030      	b.n	8004c5a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2212      	movs	r2, #18
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fd76 	bl	80046f8 <HAL_I2C_MasterRxCpltCallback>
}
 8004c0c:	e025      	b.n	8004c5a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fd99 	bl	800478c <HAL_I2C_ErrorCallback>
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d11b      	bne.n	8004cb2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c88:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cb0:	e0bd      	b.n	8004e2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d129      	bne.n	8004d10 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00a      	beq.n	8004ce8 <I2C_MasterReceive_BTF+0x86>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d007      	beq.n	8004ce8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d0e:	e08e      	b.n	8004e2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d176      	bne.n	8004e08 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d002      	beq.n	8004d26 <I2C_MasterReceive_BTF+0xc4>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d108      	bne.n	8004d38 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e019      	b.n	8004d6c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d002      	beq.n	8004d44 <I2C_MasterReceive_BTF+0xe2>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d108      	bne.n	8004d56 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e00a      	b.n	8004d6c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d007      	beq.n	8004d6c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004dc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	d10a      	bne.n	8004df2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fcc4 	bl	8004778 <HAL_I2C_MemRxCpltCallback>
}
 8004df0:	e01d      	b.n	8004e2e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2212      	movs	r2, #18
 8004dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fc79 	bl	80046f8 <HAL_I2C_MasterRxCpltCallback>
}
 8004e06:	e012      	b.n	8004e2e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b40      	cmp	r3, #64	@ 0x40
 8004e48:	d117      	bne.n	8004e7a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e62:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e64:	e067      	b.n	8004f36 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
}
 8004e78:	e05d      	b.n	8004f36 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e82:	d133      	bne.n	8004eec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b21      	cmp	r3, #33	@ 0x21
 8004e8e:	d109      	bne.n	8004ea4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e008      	b.n	8004eb6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <I2C_Master_SB+0x92>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d032      	beq.n	8004f36 <I2C_Master_SB+0x100>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02d      	beq.n	8004f36 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee8:	605a      	str	r2, [r3, #4]
}
 8004eea:	e024      	b.n	8004f36 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10e      	bne.n	8004f12 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	11db      	asrs	r3, r3, #7
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 0306 	and.w	r3, r3, #6
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f063 030f 	orn	r3, r3, #15
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	611a      	str	r2, [r3, #16]
}
 8004f10:	e011      	b.n	8004f36 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10d      	bne.n	8004f36 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	11db      	asrs	r3, r3, #7
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0306 	and.w	r3, r3, #6
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f063 030e 	orn	r3, r3, #14
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	611a      	str	r2, [r3, #16]
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <I2C_Master_ADD10+0x26>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d108      	bne.n	8004f7a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <I2C_Master_ADD10+0x48>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f88:	605a      	str	r2, [r3, #4]
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b091      	sub	sp, #68	@ 0x44
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b22      	cmp	r3, #34	@ 0x22
 8004fbe:	f040 8169 	bne.w	8005294 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10f      	bne.n	8004fea <I2C_Master_ADDR+0x54>
 8004fca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004fce:	2b40      	cmp	r3, #64	@ 0x40
 8004fd0:	d10b      	bne.n	8004fea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	e160      	b.n	80052ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11d      	bne.n	800502e <I2C_Master_ADDR+0x98>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ffa:	d118      	bne.n	800502e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005020:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	651a      	str	r2, [r3, #80]	@ 0x50
 800502c:	e13e      	b.n	80052ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d113      	bne.n	8005060 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e115      	b.n	800528c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	f040 808a 	bne.w	8005180 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005072:	d137      	bne.n	80050e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005082:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800508e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005092:	d113      	bne.n	80050bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	e0e7      	b.n	800528c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050bc:	2300      	movs	r3, #0
 80050be:	623b      	str	r3, [r7, #32]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	623b      	str	r3, [r7, #32]
 80050d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e0d3      	b.n	800528c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d02e      	beq.n	8005148 <I2C_Master_ADDR+0x1b2>
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d02b      	beq.n	8005148 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	2b12      	cmp	r3, #18
 80050f4:	d102      	bne.n	80050fc <I2C_Master_ADDR+0x166>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d125      	bne.n	8005148 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d00e      	beq.n	8005120 <I2C_Master_ADDR+0x18a>
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	2b02      	cmp	r3, #2
 8005106:	d00b      	beq.n	8005120 <I2C_Master_ADDR+0x18a>
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	2b10      	cmp	r3, #16
 800510c:	d008      	beq.n	8005120 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e007      	b.n	8005130 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800512e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	e0a1      	b.n	800528c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005156:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e085      	b.n	800528c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d14d      	bne.n	8005226 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2b04      	cmp	r3, #4
 800518e:	d016      	beq.n	80051be <I2C_Master_ADDR+0x228>
 8005190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005192:	2b02      	cmp	r3, #2
 8005194:	d013      	beq.n	80051be <I2C_Master_ADDR+0x228>
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	2b10      	cmp	r3, #16
 800519a:	d010      	beq.n	80051be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e007      	b.n	80051ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051dc:	d117      	bne.n	800520e <I2C_Master_ADDR+0x278>
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051e4:	d00b      	beq.n	80051fe <I2C_Master_ADDR+0x268>
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d008      	beq.n	80051fe <I2C_Master_ADDR+0x268>
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d005      	beq.n	80051fe <I2C_Master_ADDR+0x268>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d002      	beq.n	80051fe <I2C_Master_ADDR+0x268>
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d107      	bne.n	800520e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800520c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	e032      	b.n	800528c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005234:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005244:	d117      	bne.n	8005276 <I2C_Master_ADDR+0x2e0>
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800524c:	d00b      	beq.n	8005266 <I2C_Master_ADDR+0x2d0>
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	2b01      	cmp	r3, #1
 8005252:	d008      	beq.n	8005266 <I2C_Master_ADDR+0x2d0>
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	2b08      	cmp	r3, #8
 8005258:	d005      	beq.n	8005266 <I2C_Master_ADDR+0x2d0>
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	2b10      	cmp	r3, #16
 800525e:	d002      	beq.n	8005266 <I2C_Master_ADDR+0x2d0>
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	2b20      	cmp	r3, #32
 8005264:	d107      	bne.n	8005276 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005274:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005292:	e00b      	b.n	80052ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	e7ff      	b.n	80052ac <I2C_Master_ADDR+0x316>
 80052ac:	bf00      	nop
 80052ae:	3744      	adds	r7, #68	@ 0x44
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02b      	beq.n	800532a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d114      	bne.n	800532a <I2C_SlaveTransmit_TXE+0x72>
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b29      	cmp	r3, #41	@ 0x29
 8005304:	d111      	bne.n	800532a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005314:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2221      	movs	r2, #33	@ 0x21
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2228      	movs	r2, #40	@ 0x28
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff f9f1 	bl	800470c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d011      	beq.n	8005368 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005382:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02c      	beq.n	80053e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d114      	bne.n	80053e8 <I2C_SlaveReceive_RXNE+0x74>
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c2:	d111      	bne.n	80053e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2222      	movs	r2, #34	@ 0x22
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2228      	movs	r2, #40	@ 0x28
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff f99c 	bl	8004720 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d012      	beq.n	8005428 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800544e:	2b28      	cmp	r3, #40	@ 0x28
 8005450:	d127      	bne.n	80054a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005460:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	09db      	lsrs	r3, r3, #7
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	81bb      	strh	r3, [r7, #12]
 8005484:	e002      	b.n	800548c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005494:	89ba      	ldrh	r2, [r7, #12]
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff f94a 	bl	8004734 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054a0:	e00e      	b.n	80054c0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005514:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005524:	d172      	bne.n	800560c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b22      	cmp	r3, #34	@ 0x22
 800552a:	d002      	beq.n	8005532 <I2C_Slave_STOPF+0x6a>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005530:	d135      	bne.n	800559e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	f043 0204 	orr.w	r2, r3, #4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005564:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe f8ca 	bl	8003704 <HAL_DMA_GetState>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d049      	beq.n	800560a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557a:	4a69      	ldr	r2, [pc, #420]	@ (8005720 <I2C_Slave_STOPF+0x258>)
 800557c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd ff12 	bl	80033ac <HAL_DMA_Abort_IT>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d03d      	beq.n	800560a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800559c:	e035      	b.n	800560a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe f894 	bl	8003704 <HAL_DMA_GetState>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d014      	beq.n	800560c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e6:	4a4e      	ldr	r2, [pc, #312]	@ (8005720 <I2C_Slave_STOPF+0x258>)
 80055e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fedc 	bl	80033ac <HAL_DMA_Abort_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
 8005608:	e000      	b.n	800560c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800560a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d03e      	beq.n	8005694 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d112      	bne.n	800564a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d112      	bne.n	800567e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	f043 0204 	orr.w	r2, r3, #4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8b3 	bl	8005808 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056a2:	e039      	b.n	8005718 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056a8:	d109      	bne.n	80056be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2228      	movs	r2, #40	@ 0x28
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff f831 	bl	8004720 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b28      	cmp	r3, #40	@ 0x28
 80056c8:	d111      	bne.n	80056ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a15      	ldr	r2, [pc, #84]	@ (8005724 <I2C_Slave_STOPF+0x25c>)
 80056ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff f832 	bl	8004750 <HAL_I2C_ListenCpltCallback>
}
 80056ec:	e014      	b.n	8005718 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	2b22      	cmp	r3, #34	@ 0x22
 80056f4:	d002      	beq.n	80056fc <I2C_Slave_STOPF+0x234>
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b22      	cmp	r3, #34	@ 0x22
 80056fa:	d10d      	bne.n	8005718 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff f804 	bl	8004720 <HAL_I2C_SlaveRxCpltCallback>
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	08005c3d 	.word	0x08005c3d
 8005724:	ffff0000 	.word	0xffff0000

08005728 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005736:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d002      	beq.n	800574a <I2C_Slave_AF+0x22>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b20      	cmp	r3, #32
 8005748:	d129      	bne.n	800579e <I2C_Slave_AF+0x76>
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b28      	cmp	r3, #40	@ 0x28
 800574e:	d126      	bne.n	800579e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a2c      	ldr	r2, [pc, #176]	@ (8005804 <I2C_Slave_AF+0xdc>)
 8005754:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005764:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800576e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800577e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fe ffda 	bl	8004750 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800579c:	e02e      	b.n	80057fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b21      	cmp	r3, #33	@ 0x21
 80057a2:	d126      	bne.n	80057f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <I2C_Slave_AF+0xdc>)
 80057a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2221      	movs	r2, #33	@ 0x21
 80057ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fe ff8e 	bl	800470c <HAL_I2C_SlaveTxCpltCallback>
}
 80057f0:	e004      	b.n	80057fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057fa:	615a      	str	r2, [r3, #20]
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	ffff0000 	.word	0xffff0000

08005808 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005816:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800581e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005820:	7bbb      	ldrb	r3, [r7, #14]
 8005822:	2b10      	cmp	r3, #16
 8005824:	d002      	beq.n	800582c <I2C_ITError+0x24>
 8005826:	7bbb      	ldrb	r3, [r7, #14]
 8005828:	2b40      	cmp	r3, #64	@ 0x40
 800582a:	d10a      	bne.n	8005842 <I2C_ITError+0x3a>
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b22      	cmp	r3, #34	@ 0x22
 8005830:	d107      	bne.n	8005842 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005840:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005848:	2b28      	cmp	r3, #40	@ 0x28
 800584a:	d107      	bne.n	800585c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2228      	movs	r2, #40	@ 0x28
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800585a:	e015      	b.n	8005888 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800586a:	d00a      	beq.n	8005882 <I2C_ITError+0x7a>
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b60      	cmp	r3, #96	@ 0x60
 8005870:	d007      	beq.n	8005882 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005896:	d162      	bne.n	800595e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d020      	beq.n	80058f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005a64 <I2C_ITError+0x25c>)
 80058bc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fd fd72 	bl	80033ac <HAL_DMA_Abort_IT>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8089 	beq.w	80059e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058f2:	4610      	mov	r0, r2
 80058f4:	4798      	blx	r3
 80058f6:	e074      	b.n	80059e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fc:	4a59      	ldr	r2, [pc, #356]	@ (8005a64 <I2C_ITError+0x25c>)
 80058fe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd fd51 	bl	80033ac <HAL_DMA_Abort_IT>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d068      	beq.n	80059e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b40      	cmp	r3, #64	@ 0x40
 800591c:	d10b      	bne.n	8005936 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	e041      	b.n	80059e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b60      	cmp	r3, #96	@ 0x60
 8005968:	d125      	bne.n	80059b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	d10b      	bne.n	800599e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fe fef6 	bl	80047a0 <HAL_I2C_AbortCpltCallback>
 80059b4:	e015      	b.n	80059e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b40      	cmp	r3, #64	@ 0x40
 80059c2:	d10b      	bne.n	80059dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fe fed5 	bl	800478c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10e      	bne.n	8005a10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d113      	bne.n	8005a5c <I2C_ITError+0x254>
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b28      	cmp	r3, #40	@ 0x28
 8005a38:	d110      	bne.n	8005a5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <I2C_ITError+0x260>)
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fe fe7a 	bl	8004750 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	08005c3d 	.word	0x08005c3d
 8005a68:	ffff0000 	.word	0xffff0000

08005a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	817b      	strh	r3, [r7, #10]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f96a 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005acc:	d103      	bne.n	8005ad6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e0aa      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	4952      	ldr	r1, [pc, #328]	@ (8005c38 <I2C_RequestMemoryRead+0x1cc>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f9a2 	bl	8005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e097      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	6a39      	ldr	r1, [r7, #32]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa0c 	bl	8005f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d107      	bne.n	8005b3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e076      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	611a      	str	r2, [r3, #16]
 8005b52:	e021      	b.n	8005b98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b54:	893b      	ldrh	r3, [r7, #8]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b64:	6a39      	ldr	r1, [r7, #32]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f9e6 	bl	8005f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00d      	beq.n	8005b8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d107      	bne.n	8005b8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e050      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8e:	893b      	ldrh	r3, [r7, #8]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9a:	6a39      	ldr	r1, [r7, #32]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f9cb 	bl	8005f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d107      	bne.n	8005bc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e035      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f8d3 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfa:	d103      	bne.n	8005c04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e013      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c08:	897b      	ldrh	r3, [r7, #10]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	4906      	ldr	r1, [pc, #24]	@ (8005c38 <I2C_RequestMemoryRead+0x1cc>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f90b 	bl	8005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00010002 	.word	0x00010002

08005c3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c56:	4b4b      	ldr	r3, [pc, #300]	@ (8005d84 <I2C_DMAAbort+0x148>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	08db      	lsrs	r3, r3, #3
 8005c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d88 <I2C_DMAAbort+0x14c>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	0a1a      	lsrs	r2, r3, #8
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00da      	lsls	r2, r3, #3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c82:	e00a      	b.n	8005c9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c98:	d0ea      	beq.n	8005c70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cdc:	2200      	movs	r2, #0
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	2200      	movs	r2, #0
 8005cee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b60      	cmp	r3, #96	@ 0x60
 8005d0a:	d10e      	bne.n	8005d2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f7fe fd3c 	bl	80047a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d28:	e027      	b.n	8005d7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d30:	2b28      	cmp	r3, #40	@ 0x28
 8005d32:	d117      	bne.n	8005d64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2228      	movs	r2, #40	@ 0x28
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d62:	e007      	b.n	8005d74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f7fe fd09 	bl	800478c <HAL_I2C_ErrorCallback>
}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000000 	.word	0x20000000
 8005d88:	14f8b589 	.word	0x14f8b589

08005d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d9c:	e025      	b.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d021      	beq.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fef9 	bl	8001b9c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d116      	bne.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e023      	b.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10d      	bne.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	43da      	mvns	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bf0c      	ite	eq
 8005e06:	2301      	moveq	r3, #1
 8005e08:	2300      	movne	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	e00c      	b.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	43da      	mvns	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d0b6      	beq.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e48:	e051      	b.n	8005eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e58:	d123      	bne.n	8005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f043 0204 	orr.w	r2, r3, #4
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e046      	b.n	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d021      	beq.n	8005eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fb fe77 	bl	8001b9c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d116      	bne.n	8005eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	f043 0220 	orr.w	r2, r3, #32
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e020      	b.n	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d10c      	bne.n	8005f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	43da      	mvns	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bf14      	ite	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	2300      	moveq	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	e00b      	b.n	8005f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	43da      	mvns	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d18d      	bne.n	8005e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f44:	e02d      	b.n	8005fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f8c0 	bl	80060cc <I2C_IsAcknowledgeFailed>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e02d      	b.n	8005fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d021      	beq.n	8005fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	f7fb fe1d 	bl	8001b9c <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d116      	bne.n	8005fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	f043 0220 	orr.w	r2, r3, #32
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e007      	b.n	8005fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fac:	2b80      	cmp	r3, #128	@ 0x80
 8005fae:	d1ca      	bne.n	8005f46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fc8:	4b13      	ldr	r3, [pc, #76]	@ (8006018 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	08db      	lsrs	r3, r3, #3
 8005fce:	4a13      	ldr	r2, [pc, #76]	@ (800601c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	0a1a      	lsrs	r2, r3, #8
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d107      	bne.n	8005ffa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e008      	b.n	800600c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006008:	d0e9      	beq.n	8005fde <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20000000 	.word	0x20000000
 800601c:	14f8b589 	.word	0x14f8b589

08006020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800602c:	e042      	b.n	80060b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d119      	bne.n	8006070 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0210 	mvn.w	r2, #16
 8006044:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e029      	b.n	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006070:	f7fb fd94 	bl	8001b9c <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	429a      	cmp	r2, r3
 800607e:	d302      	bcc.n	8006086 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d116      	bne.n	80060b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e007      	b.n	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d1b5      	bne.n	800602e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e2:	d11b      	bne.n	800611c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006108:	f043 0204 	orr.w	r2, r3, #4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800613a:	d103      	bne.n	8006144 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006142:	e007      	b.n	8006154 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800614c:	d102      	bne.n	8006154 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2208      	movs	r2, #8
 8006152:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0cc      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006174:	4b68      	ldr	r3, [pc, #416]	@ (8006318 <HAL_RCC_ClockConfig+0x1b8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d90c      	bls.n	800619c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006182:	4b65      	ldr	r3, [pc, #404]	@ (8006318 <HAL_RCC_ClockConfig+0x1b8>)
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800618a:	4b63      	ldr	r3, [pc, #396]	@ (8006318 <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d001      	beq.n	800619c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0b8      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d020      	beq.n	80061ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b4:	4b59      	ldr	r3, [pc, #356]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	4a58      	ldr	r2, [pc, #352]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061cc:	4b53      	ldr	r3, [pc, #332]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a52      	ldr	r2, [pc, #328]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d8:	4b50      	ldr	r3, [pc, #320]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	494d      	ldr	r1, [pc, #308]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d044      	beq.n	8006280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d107      	bne.n	800620e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fe:	4b47      	ldr	r3, [pc, #284]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d119      	bne.n	800623e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e07f      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d003      	beq.n	800621e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800621a:	2b03      	cmp	r3, #3
 800621c:	d107      	bne.n	800622e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621e:	4b3f      	ldr	r3, [pc, #252]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e06f      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622e:	4b3b      	ldr	r3, [pc, #236]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e067      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800623e:	4b37      	ldr	r3, [pc, #220]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f023 0203 	bic.w	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4934      	ldr	r1, [pc, #208]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 800624c:	4313      	orrs	r3, r2
 800624e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006250:	f7fb fca4 	bl	8001b9c <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006256:	e00a      	b.n	800626e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006258:	f7fb fca0 	bl	8001b9c <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e04f      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	4b2b      	ldr	r3, [pc, #172]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 020c 	and.w	r2, r3, #12
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	429a      	cmp	r2, r3
 800627e:	d1eb      	bne.n	8006258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006280:	4b25      	ldr	r3, [pc, #148]	@ (8006318 <HAL_RCC_ClockConfig+0x1b8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d20c      	bcs.n	80062a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628e:	4b22      	ldr	r3, [pc, #136]	@ (8006318 <HAL_RCC_ClockConfig+0x1b8>)
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	4b20      	ldr	r3, [pc, #128]	@ (8006318 <HAL_RCC_ClockConfig+0x1b8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d001      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e032      	b.n	800630e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b4:	4b19      	ldr	r3, [pc, #100]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	4916      	ldr	r1, [pc, #88]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062d2:	4b12      	ldr	r3, [pc, #72]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	490e      	ldr	r1, [pc, #56]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062e6:	f000 f821 	bl	800632c <HAL_RCC_GetSysClockFreq>
 80062ea:	4602      	mov	r2, r0
 80062ec:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	490a      	ldr	r1, [pc, #40]	@ (8006320 <HAL_RCC_ClockConfig+0x1c0>)
 80062f8:	5ccb      	ldrb	r3, [r1, r3]
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	4a09      	ldr	r2, [pc, #36]	@ (8006324 <HAL_RCC_ClockConfig+0x1c4>)
 8006300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <HAL_RCC_ClockConfig+0x1c8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7fb fc04 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40023c00 	.word	0x40023c00
 800631c:	40023800 	.word	0x40023800
 8006320:	0800b928 	.word	0x0800b928
 8006324:	20000000 	.word	0x20000000
 8006328:	20000004 	.word	0x20000004

0800632c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800632c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006330:	b090      	sub	sp, #64	@ 0x40
 8006332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800633c:	2300      	movs	r3, #0
 800633e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006344:	4b59      	ldr	r3, [pc, #356]	@ (80064ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 030c 	and.w	r3, r3, #12
 800634c:	2b08      	cmp	r3, #8
 800634e:	d00d      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x40>
 8006350:	2b08      	cmp	r3, #8
 8006352:	f200 80a1 	bhi.w	8006498 <HAL_RCC_GetSysClockFreq+0x16c>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x34>
 800635a:	2b04      	cmp	r3, #4
 800635c:	d003      	beq.n	8006366 <HAL_RCC_GetSysClockFreq+0x3a>
 800635e:	e09b      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006360:	4b53      	ldr	r3, [pc, #332]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006362:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006364:	e09b      	b.n	800649e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006366:	4b53      	ldr	r3, [pc, #332]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800636a:	e098      	b.n	800649e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800636c:	4b4f      	ldr	r3, [pc, #316]	@ (80064ac <HAL_RCC_GetSysClockFreq+0x180>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006376:	4b4d      	ldr	r3, [pc, #308]	@ (80064ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d028      	beq.n	80063d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006382:	4b4a      	ldr	r3, [pc, #296]	@ (80064ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	2200      	movs	r2, #0
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	627a      	str	r2, [r7, #36]	@ 0x24
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006394:	2100      	movs	r1, #0
 8006396:	4b47      	ldr	r3, [pc, #284]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006398:	fb03 f201 	mul.w	r2, r3, r1
 800639c:	2300      	movs	r3, #0
 800639e:	fb00 f303 	mul.w	r3, r0, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	4a43      	ldr	r2, [pc, #268]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80063a6:	fba0 1202 	umull	r1, r2, r0, r2
 80063aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ac:	460a      	mov	r2, r1
 80063ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063b2:	4413      	add	r3, r2
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b8:	2200      	movs	r2, #0
 80063ba:	61bb      	str	r3, [r7, #24]
 80063bc:	61fa      	str	r2, [r7, #28]
 80063be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063c6:	f7f9 ff2b 	bl	8000220 <__aeabi_uldivmod>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4613      	mov	r3, r2
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d2:	e053      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063d4:	4b35      	ldr	r3, [pc, #212]	@ (80064ac <HAL_RCC_GetSysClockFreq+0x180>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	099b      	lsrs	r3, r3, #6
 80063da:	2200      	movs	r2, #0
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	617a      	str	r2, [r7, #20]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063e6:	f04f 0b00 	mov.w	fp, #0
 80063ea:	4652      	mov	r2, sl
 80063ec:	465b      	mov	r3, fp
 80063ee:	f04f 0000 	mov.w	r0, #0
 80063f2:	f04f 0100 	mov.w	r1, #0
 80063f6:	0159      	lsls	r1, r3, #5
 80063f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063fc:	0150      	lsls	r0, r2, #5
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	ebb2 080a 	subs.w	r8, r2, sl
 8006406:	eb63 090b 	sbc.w	r9, r3, fp
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006416:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800641a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800641e:	ebb2 0408 	subs.w	r4, r2, r8
 8006422:	eb63 0509 	sbc.w	r5, r3, r9
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	00eb      	lsls	r3, r5, #3
 8006430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006434:	00e2      	lsls	r2, r4, #3
 8006436:	4614      	mov	r4, r2
 8006438:	461d      	mov	r5, r3
 800643a:	eb14 030a 	adds.w	r3, r4, sl
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	eb45 030b 	adc.w	r3, r5, fp
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006452:	4629      	mov	r1, r5
 8006454:	028b      	lsls	r3, r1, #10
 8006456:	4621      	mov	r1, r4
 8006458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800645c:	4621      	mov	r1, r4
 800645e:	028a      	lsls	r2, r1, #10
 8006460:	4610      	mov	r0, r2
 8006462:	4619      	mov	r1, r3
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	2200      	movs	r2, #0
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	60fa      	str	r2, [r7, #12]
 800646c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006470:	f7f9 fed6 	bl	8000220 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4613      	mov	r3, r2
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800647c:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <HAL_RCC_GetSysClockFreq+0x180>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	3301      	adds	r3, #1
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800648c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006496:	e002      	b.n	800649e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006498:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800649a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800649c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3740      	adds	r7, #64	@ 0x40
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064aa:	bf00      	nop
 80064ac:	40023800 	.word	0x40023800
 80064b0:	00f42400 	.word	0x00f42400
 80064b4:	017d7840 	.word	0x017d7840

080064b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064bc:	4b03      	ldr	r3, [pc, #12]	@ (80064cc <HAL_RCC_GetHCLKFreq+0x14>)
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000000 	.word	0x20000000

080064d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064d4:	f7ff fff0 	bl	80064b8 <HAL_RCC_GetHCLKFreq>
 80064d8:	4602      	mov	r2, r0
 80064da:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	0a9b      	lsrs	r3, r3, #10
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	4903      	ldr	r1, [pc, #12]	@ (80064f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e6:	5ccb      	ldrb	r3, [r1, r3]
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	0800b938 	.word	0x0800b938

080064f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064fc:	f7ff ffdc 	bl	80064b8 <HAL_RCC_GetHCLKFreq>
 8006500:	4602      	mov	r2, r0
 8006502:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	0b5b      	lsrs	r3, r3, #13
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	4903      	ldr	r1, [pc, #12]	@ (800651c <HAL_RCC_GetPCLK2Freq+0x24>)
 800650e:	5ccb      	ldrb	r3, [r1, r3]
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40023800 	.word	0x40023800
 800651c:	0800b938 	.word	0x0800b938

08006520 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e273      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d075      	beq.n	800662a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800653e:	4b88      	ldr	r3, [pc, #544]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b04      	cmp	r3, #4
 8006548:	d00c      	beq.n	8006564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800654a:	4b85      	ldr	r3, [pc, #532]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006552:	2b08      	cmp	r3, #8
 8006554:	d112      	bne.n	800657c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006556:	4b82      	ldr	r3, [pc, #520]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800655e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006562:	d10b      	bne.n	800657c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006564:	4b7e      	ldr	r3, [pc, #504]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d05b      	beq.n	8006628 <HAL_RCC_OscConfig+0x108>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d157      	bne.n	8006628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e24e      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006584:	d106      	bne.n	8006594 <HAL_RCC_OscConfig+0x74>
 8006586:	4b76      	ldr	r3, [pc, #472]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a75      	ldr	r2, [pc, #468]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 800658c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e01d      	b.n	80065d0 <HAL_RCC_OscConfig+0xb0>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800659c:	d10c      	bne.n	80065b8 <HAL_RCC_OscConfig+0x98>
 800659e:	4b70      	ldr	r3, [pc, #448]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a6f      	ldr	r2, [pc, #444]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e00b      	b.n	80065d0 <HAL_RCC_OscConfig+0xb0>
 80065b8:	4b69      	ldr	r3, [pc, #420]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a68      	ldr	r2, [pc, #416]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	4b66      	ldr	r3, [pc, #408]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a65      	ldr	r2, [pc, #404]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d013      	beq.n	8006600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fb fae0 	bl	8001b9c <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065e0:	f7fb fadc 	bl	8001b9c <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b64      	cmp	r3, #100	@ 0x64
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e213      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0xc0>
 80065fe:	e014      	b.n	800662a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006600:	f7fb facc 	bl	8001b9c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006608:	f7fb fac8 	bl	8001b9c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	@ 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e1ff      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800661a:	4b51      	ldr	r3, [pc, #324]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f0      	bne.n	8006608 <HAL_RCC_OscConfig+0xe8>
 8006626:	e000      	b.n	800662a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d063      	beq.n	80066fe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006636:	4b4a      	ldr	r3, [pc, #296]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 030c 	and.w	r3, r3, #12
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006642:	4b47      	ldr	r3, [pc, #284]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800664a:	2b08      	cmp	r3, #8
 800664c:	d11c      	bne.n	8006688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800664e:	4b44      	ldr	r3, [pc, #272]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d116      	bne.n	8006688 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800665a:	4b41      	ldr	r3, [pc, #260]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_RCC_OscConfig+0x152>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d001      	beq.n	8006672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e1d3      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006672:	4b3b      	ldr	r3, [pc, #236]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	4937      	ldr	r1, [pc, #220]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006686:	e03a      	b.n	80066fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d020      	beq.n	80066d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006690:	4b34      	ldr	r3, [pc, #208]	@ (8006764 <HAL_RCC_OscConfig+0x244>)
 8006692:	2201      	movs	r2, #1
 8006694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006696:	f7fb fa81 	bl	8001b9c <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669c:	e008      	b.n	80066b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800669e:	f7fb fa7d 	bl	8001b9c <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e1b4      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0f0      	beq.n	800669e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066bc:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4925      	ldr	r1, [pc, #148]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]
 80066d0:	e015      	b.n	80066fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066d2:	4b24      	ldr	r3, [pc, #144]	@ (8006764 <HAL_RCC_OscConfig+0x244>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fb fa60 	bl	8001b9c <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e0:	f7fb fa5c 	bl	8001b9c <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e193      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f0      	bne.n	80066e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d036      	beq.n	8006778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006712:	4b15      	ldr	r3, [pc, #84]	@ (8006768 <HAL_RCC_OscConfig+0x248>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006718:	f7fb fa40 	bl	8001b9c <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006720:	f7fb fa3c 	bl	8001b9c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e173      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <HAL_RCC_OscConfig+0x240>)
 8006734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x200>
 800673e:	e01b      	b.n	8006778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006740:	4b09      	ldr	r3, [pc, #36]	@ (8006768 <HAL_RCC_OscConfig+0x248>)
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006746:	f7fb fa29 	bl	8001b9c <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800674c:	e00e      	b.n	800676c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800674e:	f7fb fa25 	bl	8001b9c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d907      	bls.n	800676c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e15c      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
 8006760:	40023800 	.word	0x40023800
 8006764:	42470000 	.word	0x42470000
 8006768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800676c:	4b8a      	ldr	r3, [pc, #552]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800676e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1ea      	bne.n	800674e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8097 	beq.w	80068b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006786:	2300      	movs	r3, #0
 8006788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800678a:	4b83      	ldr	r3, [pc, #524]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10f      	bne.n	80067b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	4b7f      	ldr	r3, [pc, #508]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	4a7e      	ldr	r2, [pc, #504]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80067a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067a6:	4b7c      	ldr	r3, [pc, #496]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b6:	4b79      	ldr	r3, [pc, #484]	@ (800699c <HAL_RCC_OscConfig+0x47c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d118      	bne.n	80067f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067c2:	4b76      	ldr	r3, [pc, #472]	@ (800699c <HAL_RCC_OscConfig+0x47c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a75      	ldr	r2, [pc, #468]	@ (800699c <HAL_RCC_OscConfig+0x47c>)
 80067c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ce:	f7fb f9e5 	bl	8001b9c <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d6:	f7fb f9e1 	bl	8001b9c <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e118      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e8:	4b6c      	ldr	r3, [pc, #432]	@ (800699c <HAL_RCC_OscConfig+0x47c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f0      	beq.n	80067d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d106      	bne.n	800680a <HAL_RCC_OscConfig+0x2ea>
 80067fc:	4b66      	ldr	r3, [pc, #408]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80067fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006800:	4a65      	ldr	r2, [pc, #404]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	6713      	str	r3, [r2, #112]	@ 0x70
 8006808:	e01c      	b.n	8006844 <HAL_RCC_OscConfig+0x324>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b05      	cmp	r3, #5
 8006810:	d10c      	bne.n	800682c <HAL_RCC_OscConfig+0x30c>
 8006812:	4b61      	ldr	r3, [pc, #388]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	4a60      	ldr	r2, [pc, #384]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006818:	f043 0304 	orr.w	r3, r3, #4
 800681c:	6713      	str	r3, [r2, #112]	@ 0x70
 800681e:	4b5e      	ldr	r3, [pc, #376]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006822:	4a5d      	ldr	r2, [pc, #372]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006824:	f043 0301 	orr.w	r3, r3, #1
 8006828:	6713      	str	r3, [r2, #112]	@ 0x70
 800682a:	e00b      	b.n	8006844 <HAL_RCC_OscConfig+0x324>
 800682c:	4b5a      	ldr	r3, [pc, #360]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006830:	4a59      	ldr	r2, [pc, #356]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	6713      	str	r3, [r2, #112]	@ 0x70
 8006838:	4b57      	ldr	r3, [pc, #348]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683c:	4a56      	ldr	r2, [pc, #344]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800683e:	f023 0304 	bic.w	r3, r3, #4
 8006842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d015      	beq.n	8006878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684c:	f7fb f9a6 	bl	8001b9c <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006852:	e00a      	b.n	800686a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006854:	f7fb f9a2 	bl	8001b9c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e0d7      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800686a:	4b4b      	ldr	r3, [pc, #300]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ee      	beq.n	8006854 <HAL_RCC_OscConfig+0x334>
 8006876:	e014      	b.n	80068a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fb f990 	bl	8001b9c <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687e:	e00a      	b.n	8006896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006880:	f7fb f98c 	bl	8001b9c <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e0c1      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006896:	4b40      	ldr	r3, [pc, #256]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1ee      	bne.n	8006880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d105      	bne.n	80068b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	4a3a      	ldr	r2, [pc, #232]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80068ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80ad 	beq.w	8006a18 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068be:	4b36      	ldr	r3, [pc, #216]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 030c 	and.w	r3, r3, #12
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d060      	beq.n	800698c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d145      	bne.n	800695e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d2:	4b33      	ldr	r3, [pc, #204]	@ (80069a0 <HAL_RCC_OscConfig+0x480>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fb f960 	bl	8001b9c <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e0:	f7fb f95c 	bl	8001b9c <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e093      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f2:	4b29      	ldr	r3, [pc, #164]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	019b      	lsls	r3, r3, #6
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	3b01      	subs	r3, #1
 8006918:	041b      	lsls	r3, r3, #16
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	061b      	lsls	r3, r3, #24
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	071b      	lsls	r3, r3, #28
 800692a:	491b      	ldr	r1, [pc, #108]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 800692c:	4313      	orrs	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006930:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <HAL_RCC_OscConfig+0x480>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fb f931 	bl	8001b9c <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800693e:	f7fb f92d 	bl	8001b9c <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e064      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006950:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x41e>
 800695c:	e05c      	b.n	8006a18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <HAL_RCC_OscConfig+0x480>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fb f91a 	bl	8001b9c <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800696c:	f7fb f916 	bl	8001b9c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e04d      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <HAL_RCC_OscConfig+0x478>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x44c>
 800698a:	e045      	b.n	8006a18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e040      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
 8006998:	40023800 	.word	0x40023800
 800699c:	40007000 	.word	0x40007000
 80069a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a24 <HAL_RCC_OscConfig+0x504>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d030      	beq.n	8006a14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069bc:	429a      	cmp	r2, r3
 80069be:	d129      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d122      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069dc:	4293      	cmp	r3, r2
 80069de:	d119      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	3b01      	subs	r3, #1
 80069ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d10f      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d107      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40023800 	.word	0x40023800

08006a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e07b      	b.n	8006b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a4a:	d009      	beq.n	8006a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	61da      	str	r2, [r3, #28]
 8006a52:	e005      	b.n	8006a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa fbc4 	bl	8001208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae4:	ea42 0103 	orr.w	r1, r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	f003 0104 	and.w	r1, r3, #4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	f003 0210 	and.w	r2, r3, #16
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b088      	sub	sp, #32
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_SPI_Transmit+0x22>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e126      	b.n	8006daa <HAL_SPI_Transmit+0x270>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b64:	f7fb f81a 	bl	8001b9c <HAL_GetTick>
 8006b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d002      	beq.n	8006b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b7e:	e10b      	b.n	8006d98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_Transmit+0x52>
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b90:	e102      	b.n	8006d98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2203      	movs	r2, #3
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	88fa      	ldrh	r2, [r7, #6]
 8006bb0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd8:	d10f      	bne.n	8006bfa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c04:	2b40      	cmp	r3, #64	@ 0x40
 8006c06:	d007      	beq.n	8006c18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c20:	d14b      	bne.n	8006cba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_SPI_Transmit+0xf6>
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d13e      	bne.n	8006cae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c54:	e02b      	b.n	8006cae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d112      	bne.n	8006c8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c68:	881a      	ldrh	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	1c9a      	adds	r2, r3, #2
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c88:	e011      	b.n	8006cae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c8a:	f7fa ff87 	bl	8001b9c <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d803      	bhi.n	8006ca2 <HAL_SPI_Transmit+0x168>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d102      	bne.n	8006ca8 <HAL_SPI_Transmit+0x16e>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cac:	e074      	b.n	8006d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1ce      	bne.n	8006c56 <HAL_SPI_Transmit+0x11c>
 8006cb8:	e04c      	b.n	8006d54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_SPI_Transmit+0x18e>
 8006cc2:	8afb      	ldrh	r3, [r7, #22]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d140      	bne.n	8006d4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cee:	e02c      	b.n	8006d4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d113      	bne.n	8006d26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	7812      	ldrb	r2, [r2, #0]
 8006d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d24:	e011      	b.n	8006d4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d26:	f7fa ff39 	bl	8001b9c <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d803      	bhi.n	8006d3e <HAL_SPI_Transmit+0x204>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d102      	bne.n	8006d44 <HAL_SPI_Transmit+0x20a>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d48:	e026      	b.n	8006d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1cd      	bne.n	8006cf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fce9 	bl	8007730 <SPI_EndRxTxTransaction>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e000      	b.n	8006d98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b088      	sub	sp, #32
 8006db6:	af02      	add	r7, sp, #8
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	603b      	str	r3, [r7, #0]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dce:	d112      	bne.n	8006df6 <HAL_SPI_Receive+0x44>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10e      	bne.n	8006df6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4613      	mov	r3, r2
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f8f1 	bl	8006fd4 <HAL_SPI_TransmitReceive>
 8006df2:	4603      	mov	r3, r0
 8006df4:	e0ea      	b.n	8006fcc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_SPI_Receive+0x52>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e0e3      	b.n	8006fcc <HAL_SPI_Receive+0x21a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e0c:	f7fa fec6 	bl	8001b9c <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e22:	e0ca      	b.n	8006fba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_Receive+0x7e>
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e34:	e0c1      	b.n	8006fba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	88fa      	ldrh	r2, [r7, #6]
 8006e54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e7c:	d10f      	bne.n	8006e9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea8:	2b40      	cmp	r3, #64	@ 0x40
 8006eaa:	d007      	beq.n	8006ebc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d162      	bne.n	8006f8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ec4:	e02e      	b.n	8006f24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d115      	bne.n	8006f00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f103 020c 	add.w	r2, r3, #12
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006efe:	e011      	b.n	8006f24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f00:	f7fa fe4c 	bl	8001b9c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d803      	bhi.n	8006f18 <HAL_SPI_Receive+0x166>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d102      	bne.n	8006f1e <HAL_SPI_Receive+0x16c>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f22:	e04a      	b.n	8006fba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1cb      	bne.n	8006ec6 <HAL_SPI_Receive+0x114>
 8006f2e:	e031      	b.n	8006f94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d113      	bne.n	8006f66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	b292      	uxth	r2, r2
 8006f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	1c9a      	adds	r2, r3, #2
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f64:	e011      	b.n	8006f8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f66:	f7fa fe19 	bl	8001b9c <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d803      	bhi.n	8006f7e <HAL_SPI_Receive+0x1cc>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d102      	bne.n	8006f84 <HAL_SPI_Receive+0x1d2>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f88:	e017      	b.n	8006fba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1cd      	bne.n	8006f30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fb63 	bl	8007664 <SPI_EndRxTransaction>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]
 8006fb6:	e000      	b.n	8006fba <HAL_SPI_Receive+0x208>
  }

error :
 8006fb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08c      	sub	sp, #48	@ 0x30
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x26>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e18a      	b.n	8007310 <HAL_SPI_TransmitReceive+0x33c>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007002:	f7fa fdcb 	bl	8001b9c <HAL_GetTick>
 8007006:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007018:	887b      	ldrh	r3, [r7, #2]
 800701a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800701c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007020:	2b01      	cmp	r3, #1
 8007022:	d00f      	beq.n	8007044 <HAL_SPI_TransmitReceive+0x70>
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800702a:	d107      	bne.n	800703c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <HAL_SPI_TransmitReceive+0x68>
 8007034:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007038:	2b04      	cmp	r3, #4
 800703a:	d003      	beq.n	8007044 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800703c:	2302      	movs	r3, #2
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007042:	e15b      	b.n	80072fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x82>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x82>
 8007050:	887b      	ldrh	r3, [r7, #2]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800705c:	e14e      	b.n	80072fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b04      	cmp	r3, #4
 8007068:	d003      	beq.n	8007072 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2205      	movs	r2, #5
 800706e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	887a      	ldrh	r2, [r7, #2]
 8007082:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	887a      	ldrh	r2, [r7, #2]
 8007088:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	887a      	ldrh	r2, [r7, #2]
 8007094:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	887a      	ldrh	r2, [r7, #2]
 800709a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b2:	2b40      	cmp	r3, #64	@ 0x40
 80070b4:	d007      	beq.n	80070c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ce:	d178      	bne.n	80071c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_SPI_TransmitReceive+0x10a>
 80070d8:	8b7b      	ldrh	r3, [r7, #26]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d166      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007102:	e053      	b.n	80071ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d11b      	bne.n	800714a <HAL_SPI_TransmitReceive+0x176>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d016      	beq.n	800714a <HAL_SPI_TransmitReceive+0x176>
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d113      	bne.n	800714a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	881a      	ldrh	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007132:	1c9a      	adds	r2, r3, #2
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	d119      	bne.n	800718c <HAL_SPI_TransmitReceive+0x1b8>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d014      	beq.n	800718c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	b292      	uxth	r2, r2
 800716e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	1c9a      	adds	r2, r3, #2
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007188:	2301      	movs	r3, #1
 800718a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800718c:	f7fa fd06 	bl	8001b9c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007198:	429a      	cmp	r2, r3
 800719a:	d807      	bhi.n	80071ac <HAL_SPI_TransmitReceive+0x1d8>
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d003      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80071aa:	e0a7      	b.n	80072fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1a6      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x130>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1a1      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x130>
 80071c0:	e07c      	b.n	80072bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_SPI_TransmitReceive+0x1fc>
 80071ca:	8b7b      	ldrh	r3, [r7, #26]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d16b      	bne.n	80072a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071f6:	e057      	b.n	80072a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b02      	cmp	r3, #2
 8007204:	d11c      	bne.n	8007240 <HAL_SPI_TransmitReceive+0x26c>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d017      	beq.n	8007240 <HAL_SPI_TransmitReceive+0x26c>
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d114      	bne.n	8007240 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007232:	b29b      	uxth	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b01      	cmp	r3, #1
 800724c:	d119      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x2ae>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d014      	beq.n	8007282 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800727e:	2301      	movs	r3, #1
 8007280:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007282:	f7fa fc8b 	bl	8001b9c <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800728e:	429a      	cmp	r2, r3
 8007290:	d803      	bhi.n	800729a <HAL_SPI_TransmitReceive+0x2c6>
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d102      	bne.n	80072a0 <HAL_SPI_TransmitReceive+0x2cc>
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80072a6:	e029      	b.n	80072fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1a2      	bne.n	80071f8 <HAL_SPI_TransmitReceive+0x224>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d19d      	bne.n	80071f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fa35 	bl	8007730 <SPI_EndRxTxTransaction>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80072d8:	e010      	b.n	80072fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10b      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	e000      	b.n	80072fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80072fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800730c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007310:	4618      	mov	r0, r3
 8007312:	3730      	adds	r7, #48	@ 0x30
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	099b      	lsrs	r3, r3, #6
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10f      	bne.n	800735c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	099b      	lsrs	r3, r3, #6
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
    return;
 800735a:	e0d7      	b.n	800750c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_SPI_IRQHandler+0x66>
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	09db      	lsrs	r3, r3, #7
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
    return;
 800737c:	e0c6      	b.n	800750c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10c      	bne.n	80073a4 <HAL_SPI_IRQHandler+0x8c>
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	099b      	lsrs	r3, r3, #6
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80b4 	beq.w	800750c <HAL_SPI_IRQHandler+0x1f4>
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80ad 	beq.w	800750c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	099b      	lsrs	r3, r3, #6
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d023      	beq.n	8007406 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d011      	beq.n	80073ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ce:	f043 0204 	orr.w	r2, r3, #4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	e00b      	b.n	8007406 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	693b      	ldr	r3, [r7, #16]
        return;
 8007404:	e082      	b.n	800750c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d014      	beq.n	800743c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007416:	f043 0201 	orr.w	r2, r3, #1
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	0a1b      	lsrs	r3, r3, #8
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00c      	beq.n	8007462 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744c:	f043 0208 	orr.w	r2, r3, #8
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007454:	2300      	movs	r3, #0
 8007456:	60bb      	str	r3, [r7, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007466:	2b00      	cmp	r3, #0
 8007468:	d04f      	beq.n	800750a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007478:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_SPI_IRQHandler+0x17e>
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d034      	beq.n	8007500 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0203 	bic.w	r2, r2, #3
 80074a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d011      	beq.n	80074d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b2:	4a18      	ldr	r2, [pc, #96]	@ (8007514 <HAL_SPI_IRQHandler+0x1fc>)
 80074b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fb ff76 	bl	80033ac <HAL_DMA_Abort_IT>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d016      	beq.n	8007508 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074de:	4a0d      	ldr	r2, [pc, #52]	@ (8007514 <HAL_SPI_IRQHandler+0x1fc>)
 80074e0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fb ff60 	bl	80033ac <HAL_DMA_Abort_IT>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80074fe:	e003      	b.n	8007508 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f809 	bl	8007518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007506:	e000      	b.n	800750a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007508:	bf00      	nop
    return;
 800750a:	bf00      	nop
  }
}
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	0800752d 	.word	0x0800752d

08007518 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff ffe6 	bl	8007518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800754c:	bf00      	nop
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007564:	f7fa fb1a 	bl	8001b9c <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4413      	add	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007574:	f7fa fb12 	bl	8001b9c <HAL_GetTick>
 8007578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	015b      	lsls	r3, r3, #5
 8007580:	0d1b      	lsrs	r3, r3, #20
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800758a:	e054      	b.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d050      	beq.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007594:	f7fa fb02 	bl	8001b9c <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d902      	bls.n	80075aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d13d      	bne.n	8007626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c2:	d111      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075cc:	d004      	beq.n	80075d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d6:	d107      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f0:	d10f      	bne.n	8007612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e017      	b.n	8007656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3b01      	subs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d19b      	bne.n	800758c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000000 	.word	0x20000000

08007664 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007678:	d111      	bne.n	800769e <SPI_EndRxTransaction+0x3a>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007682:	d004      	beq.n	800768e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800768c:	d107      	bne.n	800769e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a6:	d12a      	bne.n	80076fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b0:	d012      	beq.n	80076d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	2180      	movs	r1, #128	@ 0x80
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff ff49 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d02d      	beq.n	8007724 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e026      	b.n	8007726 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	2101      	movs	r1, #1
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff ff36 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01a      	beq.n	8007724 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f2:	f043 0220 	orr.w	r2, r3, #32
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e013      	b.n	8007726 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2200      	movs	r2, #0
 8007706:	2101      	movs	r1, #1
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff ff23 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007718:	f043 0220 	orr.w	r2, r3, #32
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e000      	b.n	8007726 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800773c:	4b1b      	ldr	r3, [pc, #108]	@ (80077ac <SPI_EndRxTxTransaction+0x7c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1b      	ldr	r2, [pc, #108]	@ (80077b0 <SPI_EndRxTxTransaction+0x80>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	0d5b      	lsrs	r3, r3, #21
 8007748:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800775a:	d112      	bne.n	8007782 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	2180      	movs	r1, #128	@ 0x80
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff fef4 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d016      	beq.n	80077a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e00f      	b.n	80077a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	3b01      	subs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007798:	2b80      	cmp	r3, #128	@ 0x80
 800779a:	d0f2      	beq.n	8007782 <SPI_EndRxTxTransaction+0x52>
 800779c:	e000      	b.n	80077a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800779e:	bf00      	nop
  }

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000000 	.word	0x20000000
 80077b0:	165e9f81 	.word	0x165e9f81

080077b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e03f      	b.n	8007846 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7f9 fe8e 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2224      	movs	r2, #36	@ 0x24
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fd7b 	bl	80082f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800780c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695a      	ldr	r2, [r3, #20]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800781c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800782c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b08a      	sub	sp, #40	@ 0x28
 8007852:	af02      	add	r7, sp, #8
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	603b      	str	r3, [r7, #0]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b20      	cmp	r3, #32
 800786c:	d17c      	bne.n	8007968 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_UART_Transmit+0x2c>
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e075      	b.n	800796a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_UART_Transmit+0x3e>
 8007888:	2302      	movs	r3, #2
 800788a:	e06e      	b.n	800796a <HAL_UART_Transmit+0x11c>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2221      	movs	r2, #33	@ 0x21
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078a2:	f7fa f97b 	bl	8001b9c <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	88fa      	ldrh	r2, [r7, #6]
 80078b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078bc:	d108      	bne.n	80078d0 <HAL_UART_Transmit+0x82>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	e003      	b.n	80078d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80078e0:	e02a      	b.n	8007938 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2200      	movs	r2, #0
 80078ea:	2180      	movs	r1, #128	@ 0x80
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 faf9 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e036      	b.n	800796a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10b      	bne.n	800791a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007910:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	3302      	adds	r3, #2
 8007916:	61bb      	str	r3, [r7, #24]
 8007918:	e007      	b.n	800792a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	781a      	ldrb	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	3301      	adds	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1cf      	bne.n	80078e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2200      	movs	r2, #0
 800794a:	2140      	movs	r1, #64	@ 0x40
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fac9 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e006      	b.n	800796a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b0ba      	sub	sp, #232	@ 0xe8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <HAL_UART_IRQHandler+0x66>
 80079c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fbd3 	bl	800817e <UART_Receive_IT>
      return;
 80079d8:	e256      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80de 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x22c>
 80079e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80d1 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_UART_IRQHandler+0xae>
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1a:	f043 0201 	orr.w	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f003 0304 	and.w	r3, r3, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <HAL_UART_IRQHandler+0xd2>
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	f043 0202 	orr.w	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <HAL_UART_IRQHandler+0xf6>
 8007a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	f043 0204 	orr.w	r2, r3, #4
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d011      	beq.n	8007a9a <HAL_UART_IRQHandler+0x126>
 8007a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a92:	f043 0208 	orr.w	r2, r3, #8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 81ed 	beq.w	8007e7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d008      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x14e>
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fb5e 	bl	800817e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b40      	cmp	r3, #64	@ 0x40
 8007ace:	bf0c      	ite	eq
 8007ad0:	2301      	moveq	r3, #1
 8007ad2:	2300      	movne	r3, #0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <HAL_UART_IRQHandler+0x17a>
 8007ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d04f      	beq.n	8007b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa66 	bl	8007fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b40      	cmp	r3, #64	@ 0x40
 8007b00:	d141      	bne.n	8007b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3314      	adds	r3, #20
 8007b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1d9      	bne.n	8007b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d013      	beq.n	8007b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8007d50 <HAL_UART_IRQHandler+0x3dc>)
 8007b5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fb fc22 	bl	80033ac <HAL_DMA_Abort_IT>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d016      	beq.n	8007b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e00e      	b.n	8007b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f99a 	bl	8007eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	e00a      	b.n	8007b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f996 	bl	8007eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8c:	e006      	b.n	8007b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f992 	bl	8007eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007b9a:	e170      	b.n	8007e7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	bf00      	nop
    return;
 8007b9e:	e16e      	b.n	8007e7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	f040 814a 	bne.w	8007e3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8143 	beq.w	8007e3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 813c 	beq.w	8007e3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be6:	2b40      	cmp	r3, #64	@ 0x40
 8007be8:	f040 80b4 	bne.w	8007d54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8140 	beq.w	8007e82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	f080 8139 	bcs.w	8007e82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c22:	f000 8088 	beq.w	8007d36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1d9      	bne.n	8007c26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3314      	adds	r3, #20
 8007c78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3314      	adds	r3, #20
 8007c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e1      	bne.n	8007c72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3314      	adds	r3, #20
 8007cb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e3      	bne.n	8007cae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d06:	f023 0310 	bic.w	r3, r3, #16
 8007d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e3      	bne.n	8007cf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fb facb 	bl	80032cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f8c0 	bl	8007ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d4c:	e099      	b.n	8007e82 <HAL_UART_IRQHandler+0x50e>
 8007d4e:	bf00      	nop
 8007d50:	08008087 	.word	0x08008087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 808b 	beq.w	8007e86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8086 	beq.w	8007e86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	330c      	adds	r3, #12
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007da0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e3      	bne.n	8007d7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e1c:	61fa      	str	r2, [r7, #28]
 8007e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	69b9      	ldr	r1, [r7, #24]
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e3      	bne.n	8007df8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f848 	bl	8007ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e3c:	e023      	b.n	8007e86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <HAL_UART_IRQHandler+0x4ea>
 8007e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f929 	bl	80080ae <UART_Transmit_IT>
    return;
 8007e5c:	e014      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00e      	beq.n	8007e88 <HAL_UART_IRQHandler+0x514>
 8007e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f969 	bl	800814e <UART_EndTransmit_IT>
    return;
 8007e7c:	e004      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
    return;
 8007e7e:	bf00      	nop
 8007e80:	e002      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
      return;
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <HAL_UART_IRQHandler+0x514>
      return;
 8007e86:	bf00      	nop
  }
}
 8007e88:	37e8      	adds	r7, #232	@ 0xe8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop

08007e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b090      	sub	sp, #64	@ 0x40
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef4:	e050      	b.n	8007f98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d04c      	beq.n	8007f98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f04:	f7f9 fe4a 	bl	8001b9c <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d241      	bcs.n	8007f98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f34:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	613b      	str	r3, [r7, #16]
   return(result);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f68:	623a      	str	r2, [r7, #32]
 8007f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e00f      	b.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2301      	moveq	r3, #1
 8007faa:	2300      	movne	r3, #0
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d09f      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3740      	adds	r7, #64	@ 0x40
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b095      	sub	sp, #84	@ 0x54
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fe8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3314      	adds	r3, #20
 8008002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	61fb      	str	r3, [r7, #28]
   return(result);
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	2b01      	cmp	r3, #1
 8008036:	d119      	bne.n	800806c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	60bb      	str	r3, [r7, #8]
   return(result);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f023 0310 	bic.w	r3, r3, #16
 800804e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008058:	61ba      	str	r2, [r7, #24]
 800805a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6979      	ldr	r1, [r7, #20]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	613b      	str	r3, [r7, #16]
   return(result);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800807a:	bf00      	nop
 800807c:	3754      	adds	r7, #84	@ 0x54
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ff09 	bl	8007eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b21      	cmp	r3, #33	@ 0x21
 80080c0:	d13e      	bne.n	8008140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ca:	d114      	bne.n	80080f6 <UART_Transmit_IT+0x48>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d110      	bne.n	80080f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	621a      	str	r2, [r3, #32]
 80080f4:	e008      	b.n	8008108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	1c59      	adds	r1, r3, #1
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6211      	str	r1, [r2, #32]
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4619      	mov	r1, r3
 8008116:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10f      	bne.n	800813c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800812a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800813a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	e000      	b.n	8008142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008140:	2302      	movs	r3, #2
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008164:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fe8e 	bl	8007e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b08c      	sub	sp, #48	@ 0x30
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b22      	cmp	r3, #34	@ 0x22
 8008190:	f040 80ab 	bne.w	80082ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800819c:	d117      	bne.n	80081ce <UART_Receive_IT+0x50>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d113      	bne.n	80081ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	1c9a      	adds	r2, r3, #2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80081cc:	e026      	b.n	800821c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	d007      	beq.n	80081f2 <UART_Receive_IT+0x74>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <UART_Receive_IT+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e008      	b.n	8008212 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820c:	b2da      	uxtb	r2, r3
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	4619      	mov	r1, r3
 800822a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800822c:	2b00      	cmp	r3, #0
 800822e:	d15a      	bne.n	80082e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0220 	bic.w	r2, r2, #32
 800823e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800824e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	2b01      	cmp	r3, #1
 800826e:	d135      	bne.n	80082dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	330c      	adds	r3, #12
 800827c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	613b      	str	r3, [r7, #16]
   return(result);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f023 0310 	bic.w	r3, r3, #16
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	330c      	adds	r3, #12
 8008294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008296:	623a      	str	r2, [r7, #32]
 8008298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	6a3a      	ldr	r2, [r7, #32]
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d10a      	bne.n	80082ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fdf9 	bl	8007ecc <HAL_UARTEx_RxEventCallback>
 80082da:	e002      	b.n	80082e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff fde1 	bl	8007ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e002      	b.n	80082ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	e000      	b.n	80082ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082ea:	2302      	movs	r3, #2
  }
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3730      	adds	r7, #48	@ 0x30
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082f8:	b0c0      	sub	sp, #256	@ 0x100
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008310:	68d9      	ldr	r1, [r3, #12]
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	ea40 0301 	orr.w	r3, r0, r1
 800831c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800831e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	431a      	orrs	r2, r3
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	431a      	orrs	r2, r3
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800834c:	f021 010c 	bic.w	r1, r1, #12
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800835a:	430b      	orrs	r3, r1
 800835c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800835e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836e:	6999      	ldr	r1, [r3, #24]
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	ea40 0301 	orr.w	r3, r0, r1
 800837a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b95      	ldr	r3, [pc, #596]	@ (80085d8 <UART_SetConfig+0x2e4>)
 8008384:	429a      	cmp	r2, r3
 8008386:	d011      	beq.n	80083ac <UART_SetConfig+0xb8>
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	4b93      	ldr	r3, [pc, #588]	@ (80085dc <UART_SetConfig+0x2e8>)
 8008390:	429a      	cmp	r2, r3
 8008392:	d00b      	beq.n	80083ac <UART_SetConfig+0xb8>
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b91      	ldr	r3, [pc, #580]	@ (80085e0 <UART_SetConfig+0x2ec>)
 800839c:	429a      	cmp	r2, r3
 800839e:	d005      	beq.n	80083ac <UART_SetConfig+0xb8>
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b8f      	ldr	r3, [pc, #572]	@ (80085e4 <UART_SetConfig+0x2f0>)
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d104      	bne.n	80083b6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fe f8a4 	bl	80064f8 <HAL_RCC_GetPCLK2Freq>
 80083b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083b4:	e003      	b.n	80083be <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083b6:	f7fe f88b 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 80083ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c8:	f040 8110 	bne.w	80085ec <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083de:	4622      	mov	r2, r4
 80083e0:	462b      	mov	r3, r5
 80083e2:	1891      	adds	r1, r2, r2
 80083e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083e6:	415b      	adcs	r3, r3
 80083e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083ee:	4621      	mov	r1, r4
 80083f0:	eb12 0801 	adds.w	r8, r2, r1
 80083f4:	4629      	mov	r1, r5
 80083f6:	eb43 0901 	adc.w	r9, r3, r1
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800840a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800840e:	4690      	mov	r8, r2
 8008410:	4699      	mov	r9, r3
 8008412:	4623      	mov	r3, r4
 8008414:	eb18 0303 	adds.w	r3, r8, r3
 8008418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800841c:	462b      	mov	r3, r5
 800841e:	eb49 0303 	adc.w	r3, r9, r3
 8008422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008432:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800843a:	460b      	mov	r3, r1
 800843c:	18db      	adds	r3, r3, r3
 800843e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008440:	4613      	mov	r3, r2
 8008442:	eb42 0303 	adc.w	r3, r2, r3
 8008446:	657b      	str	r3, [r7, #84]	@ 0x54
 8008448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800844c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008450:	f7f7 fee6 	bl	8000220 <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4b63      	ldr	r3, [pc, #396]	@ (80085e8 <UART_SetConfig+0x2f4>)
 800845a:	fba3 2302 	umull	r2, r3, r3, r2
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	011c      	lsls	r4, r3, #4
 8008462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008466:	2200      	movs	r2, #0
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800846c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	1891      	adds	r1, r2, r2
 800847a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800847c:	415b      	adcs	r3, r3
 800847e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008484:	4641      	mov	r1, r8
 8008486:	eb12 0a01 	adds.w	sl, r2, r1
 800848a:	4649      	mov	r1, r9
 800848c:	eb43 0b01 	adc.w	fp, r3, r1
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800849c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084a4:	4692      	mov	sl, r2
 80084a6:	469b      	mov	fp, r3
 80084a8:	4643      	mov	r3, r8
 80084aa:	eb1a 0303 	adds.w	r3, sl, r3
 80084ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084b2:	464b      	mov	r3, r9
 80084b4:	eb4b 0303 	adc.w	r3, fp, r3
 80084b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084d0:	460b      	mov	r3, r1
 80084d2:	18db      	adds	r3, r3, r3
 80084d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084d6:	4613      	mov	r3, r2
 80084d8:	eb42 0303 	adc.w	r3, r2, r3
 80084dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084e6:	f7f7 fe9b 	bl	8000220 <__aeabi_uldivmod>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	4b3d      	ldr	r3, [pc, #244]	@ (80085e8 <UART_SetConfig+0x2f4>)
 80084f2:	fba3 2301 	umull	r2, r3, r3, r1
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	2264      	movs	r2, #100	@ 0x64
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	1acb      	subs	r3, r1, r3
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008506:	4b38      	ldr	r3, [pc, #224]	@ (80085e8 <UART_SetConfig+0x2f4>)
 8008508:	fba3 2302 	umull	r2, r3, r3, r2
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008514:	441c      	add	r4, r3
 8008516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800851a:	2200      	movs	r2, #0
 800851c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008520:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	1891      	adds	r1, r2, r2
 800852e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008530:	415b      	adcs	r3, r3
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008538:	4641      	mov	r1, r8
 800853a:	1851      	adds	r1, r2, r1
 800853c:	6339      	str	r1, [r7, #48]	@ 0x30
 800853e:	4649      	mov	r1, r9
 8008540:	414b      	adcs	r3, r1
 8008542:	637b      	str	r3, [r7, #52]	@ 0x34
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008550:	4659      	mov	r1, fp
 8008552:	00cb      	lsls	r3, r1, #3
 8008554:	4651      	mov	r1, sl
 8008556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855a:	4651      	mov	r1, sl
 800855c:	00ca      	lsls	r2, r1, #3
 800855e:	4610      	mov	r0, r2
 8008560:	4619      	mov	r1, r3
 8008562:	4603      	mov	r3, r0
 8008564:	4642      	mov	r2, r8
 8008566:	189b      	adds	r3, r3, r2
 8008568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800856c:	464b      	mov	r3, r9
 800856e:	460a      	mov	r2, r1
 8008570:	eb42 0303 	adc.w	r3, r2, r3
 8008574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008584:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800858c:	460b      	mov	r3, r1
 800858e:	18db      	adds	r3, r3, r3
 8008590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008592:	4613      	mov	r3, r2
 8008594:	eb42 0303 	adc.w	r3, r2, r3
 8008598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800859a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800859e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085a2:	f7f7 fe3d 	bl	8000220 <__aeabi_uldivmod>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4b0f      	ldr	r3, [pc, #60]	@ (80085e8 <UART_SetConfig+0x2f4>)
 80085ac:	fba3 1302 	umull	r1, r3, r3, r2
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	2164      	movs	r1, #100	@ 0x64
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	3332      	adds	r3, #50	@ 0x32
 80085be:	4a0a      	ldr	r2, [pc, #40]	@ (80085e8 <UART_SetConfig+0x2f4>)
 80085c0:	fba2 2303 	umull	r2, r3, r2, r3
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	f003 0207 	and.w	r2, r3, #7
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4422      	add	r2, r4
 80085d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085d4:	e10a      	b.n	80087ec <UART_SetConfig+0x4f8>
 80085d6:	bf00      	nop
 80085d8:	40011000 	.word	0x40011000
 80085dc:	40011400 	.word	0x40011400
 80085e0:	40011800 	.word	0x40011800
 80085e4:	40011c00 	.word	0x40011c00
 80085e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085fe:	4642      	mov	r2, r8
 8008600:	464b      	mov	r3, r9
 8008602:	1891      	adds	r1, r2, r2
 8008604:	6239      	str	r1, [r7, #32]
 8008606:	415b      	adcs	r3, r3
 8008608:	627b      	str	r3, [r7, #36]	@ 0x24
 800860a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800860e:	4641      	mov	r1, r8
 8008610:	1854      	adds	r4, r2, r1
 8008612:	4649      	mov	r1, r9
 8008614:	eb43 0501 	adc.w	r5, r3, r1
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	00eb      	lsls	r3, r5, #3
 8008622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008626:	00e2      	lsls	r2, r4, #3
 8008628:	4614      	mov	r4, r2
 800862a:	461d      	mov	r5, r3
 800862c:	4643      	mov	r3, r8
 800862e:	18e3      	adds	r3, r4, r3
 8008630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008634:	464b      	mov	r3, r9
 8008636:	eb45 0303 	adc.w	r3, r5, r3
 800863a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800864a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800865a:	4629      	mov	r1, r5
 800865c:	008b      	lsls	r3, r1, #2
 800865e:	4621      	mov	r1, r4
 8008660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008664:	4621      	mov	r1, r4
 8008666:	008a      	lsls	r2, r1, #2
 8008668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800866c:	f7f7 fdd8 	bl	8000220 <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4b60      	ldr	r3, [pc, #384]	@ (80087f8 <UART_SetConfig+0x504>)
 8008676:	fba3 2302 	umull	r2, r3, r3, r2
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	011c      	lsls	r4, r3, #4
 800867e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800868c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008690:	4642      	mov	r2, r8
 8008692:	464b      	mov	r3, r9
 8008694:	1891      	adds	r1, r2, r2
 8008696:	61b9      	str	r1, [r7, #24]
 8008698:	415b      	adcs	r3, r3
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086a0:	4641      	mov	r1, r8
 80086a2:	1851      	adds	r1, r2, r1
 80086a4:	6139      	str	r1, [r7, #16]
 80086a6:	4649      	mov	r1, r9
 80086a8:	414b      	adcs	r3, r1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b8:	4659      	mov	r1, fp
 80086ba:	00cb      	lsls	r3, r1, #3
 80086bc:	4651      	mov	r1, sl
 80086be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c2:	4651      	mov	r1, sl
 80086c4:	00ca      	lsls	r2, r1, #3
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	4642      	mov	r2, r8
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086d4:	464b      	mov	r3, r9
 80086d6:	460a      	mov	r2, r1
 80086d8:	eb42 0303 	adc.w	r3, r2, r3
 80086dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086f8:	4649      	mov	r1, r9
 80086fa:	008b      	lsls	r3, r1, #2
 80086fc:	4641      	mov	r1, r8
 80086fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008702:	4641      	mov	r1, r8
 8008704:	008a      	lsls	r2, r1, #2
 8008706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800870a:	f7f7 fd89 	bl	8000220 <__aeabi_uldivmod>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4611      	mov	r1, r2
 8008714:	4b38      	ldr	r3, [pc, #224]	@ (80087f8 <UART_SetConfig+0x504>)
 8008716:	fba3 2301 	umull	r2, r3, r3, r1
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	2264      	movs	r2, #100	@ 0x64
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	1acb      	subs	r3, r1, r3
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	3332      	adds	r3, #50	@ 0x32
 8008728:	4a33      	ldr	r2, [pc, #204]	@ (80087f8 <UART_SetConfig+0x504>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008734:	441c      	add	r4, r3
 8008736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800873a:	2200      	movs	r2, #0
 800873c:	673b      	str	r3, [r7, #112]	@ 0x70
 800873e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	1891      	adds	r1, r2, r2
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	415b      	adcs	r3, r3
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008754:	4641      	mov	r1, r8
 8008756:	1851      	adds	r1, r2, r1
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	4649      	mov	r1, r9
 800875c:	414b      	adcs	r3, r1
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800876c:	4659      	mov	r1, fp
 800876e:	00cb      	lsls	r3, r1, #3
 8008770:	4651      	mov	r1, sl
 8008772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008776:	4651      	mov	r1, sl
 8008778:	00ca      	lsls	r2, r1, #3
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	4603      	mov	r3, r0
 8008780:	4642      	mov	r2, r8
 8008782:	189b      	adds	r3, r3, r2
 8008784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008786:	464b      	mov	r3, r9
 8008788:	460a      	mov	r2, r1
 800878a:	eb42 0303 	adc.w	r3, r2, r3
 800878e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	663b      	str	r3, [r7, #96]	@ 0x60
 800879a:	667a      	str	r2, [r7, #100]	@ 0x64
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087a8:	4649      	mov	r1, r9
 80087aa:	008b      	lsls	r3, r1, #2
 80087ac:	4641      	mov	r1, r8
 80087ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b2:	4641      	mov	r1, r8
 80087b4:	008a      	lsls	r2, r1, #2
 80087b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087ba:	f7f7 fd31 	bl	8000220 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <UART_SetConfig+0x504>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	@ 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	3332      	adds	r3, #50	@ 0x32
 80087d6:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <UART_SetConfig+0x504>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 020f 	and.w	r2, r3, #15
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4422      	add	r2, r4
 80087ea:	609a      	str	r2, [r3, #8]
}
 80087ec:	bf00      	nop
 80087ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087f2:	46bd      	mov	sp, r7
 80087f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f8:	51eb851f 	.word	0x51eb851f

080087fc <__NVIC_SetPriority>:
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800880c:	2b00      	cmp	r3, #0
 800880e:	db0a      	blt.n	8008826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	b2da      	uxtb	r2, r3
 8008814:	490c      	ldr	r1, [pc, #48]	@ (8008848 <__NVIC_SetPriority+0x4c>)
 8008816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800881a:	0112      	lsls	r2, r2, #4
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	440b      	add	r3, r1
 8008820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008824:	e00a      	b.n	800883c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	b2da      	uxtb	r2, r3
 800882a:	4908      	ldr	r1, [pc, #32]	@ (800884c <__NVIC_SetPriority+0x50>)
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	3b04      	subs	r3, #4
 8008834:	0112      	lsls	r2, r2, #4
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	440b      	add	r3, r1
 800883a:	761a      	strb	r2, [r3, #24]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	e000e100 	.word	0xe000e100
 800884c:	e000ed00 	.word	0xe000ed00

08008850 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008854:	2100      	movs	r1, #0
 8008856:	f06f 0004 	mvn.w	r0, #4
 800885a:	f7ff ffcf 	bl	80087fc <__NVIC_SetPriority>
#endif
}
 800885e:	bf00      	nop
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800886a:	f3ef 8305 	mrs	r3, IPSR
 800886e:	603b      	str	r3, [r7, #0]
  return(result);
 8008870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008876:	f06f 0305 	mvn.w	r3, #5
 800887a:	607b      	str	r3, [r7, #4]
 800887c:	e00c      	b.n	8008898 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800887e:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <osKernelInitialize+0x44>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008886:	4b08      	ldr	r3, [pc, #32]	@ (80088a8 <osKernelInitialize+0x44>)
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800888c:	2300      	movs	r3, #0
 800888e:	607b      	str	r3, [r7, #4]
 8008890:	e002      	b.n	8008898 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008892:	f04f 33ff 	mov.w	r3, #4294967295
 8008896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008898:	687b      	ldr	r3, [r7, #4]
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000550 	.word	0x20000550

080088ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b2:	f3ef 8305 	mrs	r3, IPSR
 80088b6:	603b      	str	r3, [r7, #0]
  return(result);
 80088b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80088be:	f06f 0305 	mvn.w	r3, #5
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e010      	b.n	80088e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <osKernelStart+0x48>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d109      	bne.n	80088e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088ce:	f7ff ffbf 	bl	8008850 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088d2:	4b08      	ldr	r3, [pc, #32]	@ (80088f4 <osKernelStart+0x48>)
 80088d4:	2202      	movs	r2, #2
 80088d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088d8:	f001 fada 	bl	8009e90 <vTaskStartScheduler>
      stat = osOK;
 80088dc:	2300      	movs	r3, #0
 80088de:	607b      	str	r3, [r7, #4]
 80088e0:	e002      	b.n	80088e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80088e2:	f04f 33ff 	mov.w	r3, #4294967295
 80088e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088e8:	687b      	ldr	r3, [r7, #4]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000550 	.word	0x20000550

080088f8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088fe:	f3ef 8305 	mrs	r3, IPSR
 8008902:	603b      	str	r3, [r7, #0]
  return(result);
 8008904:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800890a:	f001 fbe5 	bl	800a0d8 <xTaskGetTickCountFromISR>
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	e002      	b.n	8008918 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008912:	f001 fbd1 	bl	800a0b8 <xTaskGetTickCount>
 8008916:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008918:	687b      	ldr	r3, [r7, #4]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008922:	b580      	push	{r7, lr}
 8008924:	b08e      	sub	sp, #56	@ 0x38
 8008926:	af04      	add	r7, sp, #16
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008932:	f3ef 8305 	mrs	r3, IPSR
 8008936:	617b      	str	r3, [r7, #20]
  return(result);
 8008938:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800893a:	2b00      	cmp	r3, #0
 800893c:	d17e      	bne.n	8008a3c <osThreadNew+0x11a>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d07b      	beq.n	8008a3c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008944:	2380      	movs	r3, #128	@ 0x80
 8008946:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008948:	2318      	movs	r3, #24
 800894a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008950:	f04f 33ff 	mov.w	r3, #4294967295
 8008954:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d045      	beq.n	80089e8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <osThreadNew+0x48>
        name = attr->name;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <osThreadNew+0x6e>
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2b38      	cmp	r3, #56	@ 0x38
 8008982:	d805      	bhi.n	8008990 <osThreadNew+0x6e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <osThreadNew+0x72>
        return (NULL);
 8008990:	2300      	movs	r3, #0
 8008992:	e054      	b.n	8008a3e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	089b      	lsrs	r3, r3, #2
 80089a2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <osThreadNew+0xa8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b5b      	cmp	r3, #91	@ 0x5b
 80089b2:	d90a      	bls.n	80089ca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <osThreadNew+0xa8>
        mem = 1;
 80089c4:	2301      	movs	r3, #1
 80089c6:	61bb      	str	r3, [r7, #24]
 80089c8:	e010      	b.n	80089ec <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10c      	bne.n	80089ec <osThreadNew+0xca>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d108      	bne.n	80089ec <osThreadNew+0xca>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d104      	bne.n	80089ec <osThreadNew+0xca>
          mem = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	e001      	b.n	80089ec <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d110      	bne.n	8008a14 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089fa:	9202      	str	r2, [sp, #8]
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f001 f81b 	bl	8009a44 <xTaskCreateStatic>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	e013      	b.n	8008a3c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d110      	bne.n	8008a3c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	f107 0310 	add.w	r3, r7, #16
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f001 f869 	bl	8009b04 <xTaskCreate>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d001      	beq.n	8008a3c <osThreadNew+0x11a>
            hTask = NULL;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a3c:	693b      	ldr	r3, [r7, #16]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3728      	adds	r7, #40	@ 0x28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b086      	sub	sp, #24
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a4e:	f3ef 8305 	mrs	r3, IPSR
 8008a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a54:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008a5a:	f06f 0305 	mvn.w	r3, #5
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e019      	b.n	8008a96 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008a66:	f001 fb27 	bl	800a0b8 <xTaskGetTickCount>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <osDelayUntil+0x4a>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	db06      	blt.n	8008a90 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008a82:	f107 0308 	add.w	r3, r7, #8
 8008a86:	6939      	ldr	r1, [r7, #16]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 f981 	bl	8009d90 <vTaskDelayUntil>
 8008a8e:	e002      	b.n	8008a96 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008a90:	f06f 0303 	mvn.w	r3, #3
 8008a94:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008a96:	697b      	ldr	r3, [r7, #20]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	@ 0x28
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab0:	f3ef 8305 	mrs	r3, IPSR
 8008ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ab6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d15f      	bne.n	8008b7c <osMessageQueueNew+0xdc>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d05c      	beq.n	8008b7c <osMessageQueueNew+0xdc>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d059      	beq.n	8008b7c <osMessageQueueNew+0xdc>
    mem = -1;
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d029      	beq.n	8008b28 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d012      	beq.n	8008b02 <osMessageQueueNew+0x62>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ae2:	d90e      	bls.n	8008b02 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	695a      	ldr	r2, [r3, #20]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d302      	bcc.n	8008b02 <osMessageQueueNew+0x62>
        mem = 1;
 8008afc:	2301      	movs	r3, #1
 8008afe:	61bb      	str	r3, [r7, #24]
 8008b00:	e014      	b.n	8008b2c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d110      	bne.n	8008b2c <osMessageQueueNew+0x8c>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10c      	bne.n	8008b2c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d104      	bne.n	8008b2c <osMessageQueueNew+0x8c>
          mem = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	e001      	b.n	8008b2c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d10b      	bne.n	8008b4a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691a      	ldr	r2, [r3, #16]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	9100      	str	r1, [sp, #0]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 fa31 	bl	8008fa8 <xQueueGenericCreateStatic>
 8008b46:	61f8      	str	r0, [r7, #28]
 8008b48:	e008      	b.n	8008b5c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008b50:	2200      	movs	r2, #0
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 faa4 	bl	80090a2 <xQueueGenericCreate>
 8008b5a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00c      	beq.n	8008b7c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e001      	b.n	8008b74 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b74:	6979      	ldr	r1, [r7, #20]
 8008b76:	69f8      	ldr	r0, [r7, #28]
 8008b78:	f000 ff06 	bl	8009988 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b7c:	69fb      	ldr	r3, [r7, #28]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	4613      	mov	r3, r2
 8008b96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ba0:	f3ef 8305 	mrs	r3, IPSR
 8008ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8008ba6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d028      	beq.n	8008bfe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <osMessageQueuePut+0x36>
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <osMessageQueuePut+0x36>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008bbe:	f06f 0303 	mvn.w	r3, #3
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	e038      	b.n	8008c38 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008bca:	f107 0210 	add.w	r2, r7, #16
 8008bce:	2300      	movs	r3, #0
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	69b8      	ldr	r0, [r7, #24]
 8008bd4:	f000 fbc6 	bl	8009364 <xQueueGenericSendFromISR>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d003      	beq.n	8008be6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008bde:	f06f 0302 	mvn.w	r3, #2
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	e028      	b.n	8008c38 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d025      	beq.n	8008c38 <osMessageQueuePut+0xb0>
 8008bec:	4b15      	ldr	r3, [pc, #84]	@ (8008c44 <osMessageQueuePut+0xbc>)
 8008bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	e01c      	b.n	8008c38 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <osMessageQueuePut+0x82>
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008c0a:	f06f 0303 	mvn.w	r3, #3
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	e012      	b.n	8008c38 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c12:	2300      	movs	r3, #0
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	69b8      	ldr	r0, [r7, #24]
 8008c1a:	f000 faa1 	bl	8009160 <xQueueGenericSend>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d009      	beq.n	8008c38 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c2a:	f06f 0301 	mvn.w	r3, #1
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	e002      	b.n	8008c38 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008c32:	f06f 0302 	mvn.w	r3, #2
 8008c36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c38:	69fb      	ldr	r3, [r7, #28]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c5e:	f3ef 8305 	mrs	r3, IPSR
 8008c62:	617b      	str	r3, [r7, #20]
  return(result);
 8008c64:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d028      	beq.n	8008cbc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <osMessageQueueGet+0x34>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <osMessageQueueGet+0x34>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c7c:	f06f 0303 	mvn.w	r3, #3
 8008c80:	61fb      	str	r3, [r7, #28]
 8008c82:	e037      	b.n	8008cf4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c88:	f107 0310 	add.w	r3, r7, #16
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	69b8      	ldr	r0, [r7, #24]
 8008c92:	f000 fce7 	bl	8009664 <xQueueReceiveFromISR>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d003      	beq.n	8008ca4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c9c:	f06f 0302 	mvn.w	r3, #2
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	e027      	b.n	8008cf4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d024      	beq.n	8008cf4 <osMessageQueueGet+0xac>
 8008caa:	4b15      	ldr	r3, [pc, #84]	@ (8008d00 <osMessageQueueGet+0xb8>)
 8008cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	e01b      	b.n	8008cf4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <osMessageQueueGet+0x80>
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008cc8:	f06f 0303 	mvn.w	r3, #3
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	e011      	b.n	8008cf4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	69b8      	ldr	r0, [r7, #24]
 8008cd6:	f000 fbe3 	bl	80094a0 <xQueueReceive>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d009      	beq.n	8008cf4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008ce6:	f06f 0301 	mvn.w	r3, #1
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e002      	b.n	8008cf4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008cee:	f06f 0302 	mvn.w	r3, #2
 8008cf2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008cf4:	69fb      	ldr	r3, [r7, #28]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a07      	ldr	r2, [pc, #28]	@ (8008d30 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	4a06      	ldr	r2, [pc, #24]	@ (8008d34 <vApplicationGetIdleTaskMemory+0x30>)
 8008d1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2280      	movs	r2, #128	@ 0x80
 8008d20:	601a      	str	r2, [r3, #0]
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	20000554 	.word	0x20000554
 8008d34:	200005b0 	.word	0x200005b0

08008d38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4a07      	ldr	r2, [pc, #28]	@ (8008d64 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4a06      	ldr	r2, [pc, #24]	@ (8008d68 <vApplicationGetTimerTaskMemory+0x30>)
 8008d4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d56:	601a      	str	r2, [r3, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	200007b0 	.word	0x200007b0
 8008d68:	2000080c 	.word	0x2000080c

08008d6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f103 0208 	add.w	r2, r3, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f103 0208 	add.w	r2, r3, #8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f103 0208 	add.w	r2, r3, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d103      	bne.n	8008e2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e00c      	b.n	8008e48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3308      	adds	r3, #8
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e002      	b.n	8008e3c <vListInsert+0x2e>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d2f6      	bcs.n	8008e36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6892      	ldr	r2, [r2, #8]
 8008e96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6852      	ldr	r2, [r2, #4]
 8008ea0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d103      	bne.n	8008eb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f00:	f002 f992 	bl	800b228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0c:	68f9      	ldr	r1, [r7, #12]
 8008f0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f10:	fb01 f303 	mul.w	r3, r1, r3
 8008f14:	441a      	add	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f30:	3b01      	subs	r3, #1
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	22ff      	movs	r2, #255	@ 0xff
 8008f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	22ff      	movs	r2, #255	@ 0xff
 8008f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d114      	bne.n	8008f80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d01a      	beq.n	8008f94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3310      	adds	r3, #16
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fa34 	bl	800a3d0 <xTaskRemoveFromEventList>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d012      	beq.n	8008f94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <xQueueGenericReset+0xd0>)
 8008f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	e009      	b.n	8008f94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3310      	adds	r3, #16
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff fef1 	bl	8008d6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3324      	adds	r3, #36	@ 0x24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff feec 	bl	8008d6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f94:	f002 f97a 	bl	800b28c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f98:	2301      	movs	r3, #1
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08e      	sub	sp, #56	@ 0x38
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <xQueueGenericCreateStatic+0x56>
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <xQueueGenericCreateStatic+0x5a>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <xQueueGenericCreateStatic+0x5c>
 8009002:	2300      	movs	r3, #0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10b      	bne.n	8009020 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	623b      	str	r3, [r7, #32]
}
 800901a:	bf00      	nop
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <xQueueGenericCreateStatic+0x84>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <xQueueGenericCreateStatic+0x88>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <xQueueGenericCreateStatic+0x8a>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	61fb      	str	r3, [r7, #28]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800904e:	2350      	movs	r3, #80	@ 0x50
 8009050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b50      	cmp	r3, #80	@ 0x50
 8009056:	d00b      	beq.n	8009070 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	61bb      	str	r3, [r7, #24]
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009070:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00d      	beq.n	8009098 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800907c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009084:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4613      	mov	r3, r2
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f840 	bl	8009118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800909a:	4618      	mov	r0, r3
 800909c:	3730      	adds	r7, #48	@ 0x30
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b08a      	sub	sp, #40	@ 0x28
 80090a6:	af02      	add	r7, sp, #8
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	613b      	str	r3, [r7, #16]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	fb02 f303 	mul.w	r3, r2, r3
 80090d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3350      	adds	r3, #80	@ 0x50
 80090dc:	4618      	mov	r0, r3
 80090de:	f002 f9c5 	bl	800b46c <pvPortMalloc>
 80090e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d011      	beq.n	800910e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	3350      	adds	r3, #80	@ 0x50
 80090f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090fc:	79fa      	ldrb	r2, [r7, #7]
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4613      	mov	r3, r2
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f805 	bl	8009118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800910e:	69bb      	ldr	r3, [r7, #24]
	}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d103      	bne.n	8009134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	e002      	b.n	800913a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009146:	2101      	movs	r1, #1
 8009148:	69b8      	ldr	r0, [r7, #24]
 800914a:	f7ff fec3 	bl	8008ed4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08e      	sub	sp, #56	@ 0x38
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800916e:	2300      	movs	r3, #0
 8009170:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <xQueueGenericSend+0x34>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d103      	bne.n	80091a2 <xQueueGenericSend+0x42>
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <xQueueGenericSend+0x46>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <xQueueGenericSend+0x48>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10b      	bne.n	80091c4 <xQueueGenericSend+0x64>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	e7fd      	b.n	80091c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d103      	bne.n	80091d2 <xQueueGenericSend+0x72>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <xQueueGenericSend+0x76>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e000      	b.n	80091d8 <xQueueGenericSend+0x78>
 80091d6:	2300      	movs	r3, #0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10b      	bne.n	80091f4 <xQueueGenericSend+0x94>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	623b      	str	r3, [r7, #32]
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091f4:	f001 faac 	bl	800a750 <xTaskGetSchedulerState>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d102      	bne.n	8009204 <xQueueGenericSend+0xa4>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <xQueueGenericSend+0xa8>
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <xQueueGenericSend+0xaa>
 8009208:	2300      	movs	r3, #0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10b      	bne.n	8009226 <xQueueGenericSend+0xc6>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	61fb      	str	r3, [r7, #28]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009226:	f001 ffff 	bl	800b228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009232:	429a      	cmp	r2, r3
 8009234:	d302      	bcc.n	800923c <xQueueGenericSend+0xdc>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d129      	bne.n	8009290 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009242:	f000 fa91 	bl	8009768 <prvCopyDataToQueue>
 8009246:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d010      	beq.n	8009272 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	3324      	adds	r3, #36	@ 0x24
 8009254:	4618      	mov	r0, r3
 8009256:	f001 f8bb 	bl	800a3d0 <xTaskRemoveFromEventList>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d013      	beq.n	8009288 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009260:	4b3f      	ldr	r3, [pc, #252]	@ (8009360 <xQueueGenericSend+0x200>)
 8009262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	e00a      	b.n	8009288 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d007      	beq.n	8009288 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009278:	4b39      	ldr	r3, [pc, #228]	@ (8009360 <xQueueGenericSend+0x200>)
 800927a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009288:	f002 f800 	bl	800b28c <vPortExitCritical>
				return pdPASS;
 800928c:	2301      	movs	r3, #1
 800928e:	e063      	b.n	8009358 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009296:	f001 fff9 	bl	800b28c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800929a:	2300      	movs	r3, #0
 800929c:	e05c      	b.n	8009358 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800929e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092a4:	f107 0314 	add.w	r3, r7, #20
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 f8f5 	bl	800a498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092ae:	2301      	movs	r3, #1
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092b2:	f001 ffeb 	bl	800b28c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092b6:	f000 fe53 	bl	8009f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092ba:	f001 ffb5 	bl	800b228 <vPortEnterCritical>
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092c4:	b25b      	sxtb	r3, r3
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d103      	bne.n	80092d4 <xQueueGenericSend+0x174>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092da:	b25b      	sxtb	r3, r3
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSend+0x18a>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092ea:	f001 ffcf 	bl	800b28c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092ee:	1d3a      	adds	r2, r7, #4
 80092f0:	f107 0314 	add.w	r3, r7, #20
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 f8e4 	bl	800a4c4 <xTaskCheckForTimeOut>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d124      	bne.n	800934c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009304:	f000 fb28 	bl	8009958 <prvIsQueueFull>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d018      	beq.n	8009340 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	3310      	adds	r3, #16
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	4611      	mov	r1, r2
 8009316:	4618      	mov	r0, r3
 8009318:	f001 f808 	bl	800a32c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800931c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800931e:	f000 fab3 	bl	8009888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009322:	f000 fe2b 	bl	8009f7c <xTaskResumeAll>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	f47f af7c 	bne.w	8009226 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800932e:	4b0c      	ldr	r3, [pc, #48]	@ (8009360 <xQueueGenericSend+0x200>)
 8009330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	e772      	b.n	8009226 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009342:	f000 faa1 	bl	8009888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009346:	f000 fe19 	bl	8009f7c <xTaskResumeAll>
 800934a:	e76c      	b.n	8009226 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800934c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800934e:	f000 fa9b 	bl	8009888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009352:	f000 fe13 	bl	8009f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009358:	4618      	mov	r0, r3
 800935a:	3738      	adds	r7, #56	@ 0x38
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b090      	sub	sp, #64	@ 0x40
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10b      	bne.n	8009394 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800938e:	bf00      	nop
 8009390:	bf00      	nop
 8009392:	e7fd      	b.n	8009390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d103      	bne.n	80093a2 <xQueueGenericSendFromISR+0x3e>
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <xQueueGenericSendFromISR+0x42>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <xQueueGenericSendFromISR+0x44>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80093be:	bf00      	nop
 80093c0:	bf00      	nop
 80093c2:	e7fd      	b.n	80093c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d103      	bne.n	80093d2 <xQueueGenericSendFromISR+0x6e>
 80093ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <xQueueGenericSendFromISR+0x72>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <xQueueGenericSendFromISR+0x74>
 80093d6:	2300      	movs	r3, #0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10b      	bne.n	80093f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	623b      	str	r3, [r7, #32]
}
 80093ee:	bf00      	nop
 80093f0:	bf00      	nop
 80093f2:	e7fd      	b.n	80093f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093f4:	f001 fff8 	bl	800b3e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093f8:	f3ef 8211 	mrs	r2, BASEPRI
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	61fa      	str	r2, [r7, #28]
 800940e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009410:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941c:	429a      	cmp	r2, r3
 800941e:	d302      	bcc.n	8009426 <xQueueGenericSendFromISR+0xc2>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b02      	cmp	r3, #2
 8009424:	d12f      	bne.n	8009486 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800942c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009434:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800943c:	f000 f994 	bl	8009768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009440:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d112      	bne.n	8009470 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800944a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d016      	beq.n	8009480 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	3324      	adds	r3, #36	@ 0x24
 8009456:	4618      	mov	r0, r3
 8009458:	f000 ffba 	bl	800a3d0 <xTaskRemoveFromEventList>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00e      	beq.n	8009480 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e007      	b.n	8009480 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009474:	3301      	adds	r3, #1
 8009476:	b2db      	uxtb	r3, r3
 8009478:	b25a      	sxtb	r2, r3
 800947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009480:	2301      	movs	r3, #1
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009484:	e001      	b.n	800948a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800948a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009494:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009498:	4618      	mov	r0, r3
 800949a:	3740      	adds	r7, #64	@ 0x40
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08c      	sub	sp, #48	@ 0x30
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <xQueueReceive+0x32>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	623b      	str	r3, [r7, #32]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d103      	bne.n	80094e0 <xQueueReceive+0x40>
 80094d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <xQueueReceive+0x44>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <xQueueReceive+0x46>
 80094e4:	2300      	movs	r3, #0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <xQueueReceive+0x62>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	61fb      	str	r3, [r7, #28]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009502:	f001 f925 	bl	800a750 <xTaskGetSchedulerState>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <xQueueReceive+0x72>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <xQueueReceive+0x76>
 8009512:	2301      	movs	r3, #1
 8009514:	e000      	b.n	8009518 <xQueueReceive+0x78>
 8009516:	2300      	movs	r3, #0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10b      	bne.n	8009534 <xQueueReceive+0x94>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	61bb      	str	r3, [r7, #24]
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009534:	f001 fe78 	bl	800b228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d01f      	beq.n	8009584 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009548:	f000 f978 	bl	800983c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	1e5a      	subs	r2, r3, #1
 8009550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009552:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00f      	beq.n	800957c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	3310      	adds	r3, #16
 8009560:	4618      	mov	r0, r3
 8009562:	f000 ff35 	bl	800a3d0 <xTaskRemoveFromEventList>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800956c:	4b3c      	ldr	r3, [pc, #240]	@ (8009660 <xQueueReceive+0x1c0>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800957c:	f001 fe86 	bl	800b28c <vPortExitCritical>
				return pdPASS;
 8009580:	2301      	movs	r3, #1
 8009582:	e069      	b.n	8009658 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800958a:	f001 fe7f 	bl	800b28c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800958e:	2300      	movs	r3, #0
 8009590:	e062      	b.n	8009658 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009598:	f107 0310 	add.w	r3, r7, #16
 800959c:	4618      	mov	r0, r3
 800959e:	f000 ff7b 	bl	800a498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095a6:	f001 fe71 	bl	800b28c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095aa:	f000 fcd9 	bl	8009f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ae:	f001 fe3b 	bl	800b228 <vPortEnterCritical>
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095b8:	b25b      	sxtb	r3, r3
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095be:	d103      	bne.n	80095c8 <xQueueReceive+0x128>
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095ce:	b25b      	sxtb	r3, r3
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d103      	bne.n	80095de <xQueueReceive+0x13e>
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095de:	f001 fe55 	bl	800b28c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095e2:	1d3a      	adds	r2, r7, #4
 80095e4:	f107 0310 	add.w	r3, r7, #16
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 ff6a 	bl	800a4c4 <xTaskCheckForTimeOut>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d123      	bne.n	800963e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f8:	f000 f998 	bl	800992c <prvIsQueueEmpty>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d017      	beq.n	8009632 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	3324      	adds	r3, #36	@ 0x24
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fe8e 	bl	800a32c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009612:	f000 f939 	bl	8009888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009616:	f000 fcb1 	bl	8009f7c <xTaskResumeAll>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d189      	bne.n	8009534 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009620:	4b0f      	ldr	r3, [pc, #60]	@ (8009660 <xQueueReceive+0x1c0>)
 8009622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	e780      	b.n	8009534 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009634:	f000 f928 	bl	8009888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009638:	f000 fca0 	bl	8009f7c <xTaskResumeAll>
 800963c:	e77a      	b.n	8009534 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800963e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009640:	f000 f922 	bl	8009888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009644:	f000 fc9a 	bl	8009f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800964a:	f000 f96f 	bl	800992c <prvIsQueueEmpty>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	f43f af6f 	beq.w	8009534 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009656:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009658:	4618      	mov	r0, r3
 800965a:	3730      	adds	r7, #48	@ 0x30
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08e      	sub	sp, #56	@ 0x38
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10b      	bne.n	8009692 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	623b      	str	r3, [r7, #32]
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	e7fd      	b.n	800968e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d103      	bne.n	80096a0 <xQueueReceiveFromISR+0x3c>
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <xQueueReceiveFromISR+0x40>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e000      	b.n	80096a6 <xQueueReceiveFromISR+0x42>
 80096a4:	2300      	movs	r3, #0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10b      	bne.n	80096c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	61fb      	str	r3, [r7, #28]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096c2:	f001 fe91 	bl	800b3e8 <vPortValidateInterruptPriority>
	__asm volatile
 80096c6:	f3ef 8211 	mrs	r2, BASEPRI
 80096ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	61ba      	str	r2, [r7, #24]
 80096dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80096de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d02f      	beq.n	800974e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096fc:	f000 f89e 	bl	800983c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	1e5a      	subs	r2, r3, #1
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d112      	bne.n	8009738 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d016      	beq.n	8009748 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	3310      	adds	r3, #16
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fe56 	bl	800a3d0 <xTaskRemoveFromEventList>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	e007      	b.n	8009748 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800973c:	3301      	adds	r3, #1
 800973e:	b2db      	uxtb	r3, r3
 8009740:	b25a      	sxtb	r2, r3
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009748:	2301      	movs	r3, #1
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
 800974c:	e001      	b.n	8009752 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800974e:	2300      	movs	r3, #0
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f383 8811 	msr	BASEPRI, r3
}
 800975c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800975e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009760:	4618      	mov	r0, r3
 8009762:	3738      	adds	r7, #56	@ 0x38
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10d      	bne.n	80097a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d14d      	bne.n	800982a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fffa 	bl	800a78c <xTaskPriorityDisinherit>
 8009798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	609a      	str	r2, [r3, #8]
 80097a0:	e043      	b.n	800982a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d119      	bne.n	80097dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6858      	ldr	r0, [r3, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b0:	461a      	mov	r2, r3
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	f002 f874 	bl	800b8a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c0:	441a      	add	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d32b      	bcc.n	800982a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	605a      	str	r2, [r3, #4]
 80097da:	e026      	b.n	800982a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68d8      	ldr	r0, [r3, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e4:	461a      	mov	r2, r3
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	f002 f85a 	bl	800b8a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f4:	425b      	negs	r3, r3
 80097f6:	441a      	add	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d207      	bcs.n	8009818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009810:	425b      	negs	r3, r3
 8009812:	441a      	add	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d105      	bne.n	800982a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	3b01      	subs	r3, #1
 8009828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009832:	697b      	ldr	r3, [r7, #20]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	d018      	beq.n	8009880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009856:	441a      	add	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	429a      	cmp	r2, r3
 8009866:	d303      	bcc.n	8009870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68d9      	ldr	r1, [r3, #12]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	461a      	mov	r2, r3
 800987a:	6838      	ldr	r0, [r7, #0]
 800987c:	f002 f810 	bl	800b8a0 <memcpy>
	}
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009890:	f001 fcca 	bl	800b228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800989a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800989c:	e011      	b.n	80098c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d012      	beq.n	80098cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3324      	adds	r3, #36	@ 0x24
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fd90 	bl	800a3d0 <xTaskRemoveFromEventList>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098b6:	f000 fe69 	bl	800a58c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	3b01      	subs	r3, #1
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dce9      	bgt.n	800989e <prvUnlockQueue+0x16>
 80098ca:	e000      	b.n	80098ce <prvUnlockQueue+0x46>
					break;
 80098cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	22ff      	movs	r2, #255	@ 0xff
 80098d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80098d6:	f001 fcd9 	bl	800b28c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098da:	f001 fca5 	bl	800b228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098e6:	e011      	b.n	800990c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d012      	beq.n	8009916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3310      	adds	r3, #16
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 fd6b 	bl	800a3d0 <xTaskRemoveFromEventList>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009900:	f000 fe44 	bl	800a58c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	3b01      	subs	r3, #1
 8009908:	b2db      	uxtb	r3, r3
 800990a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800990c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dce9      	bgt.n	80098e8 <prvUnlockQueue+0x60>
 8009914:	e000      	b.n	8009918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	22ff      	movs	r2, #255	@ 0xff
 800991c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009920:	f001 fcb4 	bl	800b28c <vPortExitCritical>
}
 8009924:	bf00      	nop
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009934:	f001 fc78 	bl	800b228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009940:	2301      	movs	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e001      	b.n	800994a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800994a:	f001 fc9f 	bl	800b28c <vPortExitCritical>

	return xReturn;
 800994e:	68fb      	ldr	r3, [r7, #12]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009960:	f001 fc62 	bl	800b228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800996c:	429a      	cmp	r2, r3
 800996e:	d102      	bne.n	8009976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009970:	2301      	movs	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e001      	b.n	800997a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800997a:	f001 fc87 	bl	800b28c <vPortExitCritical>

	return xReturn;
 800997e:	68fb      	ldr	r3, [r7, #12]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	e014      	b.n	80099c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009998:	4a0f      	ldr	r2, [pc, #60]	@ (80099d8 <vQueueAddToRegistry+0x50>)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10b      	bne.n	80099bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099a4:	490c      	ldr	r1, [pc, #48]	@ (80099d8 <vQueueAddToRegistry+0x50>)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099ae:	4a0a      	ldr	r2, [pc, #40]	@ (80099d8 <vQueueAddToRegistry+0x50>)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	4413      	add	r3, r2
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099ba:	e006      	b.n	80099ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b07      	cmp	r3, #7
 80099c6:	d9e7      	bls.n	8009998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000c0c 	.word	0x20000c0c

080099dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099ec:	f001 fc1c 	bl	800b228 <vPortEnterCritical>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d103      	bne.n	8009a06 <vQueueWaitForMessageRestricted+0x2a>
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a0c:	b25b      	sxtb	r3, r3
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a12:	d103      	bne.n	8009a1c <vQueueWaitForMessageRestricted+0x40>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a1c:	f001 fc36 	bl	800b28c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d106      	bne.n	8009a36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	3324      	adds	r3, #36	@ 0x24
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fca1 	bl	800a378 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a36:	6978      	ldr	r0, [r7, #20]
 8009a38:	f7ff ff26 	bl	8009888 <prvUnlockQueue>
	}
 8009a3c:	bf00      	nop
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08e      	sub	sp, #56	@ 0x38
 8009a48:	af04      	add	r7, sp, #16
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10b      	bne.n	8009a70 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	623b      	str	r3, [r7, #32]
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	e7fd      	b.n	8009a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10b      	bne.n	8009a8e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	61fb      	str	r3, [r7, #28]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a8e:	235c      	movs	r3, #92	@ 0x5c
 8009a90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a96:	d00b      	beq.n	8009ab0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	61bb      	str	r3, [r7, #24]
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	e7fd      	b.n	8009aac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01e      	beq.n	8009af6 <xTaskCreateStatic+0xb2>
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01b      	beq.n	8009af6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ac6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f850 	bl	8009b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009af0:	f000 f8de 	bl	8009cb0 <prvAddNewTaskToReadyList>
 8009af4:	e001      	b.n	8009afa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009afa:	697b      	ldr	r3, [r7, #20]
	}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3728      	adds	r7, #40	@ 0x28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08c      	sub	sp, #48	@ 0x30
 8009b08:	af04      	add	r7, sp, #16
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	4613      	mov	r3, r2
 8009b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fca7 	bl	800b46c <pvPortMalloc>
 8009b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00e      	beq.n	8009b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b26:	205c      	movs	r0, #92	@ 0x5c
 8009b28:	f001 fca0 	bl	800b46c <pvPortMalloc>
 8009b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b3a:	e005      	b.n	8009b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b3c:	6978      	ldr	r0, [r7, #20]
 8009b3e:	f001 fd63 	bl	800b608 <vPortFree>
 8009b42:	e001      	b.n	8009b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d017      	beq.n	8009b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b56:	88fa      	ldrh	r2, [r7, #6]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9303      	str	r3, [sp, #12]
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 f80e 	bl	8009b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b72:	69f8      	ldr	r0, [r7, #28]
 8009b74:	f000 f89c 	bl	8009cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	e002      	b.n	8009b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b84:	69bb      	ldr	r3, [r7, #24]
	}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3720      	adds	r7, #32
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b088      	sub	sp, #32
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	21a5      	movs	r1, #165	@ 0xa5
 8009ba8:	f001 fe4e 	bl	800b848 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	617b      	str	r3, [r7, #20]
}
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	e7fd      	b.n	8009be4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01f      	beq.n	8009c2e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	e012      	b.n	8009c1a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	7819      	ldrb	r1, [r3, #0]
 8009bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	4413      	add	r3, r2
 8009c02:	3334      	adds	r3, #52	@ 0x34
 8009c04:	460a      	mov	r2, r1
 8009c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d006      	beq.n	8009c22 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	3301      	adds	r3, #1
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	2b0f      	cmp	r3, #15
 8009c1e:	d9e9      	bls.n	8009bf4 <prvInitialiseNewTask+0x66>
 8009c20:	e000      	b.n	8009c24 <prvInitialiseNewTask+0x96>
			{
				break;
 8009c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c2c:	e003      	b.n	8009c36 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	2b37      	cmp	r3, #55	@ 0x37
 8009c3a:	d901      	bls.n	8009c40 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c3c:	2337      	movs	r3, #55	@ 0x37
 8009c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c4a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	2200      	movs	r2, #0
 8009c50:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	3304      	adds	r3, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff f8a8 	bl	8008dac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5e:	3318      	adds	r3, #24
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff f8a3 	bl	8008dac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	2200      	movs	r2, #0
 8009c80:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	68f9      	ldr	r1, [r7, #12]
 8009c8e:	69b8      	ldr	r0, [r7, #24]
 8009c90:	f001 f99a 	bl	800afc8 <pxPortInitialiseStack>
 8009c94:	4602      	mov	r2, r0
 8009c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ca6:	bf00      	nop
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cb8:	f001 fab6 	bl	800b228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8009d74 <prvAddNewTaskToReadyList+0xc4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009d74 <prvAddNewTaskToReadyList+0xc4>)
 8009cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8009d78 <prvAddNewTaskToReadyList+0xc8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cce:	4a2a      	ldr	r2, [pc, #168]	@ (8009d78 <prvAddNewTaskToReadyList+0xc8>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cd4:	4b27      	ldr	r3, [pc, #156]	@ (8009d74 <prvAddNewTaskToReadyList+0xc4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d110      	bne.n	8009cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cdc:	f000 fc7a 	bl	800a5d4 <prvInitialiseTaskLists>
 8009ce0:	e00d      	b.n	8009cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ce2:	4b26      	ldr	r3, [pc, #152]	@ (8009d7c <prvAddNewTaskToReadyList+0xcc>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cea:	4b23      	ldr	r3, [pc, #140]	@ (8009d78 <prvAddNewTaskToReadyList+0xc8>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d802      	bhi.n	8009cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d78 <prvAddNewTaskToReadyList+0xc8>)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cfe:	4b20      	ldr	r3, [pc, #128]	@ (8009d80 <prvAddNewTaskToReadyList+0xd0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	4a1e      	ldr	r2, [pc, #120]	@ (8009d80 <prvAddNewTaskToReadyList+0xd0>)
 8009d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d08:	4b1d      	ldr	r3, [pc, #116]	@ (8009d80 <prvAddNewTaskToReadyList+0xd0>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d14:	4b1b      	ldr	r3, [pc, #108]	@ (8009d84 <prvAddNewTaskToReadyList+0xd4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d903      	bls.n	8009d24 <prvAddNewTaskToReadyList+0x74>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d20:	4a18      	ldr	r2, [pc, #96]	@ (8009d84 <prvAddNewTaskToReadyList+0xd4>)
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4a15      	ldr	r2, [pc, #84]	@ (8009d88 <prvAddNewTaskToReadyList+0xd8>)
 8009d32:	441a      	add	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f7ff f843 	bl	8008dc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d40:	f001 faa4 	bl	800b28c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d44:	4b0d      	ldr	r3, [pc, #52]	@ (8009d7c <prvAddNewTaskToReadyList+0xcc>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00e      	beq.n	8009d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d78 <prvAddNewTaskToReadyList+0xc8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d207      	bcs.n	8009d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d8c <prvAddNewTaskToReadyList+0xdc>)
 8009d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20001120 	.word	0x20001120
 8009d78:	20000c4c 	.word	0x20000c4c
 8009d7c:	2000112c 	.word	0x2000112c
 8009d80:	2000113c 	.word	0x2000113c
 8009d84:	20001128 	.word	0x20001128
 8009d88:	20000c50 	.word	0x20000c50
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08a      	sub	sp, #40	@ 0x28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10b      	bne.n	8009dbc <vTaskDelayUntil+0x2c>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	617b      	str	r3, [r7, #20]
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	e7fd      	b.n	8009db8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10b      	bne.n	8009dda <vTaskDelayUntil+0x4a>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	613b      	str	r3, [r7, #16]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8009dda:	4b2a      	ldr	r3, [pc, #168]	@ (8009e84 <vTaskDelayUntil+0xf4>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <vTaskDelayUntil+0x6a>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	60fb      	str	r3, [r7, #12]
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop
 8009df8:	e7fd      	b.n	8009df6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8009dfa:	f000 f8b1 	bl	8009f60 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009dfe:	4b22      	ldr	r3, [pc, #136]	@ (8009e88 <vTaskDelayUntil+0xf8>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6a3a      	ldr	r2, [r7, #32]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d20b      	bcs.n	8009e30 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d211      	bcs.n	8009e46 <vTaskDelayUntil+0xb6>
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d90d      	bls.n	8009e46 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e2e:	e00a      	b.n	8009e46 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d303      	bcc.n	8009e42 <vTaskDelayUntil+0xb2>
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d901      	bls.n	8009e46 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69fa      	ldr	r2, [r7, #28]
 8009e4a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d006      	beq.n	8009e60 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fd06 	bl	800a86c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009e60:	f000 f88c 	bl	8009f7c <xTaskResumeAll>
 8009e64:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d107      	bne.n	8009e7c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8009e6c:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <vTaskDelayUntil+0xfc>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e7c:	bf00      	nop
 8009e7e:	3728      	adds	r7, #40	@ 0x28
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20001148 	.word	0x20001148
 8009e88:	20001124 	.word	0x20001124
 8009e8c:	e000ed04 	.word	0xe000ed04

08009e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	@ 0x28
 8009e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	1d39      	adds	r1, r7, #4
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe ff2c 	bl	8008d04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	9202      	str	r2, [sp, #8]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	460a      	mov	r2, r1
 8009ebe:	4922      	ldr	r1, [pc, #136]	@ (8009f48 <vTaskStartScheduler+0xb8>)
 8009ec0:	4822      	ldr	r0, [pc, #136]	@ (8009f4c <vTaskStartScheduler+0xbc>)
 8009ec2:	f7ff fdbf 	bl	8009a44 <xTaskCreateStatic>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a21      	ldr	r2, [pc, #132]	@ (8009f50 <vTaskStartScheduler+0xc0>)
 8009eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ecc:	4b20      	ldr	r3, [pc, #128]	@ (8009f50 <vTaskStartScheduler+0xc0>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	e001      	b.n	8009ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d102      	bne.n	8009eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ee4:	f000 fd16 	bl	800a914 <xTimerCreateTimerTask>
 8009ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d116      	bne.n	8009f1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f04:	4b13      	ldr	r3, [pc, #76]	@ (8009f54 <vTaskStartScheduler+0xc4>)
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f0c:	4b12      	ldr	r3, [pc, #72]	@ (8009f58 <vTaskStartScheduler+0xc8>)
 8009f0e:	2201      	movs	r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f12:	4b12      	ldr	r3, [pc, #72]	@ (8009f5c <vTaskStartScheduler+0xcc>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f18:	f001 f8e2 	bl	800b0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f1c:	e00f      	b.n	8009f3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f24:	d10b      	bne.n	8009f3e <vTaskStartScheduler+0xae>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60fb      	str	r3, [r7, #12]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <vTaskStartScheduler+0xaa>
}
 8009f3e:	bf00      	nop
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	0800b910 	.word	0x0800b910
 8009f4c:	0800a5a5 	.word	0x0800a5a5
 8009f50:	20001144 	.word	0x20001144
 8009f54:	20001140 	.word	0x20001140
 8009f58:	2000112c 	.word	0x2000112c
 8009f5c:	20001124 	.word	0x20001124

08009f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f64:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <vTaskSuspendAll+0x18>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	4a03      	ldr	r2, [pc, #12]	@ (8009f78 <vTaskSuspendAll+0x18>)
 8009f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f6e:	bf00      	nop
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20001148 	.word	0x20001148

08009f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f8a:	4b42      	ldr	r3, [pc, #264]	@ (800a094 <xTaskResumeAll+0x118>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <xTaskResumeAll+0x2e>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	603b      	str	r3, [r7, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009faa:	f001 f93d 	bl	800b228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fae:	4b39      	ldr	r3, [pc, #228]	@ (800a094 <xTaskResumeAll+0x118>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	4a37      	ldr	r2, [pc, #220]	@ (800a094 <xTaskResumeAll+0x118>)
 8009fb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb8:	4b36      	ldr	r3, [pc, #216]	@ (800a094 <xTaskResumeAll+0x118>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d162      	bne.n	800a086 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fc0:	4b35      	ldr	r3, [pc, #212]	@ (800a098 <xTaskResumeAll+0x11c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d05e      	beq.n	800a086 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fc8:	e02f      	b.n	800a02a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fca:	4b34      	ldr	r3, [pc, #208]	@ (800a09c <xTaskResumeAll+0x120>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3318      	adds	r3, #24
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe ff52 	bl	8008e80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe ff4d 	bl	8008e80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fea:	4b2d      	ldr	r3, [pc, #180]	@ (800a0a0 <xTaskResumeAll+0x124>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d903      	bls.n	8009ffa <xTaskResumeAll+0x7e>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff6:	4a2a      	ldr	r2, [pc, #168]	@ (800a0a0 <xTaskResumeAll+0x124>)
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4a27      	ldr	r2, [pc, #156]	@ (800a0a4 <xTaskResumeAll+0x128>)
 800a008:	441a      	add	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7fe fed8 	bl	8008dc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01a:	4b23      	ldr	r3, [pc, #140]	@ (800a0a8 <xTaskResumeAll+0x12c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	429a      	cmp	r2, r3
 800a022:	d302      	bcc.n	800a02a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a024:	4b21      	ldr	r3, [pc, #132]	@ (800a0ac <xTaskResumeAll+0x130>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a02a:	4b1c      	ldr	r3, [pc, #112]	@ (800a09c <xTaskResumeAll+0x120>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1cb      	bne.n	8009fca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a038:	f000 fb6a 	bl	800a710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a03c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0b0 <xTaskResumeAll+0x134>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d010      	beq.n	800a06a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a048:	f000 f858 	bl	800a0fc <xTaskIncrementTick>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a052:	4b16      	ldr	r3, [pc, #88]	@ (800a0ac <xTaskResumeAll+0x130>)
 800a054:	2201      	movs	r2, #1
 800a056:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f1      	bne.n	800a048 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a064:	4b12      	ldr	r3, [pc, #72]	@ (800a0b0 <xTaskResumeAll+0x134>)
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a06a:	4b10      	ldr	r3, [pc, #64]	@ (800a0ac <xTaskResumeAll+0x130>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a072:	2301      	movs	r3, #1
 800a074:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a076:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b4 <xTaskResumeAll+0x138>)
 800a078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a086:	f001 f901 	bl	800b28c <vPortExitCritical>

	return xAlreadyYielded;
 800a08a:	68bb      	ldr	r3, [r7, #8]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	20001148 	.word	0x20001148
 800a098:	20001120 	.word	0x20001120
 800a09c:	200010e0 	.word	0x200010e0
 800a0a0:	20001128 	.word	0x20001128
 800a0a4:	20000c50 	.word	0x20000c50
 800a0a8:	20000c4c 	.word	0x20000c4c
 800a0ac:	20001134 	.word	0x20001134
 800a0b0:	20001130 	.word	0x20001130
 800a0b4:	e000ed04 	.word	0xe000ed04

0800a0b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0be:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <xTaskGetTickCount+0x1c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0c4:	687b      	ldr	r3, [r7, #4]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20001124 	.word	0x20001124

0800a0d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0de:	f001 f983 	bl	800b3e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a0e6:	4b04      	ldr	r3, [pc, #16]	@ (800a0f8 <xTaskGetTickCountFromISR+0x20>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0ec:	683b      	ldr	r3, [r7, #0]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20001124 	.word	0x20001124

0800a0fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a106:	4b4f      	ldr	r3, [pc, #316]	@ (800a244 <xTaskIncrementTick+0x148>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 8090 	bne.w	800a230 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a110:	4b4d      	ldr	r3, [pc, #308]	@ (800a248 <xTaskIncrementTick+0x14c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a118:	4a4b      	ldr	r2, [pc, #300]	@ (800a248 <xTaskIncrementTick+0x14c>)
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d121      	bne.n	800a168 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a124:	4b49      	ldr	r3, [pc, #292]	@ (800a24c <xTaskIncrementTick+0x150>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	603b      	str	r3, [r7, #0]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <xTaskIncrementTick+0x46>
 800a146:	4b41      	ldr	r3, [pc, #260]	@ (800a24c <xTaskIncrementTick+0x150>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	4b40      	ldr	r3, [pc, #256]	@ (800a250 <xTaskIncrementTick+0x154>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a3e      	ldr	r2, [pc, #248]	@ (800a24c <xTaskIncrementTick+0x150>)
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	4a3e      	ldr	r2, [pc, #248]	@ (800a250 <xTaskIncrementTick+0x154>)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	4b3e      	ldr	r3, [pc, #248]	@ (800a254 <xTaskIncrementTick+0x158>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3301      	adds	r3, #1
 800a160:	4a3c      	ldr	r2, [pc, #240]	@ (800a254 <xTaskIncrementTick+0x158>)
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	f000 fad4 	bl	800a710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a168:	4b3b      	ldr	r3, [pc, #236]	@ (800a258 <xTaskIncrementTick+0x15c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d349      	bcc.n	800a206 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a172:	4b36      	ldr	r3, [pc, #216]	@ (800a24c <xTaskIncrementTick+0x150>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a17c:	4b36      	ldr	r3, [pc, #216]	@ (800a258 <xTaskIncrementTick+0x15c>)
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	601a      	str	r2, [r3, #0]
					break;
 800a184:	e03f      	b.n	800a206 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a186:	4b31      	ldr	r3, [pc, #196]	@ (800a24c <xTaskIncrementTick+0x150>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d203      	bcs.n	800a1a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a19e:	4a2e      	ldr	r2, [pc, #184]	@ (800a258 <xTaskIncrementTick+0x15c>)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1a4:	e02f      	b.n	800a206 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fe68 	bl	8008e80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	3318      	adds	r3, #24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe fe5f 	bl	8008e80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c6:	4b25      	ldr	r3, [pc, #148]	@ (800a25c <xTaskIncrementTick+0x160>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d903      	bls.n	800a1d6 <xTaskIncrementTick+0xda>
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d2:	4a22      	ldr	r2, [pc, #136]	@ (800a25c <xTaskIncrementTick+0x160>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a260 <xTaskIncrementTick+0x164>)
 800a1e4:	441a      	add	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f7fe fdea 	bl	8008dc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a264 <xTaskIncrementTick+0x168>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d3b8      	bcc.n	800a172 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a204:	e7b5      	b.n	800a172 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a206:	4b17      	ldr	r3, [pc, #92]	@ (800a264 <xTaskIncrementTick+0x168>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20c:	4914      	ldr	r1, [pc, #80]	@ (800a260 <xTaskIncrementTick+0x164>)
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	440b      	add	r3, r1
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d901      	bls.n	800a222 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a21e:	2301      	movs	r3, #1
 800a220:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a222:	4b11      	ldr	r3, [pc, #68]	@ (800a268 <xTaskIncrementTick+0x16c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a22a:	2301      	movs	r3, #1
 800a22c:	617b      	str	r3, [r7, #20]
 800a22e:	e004      	b.n	800a23a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a230:	4b0e      	ldr	r3, [pc, #56]	@ (800a26c <xTaskIncrementTick+0x170>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3301      	adds	r3, #1
 800a236:	4a0d      	ldr	r2, [pc, #52]	@ (800a26c <xTaskIncrementTick+0x170>)
 800a238:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a23a:	697b      	ldr	r3, [r7, #20]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20001148 	.word	0x20001148
 800a248:	20001124 	.word	0x20001124
 800a24c:	200010d8 	.word	0x200010d8
 800a250:	200010dc 	.word	0x200010dc
 800a254:	20001138 	.word	0x20001138
 800a258:	20001140 	.word	0x20001140
 800a25c:	20001128 	.word	0x20001128
 800a260:	20000c50 	.word	0x20000c50
 800a264:	20000c4c 	.word	0x20000c4c
 800a268:	20001134 	.word	0x20001134
 800a26c:	20001130 	.word	0x20001130

0800a270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a276:	4b28      	ldr	r3, [pc, #160]	@ (800a318 <vTaskSwitchContext+0xa8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a27e:	4b27      	ldr	r3, [pc, #156]	@ (800a31c <vTaskSwitchContext+0xac>)
 800a280:	2201      	movs	r2, #1
 800a282:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a284:	e042      	b.n	800a30c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a286:	4b25      	ldr	r3, [pc, #148]	@ (800a31c <vTaskSwitchContext+0xac>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28c:	4b24      	ldr	r3, [pc, #144]	@ (800a320 <vTaskSwitchContext+0xb0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	e011      	b.n	800a2b8 <vTaskSwitchContext+0x48>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	607b      	str	r3, [r7, #4]
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	e7fd      	b.n	800a2ae <vTaskSwitchContext+0x3e>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	491a      	ldr	r1, [pc, #104]	@ (800a324 <vTaskSwitchContext+0xb4>)
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d0e3      	beq.n	800a294 <vTaskSwitchContext+0x24>
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4a13      	ldr	r2, [pc, #76]	@ (800a324 <vTaskSwitchContext+0xb4>)
 800a2d8:	4413      	add	r3, r2
 800a2da:	60bb      	str	r3, [r7, #8]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d104      	bne.n	800a2fc <vTaskSwitchContext+0x8c>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	605a      	str	r2, [r3, #4]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	4a09      	ldr	r2, [pc, #36]	@ (800a328 <vTaskSwitchContext+0xb8>)
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	4a06      	ldr	r2, [pc, #24]	@ (800a320 <vTaskSwitchContext+0xb0>)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6013      	str	r3, [r2, #0]
}
 800a30c:	bf00      	nop
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	20001148 	.word	0x20001148
 800a31c:	20001134 	.word	0x20001134
 800a320:	20001128 	.word	0x20001128
 800a324:	20000c50 	.word	0x20000c50
 800a328:	20000c4c 	.word	0x20000c4c

0800a32c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10b      	bne.n	800a354 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	60fb      	str	r3, [r7, #12]
}
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	e7fd      	b.n	800a350 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a354:	4b07      	ldr	r3, [pc, #28]	@ (800a374 <vTaskPlaceOnEventList+0x48>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3318      	adds	r3, #24
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7fe fd56 	bl	8008e0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a362:	2101      	movs	r1, #1
 800a364:	6838      	ldr	r0, [r7, #0]
 800a366:	f000 fa81 	bl	800a86c <prvAddCurrentTaskToDelayedList>
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000c4c 	.word	0x20000c4c

0800a378 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	617b      	str	r3, [r7, #20]
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	e7fd      	b.n	800a39e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <vTaskPlaceOnEventListRestricted+0x54>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3318      	adds	r3, #24
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7fe fd0b 	bl	8008dc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	68b8      	ldr	r0, [r7, #8]
 800a3c0:	f000 fa54 	bl	800a86c <prvAddCurrentTaskToDelayedList>
	}
 800a3c4:	bf00      	nop
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20000c4c 	.word	0x20000c4c

0800a3d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10b      	bne.n	800a3fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	60fb      	str	r3, [r7, #12]
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	e7fd      	b.n	800a3fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	3318      	adds	r3, #24
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fd3c 	bl	8008e80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a408:	4b1d      	ldr	r3, [pc, #116]	@ (800a480 <xTaskRemoveFromEventList+0xb0>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d11d      	bne.n	800a44c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	3304      	adds	r3, #4
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe fd33 	bl	8008e80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a41e:	4b19      	ldr	r3, [pc, #100]	@ (800a484 <xTaskRemoveFromEventList+0xb4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	d903      	bls.n	800a42e <xTaskRemoveFromEventList+0x5e>
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	4a16      	ldr	r2, [pc, #88]	@ (800a484 <xTaskRemoveFromEventList+0xb4>)
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a432:	4613      	mov	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4a13      	ldr	r2, [pc, #76]	@ (800a488 <xTaskRemoveFromEventList+0xb8>)
 800a43c:	441a      	add	r2, r3
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3304      	adds	r3, #4
 800a442:	4619      	mov	r1, r3
 800a444:	4610      	mov	r0, r2
 800a446:	f7fe fcbe 	bl	8008dc6 <vListInsertEnd>
 800a44a:	e005      	b.n	800a458 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	3318      	adds	r3, #24
 800a450:	4619      	mov	r1, r3
 800a452:	480e      	ldr	r0, [pc, #56]	@ (800a48c <xTaskRemoveFromEventList+0xbc>)
 800a454:	f7fe fcb7 	bl	8008dc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45c:	4b0c      	ldr	r3, [pc, #48]	@ (800a490 <xTaskRemoveFromEventList+0xc0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a462:	429a      	cmp	r2, r3
 800a464:	d905      	bls.n	800a472 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a466:	2301      	movs	r3, #1
 800a468:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a46a:	4b0a      	ldr	r3, [pc, #40]	@ (800a494 <xTaskRemoveFromEventList+0xc4>)
 800a46c:	2201      	movs	r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
 800a470:	e001      	b.n	800a476 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a476:	697b      	ldr	r3, [r7, #20]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20001148 	.word	0x20001148
 800a484:	20001128 	.word	0x20001128
 800a488:	20000c50 	.word	0x20000c50
 800a48c:	200010e0 	.word	0x200010e0
 800a490:	20000c4c 	.word	0x20000c4c
 800a494:	20001134 	.word	0x20001134

0800a498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4a0:	4b06      	ldr	r3, [pc, #24]	@ (800a4bc <vTaskInternalSetTimeOutState+0x24>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4a8:	4b05      	ldr	r3, [pc, #20]	@ (800a4c0 <vTaskInternalSetTimeOutState+0x28>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	605a      	str	r2, [r3, #4]
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	20001138 	.word	0x20001138
 800a4c0:	20001124 	.word	0x20001124

0800a4c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	613b      	str	r3, [r7, #16]
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10b      	bne.n	800a50a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60fb      	str	r3, [r7, #12]
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop
 800a508:	e7fd      	b.n	800a506 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a50a:	f000 fe8d 	bl	800b228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a50e:	4b1d      	ldr	r3, [pc, #116]	@ (800a584 <xTaskCheckForTimeOut+0xc0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a526:	d102      	bne.n	800a52e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a528:	2300      	movs	r3, #0
 800a52a:	61fb      	str	r3, [r7, #28]
 800a52c:	e023      	b.n	800a576 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	4b15      	ldr	r3, [pc, #84]	@ (800a588 <xTaskCheckForTimeOut+0xc4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	429a      	cmp	r2, r3
 800a538:	d007      	beq.n	800a54a <xTaskCheckForTimeOut+0x86>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	429a      	cmp	r2, r3
 800a542:	d302      	bcc.n	800a54a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	e015      	b.n	800a576 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	429a      	cmp	r2, r3
 800a552:	d20b      	bcs.n	800a56c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff ff99 	bl	800a498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	61fb      	str	r3, [r7, #28]
 800a56a:	e004      	b.n	800a576 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a572:	2301      	movs	r3, #1
 800a574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a576:	f000 fe89 	bl	800b28c <vPortExitCritical>

	return xReturn;
 800a57a:	69fb      	ldr	r3, [r7, #28]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20001124 	.word	0x20001124
 800a588:	20001138 	.word	0x20001138

0800a58c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a590:	4b03      	ldr	r3, [pc, #12]	@ (800a5a0 <vTaskMissedYield+0x14>)
 800a592:	2201      	movs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]
}
 800a596:	bf00      	nop
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	20001134 	.word	0x20001134

0800a5a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5ac:	f000 f852 	bl	800a654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5b0:	4b06      	ldr	r3, [pc, #24]	@ (800a5cc <prvIdleTask+0x28>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d9f9      	bls.n	800a5ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5b8:	4b05      	ldr	r3, [pc, #20]	@ (800a5d0 <prvIdleTask+0x2c>)
 800a5ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5c8:	e7f0      	b.n	800a5ac <prvIdleTask+0x8>
 800a5ca:	bf00      	nop
 800a5cc:	20000c50 	.word	0x20000c50
 800a5d0:	e000ed04 	.word	0xe000ed04

0800a5d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5da:	2300      	movs	r3, #0
 800a5dc:	607b      	str	r3, [r7, #4]
 800a5de:	e00c      	b.n	800a5fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4a12      	ldr	r2, [pc, #72]	@ (800a634 <prvInitialiseTaskLists+0x60>)
 800a5ec:	4413      	add	r3, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fbbc 	bl	8008d6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	607b      	str	r3, [r7, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b37      	cmp	r3, #55	@ 0x37
 800a5fe:	d9ef      	bls.n	800a5e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a600:	480d      	ldr	r0, [pc, #52]	@ (800a638 <prvInitialiseTaskLists+0x64>)
 800a602:	f7fe fbb3 	bl	8008d6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a606:	480d      	ldr	r0, [pc, #52]	@ (800a63c <prvInitialiseTaskLists+0x68>)
 800a608:	f7fe fbb0 	bl	8008d6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a60c:	480c      	ldr	r0, [pc, #48]	@ (800a640 <prvInitialiseTaskLists+0x6c>)
 800a60e:	f7fe fbad 	bl	8008d6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a612:	480c      	ldr	r0, [pc, #48]	@ (800a644 <prvInitialiseTaskLists+0x70>)
 800a614:	f7fe fbaa 	bl	8008d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a618:	480b      	ldr	r0, [pc, #44]	@ (800a648 <prvInitialiseTaskLists+0x74>)
 800a61a:	f7fe fba7 	bl	8008d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a61e:	4b0b      	ldr	r3, [pc, #44]	@ (800a64c <prvInitialiseTaskLists+0x78>)
 800a620:	4a05      	ldr	r2, [pc, #20]	@ (800a638 <prvInitialiseTaskLists+0x64>)
 800a622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a624:	4b0a      	ldr	r3, [pc, #40]	@ (800a650 <prvInitialiseTaskLists+0x7c>)
 800a626:	4a05      	ldr	r2, [pc, #20]	@ (800a63c <prvInitialiseTaskLists+0x68>)
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20000c50 	.word	0x20000c50
 800a638:	200010b0 	.word	0x200010b0
 800a63c:	200010c4 	.word	0x200010c4
 800a640:	200010e0 	.word	0x200010e0
 800a644:	200010f4 	.word	0x200010f4
 800a648:	2000110c 	.word	0x2000110c
 800a64c:	200010d8 	.word	0x200010d8
 800a650:	200010dc 	.word	0x200010dc

0800a654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a65a:	e019      	b.n	800a690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a65c:	f000 fde4 	bl	800b228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a660:	4b10      	ldr	r3, [pc, #64]	@ (800a6a4 <prvCheckTasksWaitingTermination+0x50>)
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe fc07 	bl	8008e80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a672:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <prvCheckTasksWaitingTermination+0x54>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3b01      	subs	r3, #1
 800a678:	4a0b      	ldr	r2, [pc, #44]	@ (800a6a8 <prvCheckTasksWaitingTermination+0x54>)
 800a67a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a67c:	4b0b      	ldr	r3, [pc, #44]	@ (800a6ac <prvCheckTasksWaitingTermination+0x58>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3b01      	subs	r3, #1
 800a682:	4a0a      	ldr	r2, [pc, #40]	@ (800a6ac <prvCheckTasksWaitingTermination+0x58>)
 800a684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a686:	f000 fe01 	bl	800b28c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f810 	bl	800a6b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a690:	4b06      	ldr	r3, [pc, #24]	@ (800a6ac <prvCheckTasksWaitingTermination+0x58>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1e1      	bne.n	800a65c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200010f4 	.word	0x200010f4
 800a6a8:	20001120 	.word	0x20001120
 800a6ac:	20001108 	.word	0x20001108

0800a6b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d108      	bne.n	800a6d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 ff9e 	bl	800b608 <vPortFree>
				vPortFree( pxTCB );
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 ff9b 	bl	800b608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6d2:	e019      	b.n	800a708 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d103      	bne.n	800a6e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 ff92 	bl	800b608 <vPortFree>
	}
 800a6e4:	e010      	b.n	800a708 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d00b      	beq.n	800a708 <prvDeleteTCB+0x58>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	60fb      	str	r3, [r7, #12]
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	e7fd      	b.n	800a704 <prvDeleteTCB+0x54>
	}
 800a708:	bf00      	nop
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a716:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <prvResetNextTaskUnblockTime+0x38>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a720:	4b0a      	ldr	r3, [pc, #40]	@ (800a74c <prvResetNextTaskUnblockTime+0x3c>)
 800a722:	f04f 32ff 	mov.w	r2, #4294967295
 800a726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a728:	e008      	b.n	800a73c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72a:	4b07      	ldr	r3, [pc, #28]	@ (800a748 <prvResetNextTaskUnblockTime+0x38>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4a04      	ldr	r2, [pc, #16]	@ (800a74c <prvResetNextTaskUnblockTime+0x3c>)
 800a73a:	6013      	str	r3, [r2, #0]
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	200010d8 	.word	0x200010d8
 800a74c:	20001140 	.word	0x20001140

0800a750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a756:	4b0b      	ldr	r3, [pc, #44]	@ (800a784 <xTaskGetSchedulerState+0x34>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d102      	bne.n	800a764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a75e:	2301      	movs	r3, #1
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	e008      	b.n	800a776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a764:	4b08      	ldr	r3, [pc, #32]	@ (800a788 <xTaskGetSchedulerState+0x38>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d102      	bne.n	800a772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a76c:	2302      	movs	r3, #2
 800a76e:	607b      	str	r3, [r7, #4]
 800a770:	e001      	b.n	800a776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a772:	2300      	movs	r3, #0
 800a774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a776:	687b      	ldr	r3, [r7, #4]
	}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	2000112c 	.word	0x2000112c
 800a788:	20001148 	.word	0x20001148

0800a78c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d058      	beq.n	800a854 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7a2:	4b2f      	ldr	r3, [pc, #188]	@ (800a860 <xTaskPriorityDisinherit+0xd4>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d00b      	beq.n	800a7c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	60fb      	str	r3, [r7, #12]
}
 800a7be:	bf00      	nop
 800a7c0:	bf00      	nop
 800a7c2:	e7fd      	b.n	800a7c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	60bb      	str	r3, [r7, #8]
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	e7fd      	b.n	800a7e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d02c      	beq.n	800a854 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d128      	bne.n	800a854 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fb3a 	bl	8008e80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a818:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a824:	4b0f      	ldr	r3, [pc, #60]	@ (800a864 <xTaskPriorityDisinherit+0xd8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d903      	bls.n	800a834 <xTaskPriorityDisinherit+0xa8>
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a830:	4a0c      	ldr	r2, [pc, #48]	@ (800a864 <xTaskPriorityDisinherit+0xd8>)
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4a09      	ldr	r2, [pc, #36]	@ (800a868 <xTaskPriorityDisinherit+0xdc>)
 800a842:	441a      	add	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	3304      	adds	r3, #4
 800a848:	4619      	mov	r1, r3
 800a84a:	4610      	mov	r0, r2
 800a84c:	f7fe fabb 	bl	8008dc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a850:	2301      	movs	r3, #1
 800a852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a854:	697b      	ldr	r3, [r7, #20]
	}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20000c4c 	.word	0x20000c4c
 800a864:	20001128 	.word	0x20001128
 800a868:	20000c50 	.word	0x20000c50

0800a86c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a876:	4b21      	ldr	r3, [pc, #132]	@ (800a8fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a87c:	4b20      	ldr	r3, [pc, #128]	@ (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3304      	adds	r3, #4
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fafc 	bl	8008e80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88e:	d10a      	bne.n	800a8a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d007      	beq.n	800a8a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a896:	4b1a      	ldr	r3, [pc, #104]	@ (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	4819      	ldr	r0, [pc, #100]	@ (800a904 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8a0:	f7fe fa91 	bl	8008dc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8a4:	e026      	b.n	800a8f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8ae:	4b14      	ldr	r3, [pc, #80]	@ (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d209      	bcs.n	800a8d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8be:	4b12      	ldr	r3, [pc, #72]	@ (800a908 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	f7fe fa9f 	bl	8008e0e <vListInsert>
}
 800a8d0:	e010      	b.n	800a8f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a90c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f7fe fa95 	bl	8008e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a910 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d202      	bcs.n	800a8f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8ee:	4a08      	ldr	r2, [pc, #32]	@ (800a910 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20001124 	.word	0x20001124
 800a900:	20000c4c 	.word	0x20000c4c
 800a904:	2000110c 	.word	0x2000110c
 800a908:	200010dc 	.word	0x200010dc
 800a90c:	200010d8 	.word	0x200010d8
 800a910:	20001140 	.word	0x20001140

0800a914 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08a      	sub	sp, #40	@ 0x28
 800a918:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a91e:	f000 fb13 	bl	800af48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a922:	4b1d      	ldr	r3, [pc, #116]	@ (800a998 <xTimerCreateTimerTask+0x84>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d021      	beq.n	800a96e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a932:	1d3a      	adds	r2, r7, #4
 800a934:	f107 0108 	add.w	r1, r7, #8
 800a938:	f107 030c 	add.w	r3, r7, #12
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe f9fb 	bl	8008d38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	9202      	str	r2, [sp, #8]
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	2302      	movs	r3, #2
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	2300      	movs	r3, #0
 800a952:	460a      	mov	r2, r1
 800a954:	4911      	ldr	r1, [pc, #68]	@ (800a99c <xTimerCreateTimerTask+0x88>)
 800a956:	4812      	ldr	r0, [pc, #72]	@ (800a9a0 <xTimerCreateTimerTask+0x8c>)
 800a958:	f7ff f874 	bl	8009a44 <xTaskCreateStatic>
 800a95c:	4603      	mov	r3, r0
 800a95e:	4a11      	ldr	r2, [pc, #68]	@ (800a9a4 <xTimerCreateTimerTask+0x90>)
 800a960:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a962:	4b10      	ldr	r3, [pc, #64]	@ (800a9a4 <xTimerCreateTimerTask+0x90>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a96a:	2301      	movs	r3, #1
 800a96c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	613b      	str	r3, [r7, #16]
}
 800a986:	bf00      	nop
 800a988:	bf00      	nop
 800a98a:	e7fd      	b.n	800a988 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a98c:	697b      	ldr	r3, [r7, #20]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	2000117c 	.word	0x2000117c
 800a99c:	0800b918 	.word	0x0800b918
 800a9a0:	0800aae1 	.word	0x0800aae1
 800a9a4:	20001180 	.word	0x20001180

0800a9a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	@ 0x28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10b      	bne.n	800a9d8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	623b      	str	r3, [r7, #32]
}
 800a9d2:	bf00      	nop
 800a9d4:	bf00      	nop
 800a9d6:	e7fd      	b.n	800a9d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9d8:	4b19      	ldr	r3, [pc, #100]	@ (800aa40 <xTimerGenericCommand+0x98>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d02a      	beq.n	800aa36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b05      	cmp	r3, #5
 800a9f0:	dc18      	bgt.n	800aa24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9f2:	f7ff fead 	bl	800a750 <xTaskGetSchedulerState>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d109      	bne.n	800aa10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9fc:	4b10      	ldr	r3, [pc, #64]	@ (800aa40 <xTimerGenericCommand+0x98>)
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	f107 0110 	add.w	r1, r7, #16
 800aa04:	2300      	movs	r3, #0
 800aa06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa08:	f7fe fbaa 	bl	8009160 <xQueueGenericSend>
 800aa0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa0e:	e012      	b.n	800aa36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa10:	4b0b      	ldr	r3, [pc, #44]	@ (800aa40 <xTimerGenericCommand+0x98>)
 800aa12:	6818      	ldr	r0, [r3, #0]
 800aa14:	f107 0110 	add.w	r1, r7, #16
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f7fe fba0 	bl	8009160 <xQueueGenericSend>
 800aa20:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa22:	e008      	b.n	800aa36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa24:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <xTimerGenericCommand+0x98>)
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	f107 0110 	add.w	r1, r7, #16
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	f7fe fc98 	bl	8009364 <xQueueGenericSendFromISR>
 800aa34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3728      	adds	r7, #40	@ 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	2000117c 	.word	0x2000117c

0800aa44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4e:	4b23      	ldr	r3, [pc, #140]	@ (800aadc <prvProcessExpiredTimer+0x98>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe fa0f 	bl	8008e80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d023      	beq.n	800aab8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	699a      	ldr	r2, [r3, #24]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	18d1      	adds	r1, r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	6978      	ldr	r0, [r7, #20]
 800aa7e:	f000 f8d5 	bl	800ac2c <prvInsertTimerInActiveList>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d020      	beq.n	800aaca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	2100      	movs	r1, #0
 800aa92:	6978      	ldr	r0, [r7, #20]
 800aa94:	f7ff ff88 	bl	800a9a8 <xTimerGenericCommand>
 800aa98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d114      	bne.n	800aaca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	e7fd      	b.n	800aab4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	4798      	blx	r3
}
 800aad2:	bf00      	nop
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20001174 	.word	0x20001174

0800aae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aae8:	f107 0308 	add.w	r3, r7, #8
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 f859 	bl	800aba4 <prvGetNextExpireTime>
 800aaf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 f805 	bl	800ab08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aafe:	f000 f8d7 	bl	800acb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab02:	bf00      	nop
 800ab04:	e7f0      	b.n	800aae8 <prvTimerTask+0x8>
	...

0800ab08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab12:	f7ff fa25 	bl	8009f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f866 	bl	800abec <prvSampleTimeNow>
 800ab20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d130      	bne.n	800ab8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10a      	bne.n	800ab44 <prvProcessTimerOrBlockTask+0x3c>
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d806      	bhi.n	800ab44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab36:	f7ff fa21 	bl	8009f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff ff81 	bl	800aa44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab42:	e024      	b.n	800ab8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d008      	beq.n	800ab5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab4a:	4b13      	ldr	r3, [pc, #76]	@ (800ab98 <prvProcessTimerOrBlockTask+0x90>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <prvProcessTimerOrBlockTask+0x50>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e000      	b.n	800ab5a <prvProcessTimerOrBlockTask+0x52>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab9c <prvProcessTimerOrBlockTask+0x94>)
 800ab5e:	6818      	ldr	r0, [r3, #0]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f7fe ff37 	bl	80099dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab6e:	f7ff fa05 	bl	8009f7c <xTaskResumeAll>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab78:	4b09      	ldr	r3, [pc, #36]	@ (800aba0 <prvProcessTimerOrBlockTask+0x98>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
}
 800ab88:	e001      	b.n	800ab8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab8a:	f7ff f9f7 	bl	8009f7c <xTaskResumeAll>
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20001178 	.word	0x20001178
 800ab9c:	2000117c 	.word	0x2000117c
 800aba0:	e000ed04 	.word	0xe000ed04

0800aba4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abac:	4b0e      	ldr	r3, [pc, #56]	@ (800abe8 <prvGetNextExpireTime+0x44>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <prvGetNextExpireTime+0x16>
 800abb6:	2201      	movs	r2, #1
 800abb8:	e000      	b.n	800abbc <prvGetNextExpireTime+0x18>
 800abba:	2200      	movs	r2, #0
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d105      	bne.n	800abd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abc8:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <prvGetNextExpireTime+0x44>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e001      	b.n	800abd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800abd8:	68fb      	ldr	r3, [r7, #12]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20001174 	.word	0x20001174

0800abec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abf4:	f7ff fa60 	bl	800a0b8 <xTaskGetTickCount>
 800abf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ac28 <prvSampleTimeNow+0x3c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d205      	bcs.n	800ac10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac04:	f000 f93a 	bl	800ae7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	e002      	b.n	800ac16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac16:	4a04      	ldr	r2, [pc, #16]	@ (800ac28 <prvSampleTimeNow+0x3c>)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20001184 	.word	0x20001184

0800ac2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d812      	bhi.n	800ac78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	1ad2      	subs	r2, r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d302      	bcc.n	800ac66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac60:	2301      	movs	r3, #1
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	e01b      	b.n	800ac9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac66:	4b10      	ldr	r3, [pc, #64]	@ (800aca8 <prvInsertTimerInActiveList+0x7c>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fe f8cc 	bl	8008e0e <vListInsert>
 800ac76:	e012      	b.n	800ac9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d206      	bcs.n	800ac8e <prvInsertTimerInActiveList+0x62>
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d302      	bcc.n	800ac8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	e007      	b.n	800ac9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac8e:	4b07      	ldr	r3, [pc, #28]	@ (800acac <prvInsertTimerInActiveList+0x80>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3304      	adds	r3, #4
 800ac96:	4619      	mov	r1, r3
 800ac98:	4610      	mov	r0, r2
 800ac9a:	f7fe f8b8 	bl	8008e0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac9e:	697b      	ldr	r3, [r7, #20]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20001178 	.word	0x20001178
 800acac:	20001174 	.word	0x20001174

0800acb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08e      	sub	sp, #56	@ 0x38
 800acb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acb6:	e0ce      	b.n	800ae56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	da19      	bge.n	800acf2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acbe:	1d3b      	adds	r3, r7, #4
 800acc0:	3304      	adds	r3, #4
 800acc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	61fb      	str	r3, [r7, #28]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ace2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace8:	6850      	ldr	r0, [r2, #4]
 800acea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acec:	6892      	ldr	r2, [r2, #8]
 800acee:	4611      	mov	r1, r2
 800acf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f2c0 80ae 	blt.w	800ae56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d004      	beq.n	800ad10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad08:	3304      	adds	r3, #4
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe f8b8 	bl	8008e80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad10:	463b      	mov	r3, r7
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff ff6a 	bl	800abec <prvSampleTimeNow>
 800ad18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	f200 8097 	bhi.w	800ae50 <prvProcessReceivedCommands+0x1a0>
 800ad22:	a201      	add	r2, pc, #4	@ (adr r2, 800ad28 <prvProcessReceivedCommands+0x78>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad51 	.word	0x0800ad51
 800ad2c:	0800ad51 	.word	0x0800ad51
 800ad30:	0800ad51 	.word	0x0800ad51
 800ad34:	0800adc7 	.word	0x0800adc7
 800ad38:	0800addb 	.word	0x0800addb
 800ad3c:	0800ae27 	.word	0x0800ae27
 800ad40:	0800ad51 	.word	0x0800ad51
 800ad44:	0800ad51 	.word	0x0800ad51
 800ad48:	0800adc7 	.word	0x0800adc7
 800ad4c:	0800addb 	.word	0x0800addb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	18d1      	adds	r1, r2, r3
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad70:	f7ff ff5c 	bl	800ac2c <prvInsertTimerInActiveList>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d06c      	beq.n	800ae54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d061      	beq.n	800ae54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	441a      	add	r2, r3
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2100      	movs	r1, #0
 800ada0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ada2:	f7ff fe01 	bl	800a9a8 <xTimerGenericCommand>
 800ada6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d152      	bne.n	800ae54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	61bb      	str	r3, [r7, #24]
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	e7fd      	b.n	800adc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adcc:	f023 0301 	bic.w	r3, r3, #1
 800add0:	b2da      	uxtb	r2, r3
 800add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800add8:	e03d      	b.n	800ae56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800addc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ade0:	f043 0301 	orr.w	r3, r3, #1
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10b      	bne.n	800ae12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	617b      	str	r3, [r7, #20]
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	e7fd      	b.n	800ae0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae14:	699a      	ldr	r2, [r3, #24]
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	18d1      	adds	r1, r2, r3
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae20:	f7ff ff04 	bl	800ac2c <prvInsertTimerInActiveList>
					break;
 800ae24:	e017      	b.n	800ae56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae2c:	f003 0302 	and.w	r3, r3, #2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d103      	bne.n	800ae3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae36:	f000 fbe7 	bl	800b608 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae3a:	e00c      	b.n	800ae56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae42:	f023 0301 	bic.w	r3, r3, #1
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae4e:	e002      	b.n	800ae56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae50:	bf00      	nop
 800ae52:	e000      	b.n	800ae56 <prvProcessReceivedCommands+0x1a6>
					break;
 800ae54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae56:	4b08      	ldr	r3, [pc, #32]	@ (800ae78 <prvProcessReceivedCommands+0x1c8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	1d39      	adds	r1, r7, #4
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe fb1e 	bl	80094a0 <xQueueReceive>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f47f af26 	bne.w	800acb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	3730      	adds	r7, #48	@ 0x30
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	2000117c 	.word	0x2000117c

0800ae7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae82:	e049      	b.n	800af18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae84:	4b2e      	ldr	r3, [pc, #184]	@ (800af40 <prvSwitchTimerLists+0xc4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae8e:	4b2c      	ldr	r3, [pc, #176]	@ (800af40 <prvSwitchTimerLists+0xc4>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fd ffef 	bl	8008e80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d02f      	beq.n	800af18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4413      	add	r3, r2
 800aec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d90e      	bls.n	800aee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aed6:	4b1a      	ldr	r3, [pc, #104]	@ (800af40 <prvSwitchTimerLists+0xc4>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3304      	adds	r3, #4
 800aede:	4619      	mov	r1, r3
 800aee0:	4610      	mov	r0, r2
 800aee2:	f7fd ff94 	bl	8008e0e <vListInsert>
 800aee6:	e017      	b.n	800af18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aee8:	2300      	movs	r3, #0
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	2300      	movs	r3, #0
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	2100      	movs	r1, #0
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fd58 	bl	800a9a8 <xTimerGenericCommand>
 800aef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10b      	bne.n	800af18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	603b      	str	r3, [r7, #0]
}
 800af12:	bf00      	nop
 800af14:	bf00      	nop
 800af16:	e7fd      	b.n	800af14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af18:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <prvSwitchTimerLists+0xc4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1b0      	bne.n	800ae84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af22:	4b07      	ldr	r3, [pc, #28]	@ (800af40 <prvSwitchTimerLists+0xc4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af28:	4b06      	ldr	r3, [pc, #24]	@ (800af44 <prvSwitchTimerLists+0xc8>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a04      	ldr	r2, [pc, #16]	@ (800af40 <prvSwitchTimerLists+0xc4>)
 800af2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af30:	4a04      	ldr	r2, [pc, #16]	@ (800af44 <prvSwitchTimerLists+0xc8>)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	6013      	str	r3, [r2, #0]
}
 800af36:	bf00      	nop
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20001174 	.word	0x20001174
 800af44:	20001178 	.word	0x20001178

0800af48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af4e:	f000 f96b 	bl	800b228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af52:	4b15      	ldr	r3, [pc, #84]	@ (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d120      	bne.n	800af9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af5a:	4814      	ldr	r0, [pc, #80]	@ (800afac <prvCheckForValidListAndQueue+0x64>)
 800af5c:	f7fd ff06 	bl	8008d6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af60:	4813      	ldr	r0, [pc, #76]	@ (800afb0 <prvCheckForValidListAndQueue+0x68>)
 800af62:	f7fd ff03 	bl	8008d6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af66:	4b13      	ldr	r3, [pc, #76]	@ (800afb4 <prvCheckForValidListAndQueue+0x6c>)
 800af68:	4a10      	ldr	r2, [pc, #64]	@ (800afac <prvCheckForValidListAndQueue+0x64>)
 800af6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af6c:	4b12      	ldr	r3, [pc, #72]	@ (800afb8 <prvCheckForValidListAndQueue+0x70>)
 800af6e:	4a10      	ldr	r2, [pc, #64]	@ (800afb0 <prvCheckForValidListAndQueue+0x68>)
 800af70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af72:	2300      	movs	r3, #0
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	4b11      	ldr	r3, [pc, #68]	@ (800afbc <prvCheckForValidListAndQueue+0x74>)
 800af78:	4a11      	ldr	r2, [pc, #68]	@ (800afc0 <prvCheckForValidListAndQueue+0x78>)
 800af7a:	2110      	movs	r1, #16
 800af7c:	200a      	movs	r0, #10
 800af7e:	f7fe f813 	bl	8008fa8 <xQueueGenericCreateStatic>
 800af82:	4603      	mov	r3, r0
 800af84:	4a08      	ldr	r2, [pc, #32]	@ (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af88:	4b07      	ldr	r3, [pc, #28]	@ (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	490b      	ldr	r1, [pc, #44]	@ (800afc4 <prvCheckForValidListAndQueue+0x7c>)
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fcf6 	bl	8009988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af9c:	f000 f976 	bl	800b28c <vPortExitCritical>
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	2000117c 	.word	0x2000117c
 800afac:	2000114c 	.word	0x2000114c
 800afb0:	20001160 	.word	0x20001160
 800afb4:	20001174 	.word	0x20001174
 800afb8:	20001178 	.word	0x20001178
 800afbc:	20001228 	.word	0x20001228
 800afc0:	20001188 	.word	0x20001188
 800afc4:	0800b920 	.word	0x0800b920

0800afc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	3b04      	subs	r3, #4
 800afd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800afe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3b04      	subs	r3, #4
 800afe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f023 0201 	bic.w	r2, r3, #1
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3b04      	subs	r3, #4
 800aff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aff8:	4a0c      	ldr	r2, [pc, #48]	@ (800b02c <pxPortInitialiseStack+0x64>)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3b14      	subs	r3, #20
 800b002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3b04      	subs	r3, #4
 800b00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f06f 0202 	mvn.w	r2, #2
 800b016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3b20      	subs	r3, #32
 800b01c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b01e:	68fb      	ldr	r3, [r7, #12]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	0800b031 	.word	0x0800b031

0800b030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b036:	2300      	movs	r3, #0
 800b038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b03a:	4b13      	ldr	r3, [pc, #76]	@ (800b088 <prvTaskExitError+0x58>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b042:	d00b      	beq.n	800b05c <prvTaskExitError+0x2c>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	60fb      	str	r3, [r7, #12]
}
 800b056:	bf00      	nop
 800b058:	bf00      	nop
 800b05a:	e7fd      	b.n	800b058 <prvTaskExitError+0x28>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60bb      	str	r3, [r7, #8]
}
 800b06e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b070:	bf00      	nop
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0fc      	beq.n	800b072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	2000000c 	.word	0x2000000c
 800b08c:	00000000 	.word	0x00000000

0800b090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b090:	4b07      	ldr	r3, [pc, #28]	@ (800b0b0 <pxCurrentTCBConst2>)
 800b092:	6819      	ldr	r1, [r3, #0]
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	f380 8809 	msr	PSP, r0
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f04f 0000 	mov.w	r0, #0
 800b0a6:	f380 8811 	msr	BASEPRI, r0
 800b0aa:	4770      	bx	lr
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <pxCurrentTCBConst2>:
 800b0b0:	20000c4c 	.word	0x20000c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0b8:	4808      	ldr	r0, [pc, #32]	@ (800b0dc <prvPortStartFirstTask+0x24>)
 800b0ba:	6800      	ldr	r0, [r0, #0]
 800b0bc:	6800      	ldr	r0, [r0, #0]
 800b0be:	f380 8808 	msr	MSP, r0
 800b0c2:	f04f 0000 	mov.w	r0, #0
 800b0c6:	f380 8814 	msr	CONTROL, r0
 800b0ca:	b662      	cpsie	i
 800b0cc:	b661      	cpsie	f
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	df00      	svc	0
 800b0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0da:	bf00      	nop
 800b0dc:	e000ed08 	.word	0xe000ed08

0800b0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0e6:	4b47      	ldr	r3, [pc, #284]	@ (800b204 <xPortStartScheduler+0x124>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a47      	ldr	r2, [pc, #284]	@ (800b208 <xPortStartScheduler+0x128>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d10b      	bne.n	800b108 <xPortStartScheduler+0x28>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60fb      	str	r3, [r7, #12]
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	e7fd      	b.n	800b104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b108:	4b3e      	ldr	r3, [pc, #248]	@ (800b204 <xPortStartScheduler+0x124>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a3f      	ldr	r2, [pc, #252]	@ (800b20c <xPortStartScheduler+0x12c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d10b      	bne.n	800b12a <xPortStartScheduler+0x4a>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	613b      	str	r3, [r7, #16]
}
 800b124:	bf00      	nop
 800b126:	bf00      	nop
 800b128:	e7fd      	b.n	800b126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b12a:	4b39      	ldr	r3, [pc, #228]	@ (800b210 <xPortStartScheduler+0x130>)
 800b12c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	22ff      	movs	r2, #255	@ 0xff
 800b13a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	4b31      	ldr	r3, [pc, #196]	@ (800b214 <xPortStartScheduler+0x134>)
 800b150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b152:	4b31      	ldr	r3, [pc, #196]	@ (800b218 <xPortStartScheduler+0x138>)
 800b154:	2207      	movs	r2, #7
 800b156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b158:	e009      	b.n	800b16e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b15a:	4b2f      	ldr	r3, [pc, #188]	@ (800b218 <xPortStartScheduler+0x138>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3b01      	subs	r3, #1
 800b160:	4a2d      	ldr	r2, [pc, #180]	@ (800b218 <xPortStartScheduler+0x138>)
 800b162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	b2db      	uxtb	r3, r3
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b176:	2b80      	cmp	r3, #128	@ 0x80
 800b178:	d0ef      	beq.n	800b15a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b17a:	4b27      	ldr	r3, [pc, #156]	@ (800b218 <xPortStartScheduler+0x138>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f1c3 0307 	rsb	r3, r3, #7
 800b182:	2b04      	cmp	r3, #4
 800b184:	d00b      	beq.n	800b19e <xPortStartScheduler+0xbe>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	60bb      	str	r3, [r7, #8]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b19e:	4b1e      	ldr	r3, [pc, #120]	@ (800b218 <xPortStartScheduler+0x138>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b218 <xPortStartScheduler+0x138>)
 800b1a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b218 <xPortStartScheduler+0x138>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1b0:	4a19      	ldr	r2, [pc, #100]	@ (800b218 <xPortStartScheduler+0x138>)
 800b1b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1bc:	4b17      	ldr	r3, [pc, #92]	@ (800b21c <xPortStartScheduler+0x13c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a16      	ldr	r2, [pc, #88]	@ (800b21c <xPortStartScheduler+0x13c>)
 800b1c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b1c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1c8:	4b14      	ldr	r3, [pc, #80]	@ (800b21c <xPortStartScheduler+0x13c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a13      	ldr	r2, [pc, #76]	@ (800b21c <xPortStartScheduler+0x13c>)
 800b1ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b1d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1d4:	f000 f8da 	bl	800b38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1d8:	4b11      	ldr	r3, [pc, #68]	@ (800b220 <xPortStartScheduler+0x140>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1de:	f000 f8f9 	bl	800b3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1e2:	4b10      	ldr	r3, [pc, #64]	@ (800b224 <xPortStartScheduler+0x144>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b224 <xPortStartScheduler+0x144>)
 800b1e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b1ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1ee:	f7ff ff63 	bl	800b0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1f2:	f7ff f83d 	bl	800a270 <vTaskSwitchContext>
	prvTaskExitError();
 800b1f6:	f7ff ff1b 	bl	800b030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	e000ed00 	.word	0xe000ed00
 800b208:	410fc271 	.word	0x410fc271
 800b20c:	410fc270 	.word	0x410fc270
 800b210:	e000e400 	.word	0xe000e400
 800b214:	20001278 	.word	0x20001278
 800b218:	2000127c 	.word	0x2000127c
 800b21c:	e000ed20 	.word	0xe000ed20
 800b220:	2000000c 	.word	0x2000000c
 800b224:	e000ef34 	.word	0xe000ef34

0800b228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	607b      	str	r3, [r7, #4]
}
 800b240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b242:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <vPortEnterCritical+0x5c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3301      	adds	r3, #1
 800b248:	4a0e      	ldr	r2, [pc, #56]	@ (800b284 <vPortEnterCritical+0x5c>)
 800b24a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b24c:	4b0d      	ldr	r3, [pc, #52]	@ (800b284 <vPortEnterCritical+0x5c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d110      	bne.n	800b276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b254:	4b0c      	ldr	r3, [pc, #48]	@ (800b288 <vPortEnterCritical+0x60>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00b      	beq.n	800b276 <vPortEnterCritical+0x4e>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	603b      	str	r3, [r7, #0]
}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	e7fd      	b.n	800b272 <vPortEnterCritical+0x4a>
	}
}
 800b276:	bf00      	nop
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	2000000c 	.word	0x2000000c
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b292:	4b12      	ldr	r3, [pc, #72]	@ (800b2dc <vPortExitCritical+0x50>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10b      	bne.n	800b2b2 <vPortExitCritical+0x26>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	607b      	str	r3, [r7, #4]
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	e7fd      	b.n	800b2ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <vPortExitCritical+0x50>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	4a08      	ldr	r2, [pc, #32]	@ (800b2dc <vPortExitCritical+0x50>)
 800b2ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2bc:	4b07      	ldr	r3, [pc, #28]	@ (800b2dc <vPortExitCritical+0x50>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d105      	bne.n	800b2d0 <vPortExitCritical+0x44>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	f383 8811 	msr	BASEPRI, r3
}
 800b2ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	2000000c 	.word	0x2000000c

0800b2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2e0:	f3ef 8009 	mrs	r0, PSP
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	4b15      	ldr	r3, [pc, #84]	@ (800b340 <pxCurrentTCBConst>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	f01e 0f10 	tst.w	lr, #16
 800b2f0:	bf08      	it	eq
 800b2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	6010      	str	r0, [r2, #0]
 800b2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b304:	f380 8811 	msr	BASEPRI, r0
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f7fe ffae 	bl	800a270 <vTaskSwitchContext>
 800b314:	f04f 0000 	mov.w	r0, #0
 800b318:	f380 8811 	msr	BASEPRI, r0
 800b31c:	bc09      	pop	{r0, r3}
 800b31e:	6819      	ldr	r1, [r3, #0]
 800b320:	6808      	ldr	r0, [r1, #0]
 800b322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b326:	f01e 0f10 	tst.w	lr, #16
 800b32a:	bf08      	it	eq
 800b32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b330:	f380 8809 	msr	PSP, r0
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w

0800b340 <pxCurrentTCBConst>:
 800b340:	20000c4c 	.word	0x20000c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop

0800b348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	607b      	str	r3, [r7, #4]
}
 800b360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b362:	f7fe fecb 	bl	800a0fc <xTaskIncrementTick>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b36c:	4b06      	ldr	r3, [pc, #24]	@ (800b388 <xPortSysTickHandler+0x40>)
 800b36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	2300      	movs	r3, #0
 800b376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	f383 8811 	msr	BASEPRI, r3
}
 800b37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b390:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c0 <vPortSetupTimerInterrupt+0x34>)
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b396:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c4 <vPortSetupTimerInterrupt+0x38>)
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b39c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c8 <vPortSetupTimerInterrupt+0x3c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b3cc <vPortSetupTimerInterrupt+0x40>)
 800b3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a6:	099b      	lsrs	r3, r3, #6
 800b3a8:	4a09      	ldr	r2, [pc, #36]	@ (800b3d0 <vPortSetupTimerInterrupt+0x44>)
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3ae:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <vPortSetupTimerInterrupt+0x34>)
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	601a      	str	r2, [r3, #0]
}
 800b3b4:	bf00      	nop
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	e000e010 	.word	0xe000e010
 800b3c4:	e000e018 	.word	0xe000e018
 800b3c8:	20000000 	.word	0x20000000
 800b3cc:	10624dd3 	.word	0x10624dd3
 800b3d0:	e000e014 	.word	0xe000e014

0800b3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b3e4 <vPortEnableVFP+0x10>
 800b3d8:	6801      	ldr	r1, [r0, #0]
 800b3da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b3de:	6001      	str	r1, [r0, #0]
 800b3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3e2:	bf00      	nop
 800b3e4:	e000ed88 	.word	0xe000ed88

0800b3e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3ee:	f3ef 8305 	mrs	r3, IPSR
 800b3f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b0f      	cmp	r3, #15
 800b3f8:	d915      	bls.n	800b426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3fa:	4a18      	ldr	r2, [pc, #96]	@ (800b45c <vPortValidateInterruptPriority+0x74>)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4413      	add	r3, r2
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b404:	4b16      	ldr	r3, [pc, #88]	@ (800b460 <vPortValidateInterruptPriority+0x78>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	7afa      	ldrb	r2, [r7, #11]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d20b      	bcs.n	800b426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	607b      	str	r3, [r7, #4]
}
 800b420:	bf00      	nop
 800b422:	bf00      	nop
 800b424:	e7fd      	b.n	800b422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b426:	4b0f      	ldr	r3, [pc, #60]	@ (800b464 <vPortValidateInterruptPriority+0x7c>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b42e:	4b0e      	ldr	r3, [pc, #56]	@ (800b468 <vPortValidateInterruptPriority+0x80>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d90b      	bls.n	800b44e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	603b      	str	r3, [r7, #0]
}
 800b448:	bf00      	nop
 800b44a:	bf00      	nop
 800b44c:	e7fd      	b.n	800b44a <vPortValidateInterruptPriority+0x62>
	}
 800b44e:	bf00      	nop
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	e000e3f0 	.word	0xe000e3f0
 800b460:	20001278 	.word	0x20001278
 800b464:	e000ed0c 	.word	0xe000ed0c
 800b468:	2000127c 	.word	0x2000127c

0800b46c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08a      	sub	sp, #40	@ 0x28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b478:	f7fe fd72 	bl	8009f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b47c:	4b5c      	ldr	r3, [pc, #368]	@ (800b5f0 <pvPortMalloc+0x184>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b484:	f000 f924 	bl	800b6d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b488:	4b5a      	ldr	r3, [pc, #360]	@ (800b5f4 <pvPortMalloc+0x188>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4013      	ands	r3, r2
 800b490:	2b00      	cmp	r3, #0
 800b492:	f040 8095 	bne.w	800b5c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01e      	beq.n	800b4da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b49c:	2208      	movs	r2, #8
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d015      	beq.n	800b4da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f023 0307 	bic.w	r3, r3, #7
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f003 0307 	and.w	r3, r3, #7
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <pvPortMalloc+0x6e>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	617b      	str	r3, [r7, #20]
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	e7fd      	b.n	800b4d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d06f      	beq.n	800b5c0 <pvPortMalloc+0x154>
 800b4e0:	4b45      	ldr	r3, [pc, #276]	@ (800b5f8 <pvPortMalloc+0x18c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d86a      	bhi.n	800b5c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4ea:	4b44      	ldr	r3, [pc, #272]	@ (800b5fc <pvPortMalloc+0x190>)
 800b4ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4ee:	4b43      	ldr	r3, [pc, #268]	@ (800b5fc <pvPortMalloc+0x190>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4f4:	e004      	b.n	800b500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	429a      	cmp	r2, r3
 800b508:	d903      	bls.n	800b512 <pvPortMalloc+0xa6>
 800b50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1f1      	bne.n	800b4f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b512:	4b37      	ldr	r3, [pc, #220]	@ (800b5f0 <pvPortMalloc+0x184>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b518:	429a      	cmp	r2, r3
 800b51a:	d051      	beq.n	800b5c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2208      	movs	r2, #8
 800b522:	4413      	add	r3, r2
 800b524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	685a      	ldr	r2, [r3, #4]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	1ad2      	subs	r2, r2, r3
 800b536:	2308      	movs	r3, #8
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d920      	bls.n	800b580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b53e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4413      	add	r3, r2
 800b544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	f003 0307 	and.w	r3, r3, #7
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <pvPortMalloc+0xfc>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	613b      	str	r3, [r7, #16]
}
 800b562:	bf00      	nop
 800b564:	bf00      	nop
 800b566:	e7fd      	b.n	800b564 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	1ad2      	subs	r2, r2, r3
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b57a:	69b8      	ldr	r0, [r7, #24]
 800b57c:	f000 f90a 	bl	800b794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b580:	4b1d      	ldr	r3, [pc, #116]	@ (800b5f8 <pvPortMalloc+0x18c>)
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	4a1b      	ldr	r2, [pc, #108]	@ (800b5f8 <pvPortMalloc+0x18c>)
 800b58c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b58e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f8 <pvPortMalloc+0x18c>)
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	4b1b      	ldr	r3, [pc, #108]	@ (800b600 <pvPortMalloc+0x194>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	429a      	cmp	r2, r3
 800b598:	d203      	bcs.n	800b5a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b59a:	4b17      	ldr	r3, [pc, #92]	@ (800b5f8 <pvPortMalloc+0x18c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a18      	ldr	r2, [pc, #96]	@ (800b600 <pvPortMalloc+0x194>)
 800b5a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	4b13      	ldr	r3, [pc, #76]	@ (800b5f4 <pvPortMalloc+0x188>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5b6:	4b13      	ldr	r3, [pc, #76]	@ (800b604 <pvPortMalloc+0x198>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	4a11      	ldr	r2, [pc, #68]	@ (800b604 <pvPortMalloc+0x198>)
 800b5be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5c0:	f7fe fcdc 	bl	8009f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00b      	beq.n	800b5e6 <pvPortMalloc+0x17a>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	60fb      	str	r3, [r7, #12]
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	e7fd      	b.n	800b5e2 <pvPortMalloc+0x176>
	return pvReturn;
 800b5e6:	69fb      	ldr	r3, [r7, #28]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3728      	adds	r7, #40	@ 0x28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20004e88 	.word	0x20004e88
 800b5f4:	20004e9c 	.word	0x20004e9c
 800b5f8:	20004e8c 	.word	0x20004e8c
 800b5fc:	20004e80 	.word	0x20004e80
 800b600:	20004e90 	.word	0x20004e90
 800b604:	20004e94 	.word	0x20004e94

0800b608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d04f      	beq.n	800b6ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b61a:	2308      	movs	r3, #8
 800b61c:	425b      	negs	r3, r3
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	4413      	add	r3, r2
 800b622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	4b25      	ldr	r3, [pc, #148]	@ (800b6c4 <vPortFree+0xbc>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4013      	ands	r3, r2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10b      	bne.n	800b64e <vPortFree+0x46>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	60fb      	str	r3, [r7, #12]
}
 800b648:	bf00      	nop
 800b64a:	bf00      	nop
 800b64c:	e7fd      	b.n	800b64a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <vPortFree+0x66>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	60bb      	str	r3, [r7, #8]
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e7fd      	b.n	800b66a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	4b14      	ldr	r3, [pc, #80]	@ (800b6c4 <vPortFree+0xbc>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4013      	ands	r3, r2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01e      	beq.n	800b6ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d11a      	bne.n	800b6ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c4 <vPortFree+0xbc>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	43db      	mvns	r3, r3
 800b68e:	401a      	ands	r2, r3
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b694:	f7fe fc64 	bl	8009f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c8 <vPortFree+0xc0>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	4a09      	ldr	r2, [pc, #36]	@ (800b6c8 <vPortFree+0xc0>)
 800b6a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6a6:	6938      	ldr	r0, [r7, #16]
 800b6a8:	f000 f874 	bl	800b794 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6ac:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <vPortFree+0xc4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	4a06      	ldr	r2, [pc, #24]	@ (800b6cc <vPortFree+0xc4>)
 800b6b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6b6:	f7fe fc61 	bl	8009f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6ba:	bf00      	nop
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20004e9c 	.word	0x20004e9c
 800b6c8:	20004e8c 	.word	0x20004e8c
 800b6cc:	20004e98 	.word	0x20004e98

0800b6d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b6da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6dc:	4b27      	ldr	r3, [pc, #156]	@ (800b77c <prvHeapInit+0xac>)
 800b6de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f003 0307 	and.w	r3, r3, #7
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00c      	beq.n	800b704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3307      	adds	r3, #7
 800b6ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0307 	bic.w	r3, r3, #7
 800b6f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	4a1f      	ldr	r2, [pc, #124]	@ (800b77c <prvHeapInit+0xac>)
 800b700:	4413      	add	r3, r2
 800b702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b708:	4a1d      	ldr	r2, [pc, #116]	@ (800b780 <prvHeapInit+0xb0>)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b70e:	4b1c      	ldr	r3, [pc, #112]	@ (800b780 <prvHeapInit+0xb0>)
 800b710:	2200      	movs	r2, #0
 800b712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	4413      	add	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b71c:	2208      	movs	r2, #8
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	1a9b      	subs	r3, r3, r2
 800b722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f023 0307 	bic.w	r3, r3, #7
 800b72a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4a15      	ldr	r2, [pc, #84]	@ (800b784 <prvHeapInit+0xb4>)
 800b730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b732:	4b14      	ldr	r3, [pc, #80]	@ (800b784 <prvHeapInit+0xb4>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2200      	movs	r2, #0
 800b738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b73a:	4b12      	ldr	r3, [pc, #72]	@ (800b784 <prvHeapInit+0xb4>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	1ad2      	subs	r2, r2, r3
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b750:	4b0c      	ldr	r3, [pc, #48]	@ (800b784 <prvHeapInit+0xb4>)
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4a0a      	ldr	r2, [pc, #40]	@ (800b788 <prvHeapInit+0xb8>)
 800b75e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	4a09      	ldr	r2, [pc, #36]	@ (800b78c <prvHeapInit+0xbc>)
 800b766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b768:	4b09      	ldr	r3, [pc, #36]	@ (800b790 <prvHeapInit+0xc0>)
 800b76a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b76e:	601a      	str	r2, [r3, #0]
}
 800b770:	bf00      	nop
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	20001280 	.word	0x20001280
 800b780:	20004e80 	.word	0x20004e80
 800b784:	20004e88 	.word	0x20004e88
 800b788:	20004e90 	.word	0x20004e90
 800b78c:	20004e8c 	.word	0x20004e8c
 800b790:	20004e9c 	.word	0x20004e9c

0800b794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b79c:	4b28      	ldr	r3, [pc, #160]	@ (800b840 <prvInsertBlockIntoFreeList+0xac>)
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e002      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x14>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d8f7      	bhi.n	800b7a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	4413      	add	r3, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d108      	bne.n	800b7d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	441a      	add	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	441a      	add	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d118      	bne.n	800b81c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	4b15      	ldr	r3, [pc, #84]	@ (800b844 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d00d      	beq.n	800b812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	441a      	add	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	601a      	str	r2, [r3, #0]
 800b810:	e008      	b.n	800b824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b812:	4b0c      	ldr	r3, [pc, #48]	@ (800b844 <prvInsertBlockIntoFreeList+0xb0>)
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	e003      	b.n	800b824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d002      	beq.n	800b832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b832:	bf00      	nop
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20004e80 	.word	0x20004e80
 800b844:	20004e88 	.word	0x20004e88

0800b848 <memset>:
 800b848:	4402      	add	r2, r0
 800b84a:	4603      	mov	r3, r0
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d100      	bne.n	800b852 <memset+0xa>
 800b850:	4770      	bx	lr
 800b852:	f803 1b01 	strb.w	r1, [r3], #1
 800b856:	e7f9      	b.n	800b84c <memset+0x4>

0800b858 <__libc_init_array>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	4d0d      	ldr	r5, [pc, #52]	@ (800b890 <__libc_init_array+0x38>)
 800b85c:	4c0d      	ldr	r4, [pc, #52]	@ (800b894 <__libc_init_array+0x3c>)
 800b85e:	1b64      	subs	r4, r4, r5
 800b860:	10a4      	asrs	r4, r4, #2
 800b862:	2600      	movs	r6, #0
 800b864:	42a6      	cmp	r6, r4
 800b866:	d109      	bne.n	800b87c <__libc_init_array+0x24>
 800b868:	4d0b      	ldr	r5, [pc, #44]	@ (800b898 <__libc_init_array+0x40>)
 800b86a:	4c0c      	ldr	r4, [pc, #48]	@ (800b89c <__libc_init_array+0x44>)
 800b86c:	f000 f826 	bl	800b8bc <_init>
 800b870:	1b64      	subs	r4, r4, r5
 800b872:	10a4      	asrs	r4, r4, #2
 800b874:	2600      	movs	r6, #0
 800b876:	42a6      	cmp	r6, r4
 800b878:	d105      	bne.n	800b886 <__libc_init_array+0x2e>
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b880:	4798      	blx	r3
 800b882:	3601      	adds	r6, #1
 800b884:	e7ee      	b.n	800b864 <__libc_init_array+0xc>
 800b886:	f855 3b04 	ldr.w	r3, [r5], #4
 800b88a:	4798      	blx	r3
 800b88c:	3601      	adds	r6, #1
 800b88e:	e7f2      	b.n	800b876 <__libc_init_array+0x1e>
 800b890:	0800b950 	.word	0x0800b950
 800b894:	0800b950 	.word	0x0800b950
 800b898:	0800b950 	.word	0x0800b950
 800b89c:	0800b954 	.word	0x0800b954

0800b8a0 <memcpy>:
 800b8a0:	440a      	add	r2, r1
 800b8a2:	4291      	cmp	r1, r2
 800b8a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8a8:	d100      	bne.n	800b8ac <memcpy+0xc>
 800b8aa:	4770      	bx	lr
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8b6:	4291      	cmp	r1, r2
 800b8b8:	d1f9      	bne.n	800b8ae <memcpy+0xe>
 800b8ba:	bd10      	pop	{r4, pc}

0800b8bc <_init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_fini>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr
