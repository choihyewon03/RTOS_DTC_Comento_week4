
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800b9a4  0800b9a4  0000c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba18  0800ba18  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba18  0800ba18  0000ca18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba20  0800ba20  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba20  0800ba20  0000ca20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba24  0800ba24  0000ca24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ba28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e98  20000010  0800ba38  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ea8  0800ba38  0000dea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0fd  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004263  00000000  00000000  0002b13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001269  00000000  00000000  00030b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024725  00000000  00000000  00031dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce7e  00000000  00000000  000564e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e257a  00000000  00000000  00073364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001558de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006300  00000000  00000000  00155924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0015bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b98c 	.word	0x0800b98c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800b98c 	.word	0x0800b98c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <App_Main>:
static const float VOLTAGE_SPEC_LOW        = 1.5f;

// Snapshot -> ADC 전압을 저장할 전역 변수
static volatile float g_lastAdcVoltage = 0.0f;

void App_Main(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	@ 0x48
 8000550:	af00      	add	r7, sp, #0

    PMIC_Init(&hi2c1);
 8000552:	4821      	ldr	r0, [pc, #132]	@ (80005d8 <App_Main+0x8c>)
 8000554:	f001 fa4e 	bl	80019f4 <PMIC_Init>
    EEPROM_Init(&hspi1);
 8000558:	4820      	ldr	r0, [pc, #128]	@ (80005dc <App_Main+0x90>)
 800055a:	f001 f9a5 	bl	80018a8 <EEPROM_Init>
    GateDriver_Init(&hspi1);
 800055e:	481f      	ldr	r0, [pc, #124]	@ (80005dc <App_Main+0x90>)
 8000560:	f001 fa22 	bl	80019a8 <GateDriver_Init>
    CAN_Manager_Init(&hcan1);
 8000564:	481e      	ldr	r0, [pc, #120]	@ (80005e0 <App_Main+0x94>)
 8000566:	f001 fa97 	bl	8001a98 <CAN_Manager_Init>

    canRxQueueHandle = osMessageQueueNew(8, 8, NULL); // CAN 수신 데이터(최대 8바이트)
 800056a:	2200      	movs	r2, #0
 800056c:	2108      	movs	r1, #8
 800056e:	2008      	movs	r0, #8
 8000570:	f008 fafc 	bl	8008b6c <osMessageQueueNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <App_Main+0x98>)
 8000578:	6013      	str	r3, [r2, #0]
    dtcStorageQueueHandle = osMessageQueueNew(5, sizeof(uint32_t), NULL); // 저장할 DTC 코드
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	2005      	movs	r0, #5
 8000580:	f008 faf4 	bl	8008b6c <osMessageQueueNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <App_Main+0x9c>)
 8000588:	6013      	str	r3, [r2, #0]

    osThreadNew(Task_1ms_CriticalOps, NULL, &(osThreadAttr_t){.name = "Task_1ms_Critical", .priority = osPriorityHigh});
 800058a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800058e:	2224      	movs	r2, #36	@ 0x24
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00b f9c0 	bl	800b918 <memset>
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <App_Main+0xa0>)
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
 800059c:	2328      	movs	r3, #40	@ 0x28
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a4:	461a      	mov	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <App_Main+0xa4>)
 80005aa:	f008 fa20 	bl	80089ee <osThreadNew>
    osThreadNew(Task_5ms_Monitoring, NULL, &(osThreadAttr_t){.name = "Task_5ms_Monitor", .priority = osPriorityNormal});
 80005ae:	463b      	mov	r3, r7
 80005b0:	2224      	movs	r2, #36	@ 0x24
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f00b f9af 	bl	800b918 <memset>
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <App_Main+0xa8>)
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	2318      	movs	r3, #24
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	463b      	mov	r3, r7
 80005c4:	461a      	mov	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <App_Main+0xac>)
 80005ca:	f008 fa10 	bl	80089ee <osThreadNew>
}
 80005ce:	bf00      	nop
 80005d0:	3748      	adds	r7, #72	@ 0x48
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000a8 	.word	0x200000a8
 80005dc:	200002d0 	.word	0x200002d0
 80005e0:	20000080 	.word	0x20000080
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	20000030 	.word	0x20000030
 80005ec:	0800b9a4 	.word	0x0800b9a4
 80005f0:	080005fd 	.word	0x080005fd
 80005f4:	0800b9b8 	.word	0x0800b9b8
 80005f8:	08000711 	.word	0x08000711

080005fc <Task_1ms_CriticalOps>:

/* 1ms 주기: I2C/SPI/CAN 핵심 제어 Task */
void Task_1ms_CriticalOps(void *argument) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	@ 0x30
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    uint32_t tick;
    FaultType_t pmicFault;
    uint32_t dtcFromAdc;
    uint8_t canRxData[8];

    GateDriver_EnableMotor();
 8000604:	f001 f9e0 	bl	80019c8 <GateDriver_EnableMotor>

    for (;;) {
        tick = osKernelGetTickCount();
 8000608:	f008 f9dc 	bl	80089c4 <osKernelGetTickCount>
 800060c:	62b8      	str	r0, [r7, #40]	@ 0x28

        // 1. PMIC Fault 감지 및 처리
        pmicFault = PMIC_Check_Faults();
 800060e:	f001 fa01 	bl	8001a14 <PMIC_Check_Faults>
 8000612:	4603      	mov	r3, r0
 8000614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (pmicFault != FAULT_TYPE_NONE) {
 8000618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800061c:	2b00      	cmp	r3, #0
 800061e:	d034      	beq.n	800068a <Task_1ms_CriticalOps+0x8e>

        	if (pmicFault == FAULT_TYPE_OV || pmicFault == FAULT_TYPE_OC) {
 8000620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000624:	2b01      	cmp	r3, #1
 8000626:	d003      	beq.n	8000630 <Task_1ms_CriticalOps+0x34>
 8000628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800062c:	2b02      	cmp	r3, #2
 800062e:	d101      	bne.n	8000634 <Task_1ms_CriticalOps+0x38>
        		GateDriver_DisableMotor();
 8000630:	f001 f9d5 	bl	80019de <GateDriver_DisableMotor>
        	}

            uint32_t dtcToStore = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if(pmicFault == FAULT_TYPE_OV) dtcToStore = DTC_PMIC_OV;
 8000638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800063c:	2b01      	cmp	r3, #1
 800063e:	d102      	bne.n	8000646 <Task_1ms_CriticalOps+0x4a>
 8000640:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <Task_1ms_CriticalOps+0xfc>)
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000644:	e00c      	b.n	8000660 <Task_1ms_CriticalOps+0x64>
            else if(pmicFault == FAULT_TYPE_OC) dtcToStore = DTC_PMIC_OC;
 8000646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800064a:	2b02      	cmp	r3, #2
 800064c:	d102      	bne.n	8000654 <Task_1ms_CriticalOps+0x58>
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <Task_1ms_CriticalOps+0x100>)
 8000650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000652:	e005      	b.n	8000660 <Task_1ms_CriticalOps+0x64>
            else if(pmicFault == FAULT_TYPE_UV) dtcToStore = DTC_PMIC_UV;
 8000654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000658:	2b03      	cmp	r3, #3
 800065a:	d101      	bne.n	8000660 <Task_1ms_CriticalOps+0x64>
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <Task_1ms_CriticalOps+0x104>)
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // Snapshot 데이터를 포함한 레코드 생성 및 저장
            DTC_Record_t record = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
            record.dtc_code = dtcToStore;
 800066a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800066c:	613b      	str	r3, [r7, #16]
            record.snapshot_voltage = g_lastAdcVoltage;
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <Task_1ms_CriticalOps+0x108>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	617b      	str	r3, [r7, #20]
            EEPROM_Write_Record(record);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	e893 0003 	ldmia.w	r3, {r0, r1}
 800067c:	f001 f924 	bl	80018c8 <EEPROM_Write_Record>
            CAN_Transmit_DTC_Broadcast(record.dtc_code);
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fa28 	bl	8001ad8 <CAN_Transmit_DTC_Broadcast>
 8000688:	e001      	b.n	800068e <Task_1ms_CriticalOps+0x92>
        } else {
        	GateDriver_EnableMotor();
 800068a:	f001 f99d 	bl	80019c8 <GateDriver_EnableMotor>
        }

        // 2. 5ms Task로부터 온 ADC 관련 DTC 저장 요청 처리
        if (osMessageQueueGet(dtcStorageQueueHandle, &dtcFromAdc, NULL, 0U) == osOK) {
 800068e:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <Task_1ms_CriticalOps+0x10c>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f107 0120 	add.w	r1, r7, #32
 8000696:	2300      	movs	r3, #0
 8000698:	2200      	movs	r2, #0
 800069a:	f008 fb3b 	bl	8008d14 <osMessageQueueGet>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d113      	bne.n	80006cc <Task_1ms_CriticalOps+0xd0>
        	DTC_Record_t record = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
        	record.dtc_code = dtcFromAdc;
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	60bb      	str	r3, [r7, #8]
        	record.snapshot_voltage = g_lastAdcVoltage;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <Task_1ms_CriticalOps+0x108>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	60fb      	str	r3, [r7, #12]
        	EEPROM_Write_Record(record);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006c0:	f001 f902 	bl	80018c8 <EEPROM_Write_Record>
            CAN_Transmit_DTC_Broadcast(record.dtc_code);
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa06 	bl	8001ad8 <CAN_Transmit_DTC_Broadcast>
        }

        // 3. CAN 수신 명령 처리
        if (osMessageQueueGet(canRxQueueHandle, &canRxData, NULL, 0U) == osOK) {
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <Task_1ms_CriticalOps+0x110>)
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	f107 0118 	add.w	r1, r7, #24
 80006d4:	2300      	movs	r3, #0
 80006d6:	2200      	movs	r2, #0
 80006d8:	f008 fb1c 	bl	8008d14 <osMessageQueueGet>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d104      	bne.n	80006ec <Task_1ms_CriticalOps+0xf0>
            Process_CAN_Command(canRxData);
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f87e 	bl	80007e8 <Process_CAN_Command>
        }

        osDelayUntil(tick + 1);
 80006ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ee:	3301      	adds	r3, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	f008 fa0e 	bl	8008b12 <osDelayUntil>
        tick = osKernelGetTickCount();
 80006f6:	e787      	b.n	8000608 <Task_1ms_CriticalOps+0xc>
 80006f8:	c0033333 	.word	0xc0033333
 80006fc:	c0022222 	.word	0xc0022222
 8000700:	c0011111 	.word	0xc0011111
 8000704:	20000034 	.word	0x20000034
 8000708:	20000030 	.word	0x20000030
 800070c:	2000002c 	.word	0x2000002c

08000710 <Task_5ms_Monitoring>:
    }
}

/* 5ms 주기: ADC 모니터링 및 UART 로깅 Task */
void Task_5ms_Monitoring(void *argument) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    uint32_t tick;
    uint32_t adcValue;
    float voltage;
    uint32_t newDtc = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]

    for (;;) {
        tick = osKernelGetTickCount();
 800071c:	f008 f952 	bl	80089c4 <osKernelGetTickCount>
 8000720:	6178      	str	r0, [r7, #20]

        // 1. ADC 전압 모니터링
        HAL_ADC_Start(&hadc1);
 8000722:	4828      	ldr	r0, [pc, #160]	@ (80007c4 <Task_5ms_Monitoring+0xb4>)
 8000724:	f001 fb14 	bl	8001d50 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 8000728:	2101      	movs	r1, #1
 800072a:	4826      	ldr	r0, [pc, #152]	@ (80007c4 <Task_5ms_Monitoring+0xb4>)
 800072c:	f001 fbf7 	bl	8001f1e <HAL_ADC_PollForConversion>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d137      	bne.n	80007a6 <Task_5ms_Monitoring+0x96>
            adcValue = HAL_ADC_GetValue(&hadc1);
 8000736:	4823      	ldr	r0, [pc, #140]	@ (80007c4 <Task_5ms_Monitoring+0xb4>)
 8000738:	f001 fc7c 	bl	8002034 <HAL_ADC_GetValue>
 800073c:	6138      	str	r0, [r7, #16]
            voltage = (adcValue / ADC_RESOLUTION) * V_REF;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	ee07 3a90 	vmov	s15, r3
 8000744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000748:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80007c8 <Task_5ms_Monitoring+0xb8>
 800074c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000750:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80007cc <Task_5ms_Monitoring+0xbc>
 8000754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000758:	edc7 7a03 	vstr	s15, [r7, #12]
            g_lastAdcVoltage = voltage; // voltage update for Snapshot
 800075c:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <Task_5ms_Monitoring+0xc0>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6013      	str	r3, [r2, #0]

            if (voltage > VOLTAGE_SPEC_HIGH) {
 8000762:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8000766:	edd7 7a03 	vldr	s15, [r7, #12]
 800076a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000772:	dd02      	ble.n	800077a <Task_5ms_Monitoring+0x6a>
                newDtc = DTC_BRAKE_VOLTAGE_HIGH;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <Task_5ms_Monitoring+0xc4>)
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	e00a      	b.n	8000790 <Task_5ms_Monitoring+0x80>
            } else if (voltage < VOLTAGE_SPEC_LOW) {
 800077a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800077e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d501      	bpl.n	8000790 <Task_5ms_Monitoring+0x80>
                newDtc = DTC_BRAKE_VOLTAGE_LOW;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <Task_5ms_Monitoring+0xc8>)
 800078e:	60bb      	str	r3, [r7, #8]
            }

            if (newDtc != 0) {
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d007      	beq.n	80007a6 <Task_5ms_Monitoring+0x96>
                // 1ms Task에 DTC 저장을 요청
                osMessageQueuePut(dtcStorageQueueHandle, &newDtc, 0U, 0U);
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <Task_5ms_Monitoring+0xcc>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	f107 0108 	add.w	r1, r7, #8
 800079e:	2300      	movs	r3, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	f008 fa57 	bl	8008c54 <osMessageQueuePut>
            }
        }
        HAL_ADC_Stop(&hadc1);
 80007a6:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <Task_5ms_Monitoring+0xb4>)
 80007a8:	f001 fb86 	bl	8001eb8 <HAL_ADC_Stop>

        // 2. UART로 ECU 정상 동작 메시지 송출
        HAL_UART_Transmit(&huart4, (uint8_t*)"ECU Status: OK\r\n", 18, 10);
 80007ac:	230a      	movs	r3, #10
 80007ae:	2212      	movs	r2, #18
 80007b0:	490b      	ldr	r1, [pc, #44]	@ (80007e0 <Task_5ms_Monitoring+0xd0>)
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <Task_5ms_Monitoring+0xd4>)
 80007b4:	f007 f8b1 	bl	800791a <HAL_UART_Transmit>

        osDelayUntil(tick + 5);
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3305      	adds	r3, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 f9a8 	bl	8008b12 <osDelayUntil>
        tick = osKernelGetTickCount();
 80007c2:	e7ab      	b.n	800071c <Task_5ms_Monitoring+0xc>
 80007c4:	20000038 	.word	0x20000038
 80007c8:	457ff000 	.word	0x457ff000
 80007cc:	40533333 	.word	0x40533333
 80007d0:	20000034 	.word	0x20000034
 80007d4:	c1010100 	.word	0xc1010100
 80007d8:	c1010200 	.word	0xc1010200
 80007dc:	20000030 	.word	0x20000030
 80007e0:	0800b9cc 	.word	0x0800b9cc
 80007e4:	20000500 	.word	0x20000500

080007e8 <Process_CAN_Command>:
    }
}

void Process_CAN_Command(uint8_t *data) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    uint8_t sid = data[0]; // UDS Service ID (SID)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	77fb      	strb	r3, [r7, #31]
    uint8_t responseData[8] = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]

    switch(sid) {
 8000800:	7ffb      	ldrb	r3, [r7, #31]
 8000802:	2b14      	cmp	r3, #20
 8000804:	d01d      	beq.n	8000842 <Process_CAN_Command+0x5a>
 8000806:	2b19      	cmp	r3, #25
 8000808:	d128      	bne.n	800085c <Process_CAN_Command+0x74>
            case UDS_SID_READ_DTC: // 0x19
                {
                    DTC_Record_t record = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
                    EEPROM_Read_Record(&record);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f88f 	bl	800193c <EEPROM_Read_Record>

                    // 응답 데이터 구성
                    // CAN 데이터(8바이트) = SID(1바이트) + Snapshot 데이터(7바이트)
                    responseData[0] = sid;
 800081e:	7ffb      	ldrb	r3, [r7, #31]
 8000820:	753b      	strb	r3, [r7, #20]
                    memcpy(&responseData[1], &record, 7); // 구조체를 그대로 복사
 8000822:	f107 010c 	add.w	r1, r7, #12
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	3301      	adds	r3, #1
 800082c:	2207      	movs	r2, #7
 800082e:	4618      	mov	r0, r3
 8000830:	f00b f89e 	bl	800b970 <memcpy>
                    CAN_Transmit_Diag_Response(responseData, 8);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2108      	movs	r1, #8
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f984 	bl	8001b48 <CAN_Transmit_Diag_Response>
                }
                break;
 8000840:	e00c      	b.n	800085c <Process_CAN_Command+0x74>

            case UDS_SID_CLEAR_DTC: // 0x14
                EEPROM_Clear_Record();
 8000842:	f001 f89f 	bl	8001984 <EEPROM_Clear_Record>
                responseData[0] = sid;
 8000846:	7ffb      	ldrb	r3, [r7, #31]
 8000848:	753b      	strb	r3, [r7, #20]
                responseData[1] = 0xAA; // 성공 응답 코드
 800084a:	23aa      	movs	r3, #170	@ 0xaa
 800084c:	757b      	strb	r3, [r7, #21]
                CAN_Transmit_Diag_Response(responseData, 2);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f977 	bl	8001b48 <CAN_Transmit_Diag_Response>
                break;
 800085a:	bf00      	nop
        }
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f001 f998 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f81a 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f000 fa54 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000874:	f000 f9ec 	bl	8000c50 <MX_DMA_Init>
  MX_ADC1_Init();
 8000878:	f000 f872 	bl	8000960 <MX_ADC1_Init>
  MX_CAN1_Init();
 800087c:	f000 f8c2 	bl	8000a04 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000880:	f000 f8f4 	bl	8000a6c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000884:	f000 f920 	bl	8000ac8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000888:	f000 f94c 	bl	8000b24 <MX_SPI1_Init>
  MX_SPI2_Init();
 800088c:	f000 f980 	bl	8000b90 <MX_SPI2_Init>
  MX_UART4_Init();
 8000890:	f000 f9b4 	bl	8000bfc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000894:	f008 f84c 	bl	8008930 <osKernelInitialize>

  App_Main(); //edit
 8000898:	f7ff fe58 	bl	800054c <App_Main>

  /* Start scheduler */
  osKernelStart();
 800089c:	f008 f86c 	bl	8008978 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <main+0x3c>

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	@ 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00b f830 	bl	800b918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <SystemClock_Config+0xb4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xb4>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xb4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <SystemClock_Config+0xb8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <SystemClock_Config+0xb8>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <SystemClock_Config+0xb8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4618      	mov	r0, r3
 8000916:	f005 fe69 	bl	80065ec <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000920:	f000 fa76 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f005 fc74 	bl	800622c <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800094a:	f000 fa61 	bl	8000e10 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_ADC1_Init+0x98>)
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <MX_ADC1_Init+0x9c>)
 8000976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_ADC1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_ADC1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_ADC1_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_ADC1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_ADC1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_ADC1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009a0:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <MX_ADC1_Init+0xa0>)
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009c0:	f001 f982 	bl	8001cc8 <HAL_ADC_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fa21 	bl	8000e10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_ADC1_Init+0x98>)
 80009e0:	f001 fb36 	bl	8002050 <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009ea:	f000 fa11 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000038 	.word	0x20000038
 80009fc:	40012000 	.word	0x40012000
 8000a00:	0f000001 	.word	0x0f000001

08000a04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a0a:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_CAN1_Init+0x60>)
 8000a52:	f001 fd2b 	bl	80024ac <HAL_CAN_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 f9d8 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000080 	.word	0x20000080
 8000a68:	40006400 	.word	0x40006400

08000a6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a72:	4a13      	ldr	r2, [pc, #76]	@ (8000ac0 <MX_I2C1_Init+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <MX_I2C1_Init+0x58>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_I2C1_Init+0x50>)
 8000aaa:	f003 f8ff 	bl	8003cac <HAL_I2C_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab4:	f000 f9ac 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000a8 	.word	0x200000a8
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <MX_I2C2_Init+0x54>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_I2C2_Init+0x58>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000b06:	f003 f8d1 	bl	8003cac <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 f97e 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000fc 	.word	0x200000fc
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b2a:	4a18      	ldr	r2, [pc, #96]	@ (8000b8c <MX_SPI1_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_SPI1_Init+0x64>)
 8000b76:	f005 ffbd 	bl	8006af4 <HAL_SPI_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b80:	f000 f946 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002d0 	.word	0x200002d0
 8000b8c:	40013000 	.word	0x40013000

08000b90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	@ (8000bf8 <MX_SPI2_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_SPI2_Init+0x64>)
 8000be2:	f005 ff87 	bl	8006af4 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bec:	f000 f910 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000328 	.word	0x20000328
 8000bf8:	40003800 	.word	0x40003800

08000bfc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_UART4_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_UART4_Init+0x4c>)
 8000c34:	f006 fe24 	bl	8007880 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f8e7 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000500 	.word	0x20000500
 8000c4c:	40004c00 	.word	0x40004c00

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <MX_DMA_Init+0xc8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d18 <MX_DMA_Init+0xc8>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <MX_DMA_Init+0xc8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <MX_DMA_Init+0xc8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a27      	ldr	r2, [pc, #156]	@ (8000d18 <MX_DMA_Init+0xc8>)
 8000c7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b25      	ldr	r3, [pc, #148]	@ (8000d18 <MX_DMA_Init+0xc8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2105      	movs	r1, #5
 8000c92:	200b      	movs	r0, #11
 8000c94:	f002 fa9b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c98:	200b      	movs	r0, #11
 8000c9a:	f002 fab4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	200d      	movs	r0, #13
 8000ca4:	f002 fa93 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ca8:	200d      	movs	r0, #13
 8000caa:	f002 faac 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	200e      	movs	r0, #14
 8000cb4:	f002 fa8b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cb8:	200e      	movs	r0, #14
 8000cba:	f002 faa4 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f002 fa83 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f002 fa9c 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2011      	movs	r0, #17
 8000cd4:	f002 fa7b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cd8:	2011      	movs	r0, #17
 8000cda:	f002 fa94 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	202f      	movs	r0, #47	@ 0x2f
 8000ce4:	f002 fa73 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000ce8:	202f      	movs	r0, #47	@ 0x2f
 8000cea:	f002 fa8c 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2038      	movs	r0, #56	@ 0x38
 8000cf4:	f002 fa6b 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cf8:	2038      	movs	r0, #56	@ 0x38
 8000cfa:	f002 fa84 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	203b      	movs	r0, #59	@ 0x3b
 8000d04:	f002 fa63 	bl	80031ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d08:	203b      	movs	r0, #59	@ 0x3b
 8000d0a:	f002 fa7c 	bl	8003206 <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a33      	ldr	r2, [pc, #204]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a2c      	ldr	r2, [pc, #176]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a25      	ldr	r2, [pc, #148]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_GPIO_Init+0xec>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	4812      	ldr	r0, [pc, #72]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000dc4:	f002 ff58 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000de0:	f002 fdb6 	bl	8003950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de4:	2304      	movs	r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000de8:	2311      	movs	r3, #17
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000dfc:	f002 fda8 	bl	8003950 <HAL_GPIO_Init>

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	@ 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <Error_Handler+0x8>

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_MspInit+0x54>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a11      	ldr	r2, [pc, #68]	@ (8000e70 <HAL_MspInit+0x54>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_MspInit+0x54>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_MspInit+0x54>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_MspInit+0x54>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_MspInit+0x54>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	f06f 0001 	mvn.w	r0, #1
 8000e62:	f002 f9b4 	bl	80031ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <HAL_ADC_MspInit+0x7c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d127      	bne.n	8000ee6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_ADC_MspInit+0x80>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <HAL_ADC_MspInit+0x80>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_ADC_MspInit+0x80>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_ADC_MspInit+0x80>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_ADC_MspInit+0x80>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_ADC_MspInit+0x80>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <HAL_ADC_MspInit+0x84>)
 8000ee2:	f002 fd35 	bl	8003950 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <HAL_CAN_MspInit+0xa4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d13b      	bne.n	8000f96 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_CAN_MspInit+0xa8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa4 <HAL_CAN_MspInit+0xa8>)
 8000f28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_CAN_MspInit+0xa8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_CAN_MspInit+0xa8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <HAL_CAN_MspInit+0xa8>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_CAN_MspInit+0xa8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f56:	2303      	movs	r3, #3
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f66:	2309      	movs	r3, #9
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <HAL_CAN_MspInit+0xac>)
 8000f72:	f002 fced 	bl	8003950 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2013      	movs	r0, #19
 8000f7c:	f002 f927 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f80:	2013      	movs	r0, #19
 8000f82:	f002 f940 	bl	8003206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2105      	movs	r1, #5
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f002 f91f 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f90:	2014      	movs	r0, #20
 8000f92:	f002 f938 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40006400 	.word	0x40006400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40021800 	.word	0x40021800

08000fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	@ 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a9c      	ldr	r2, [pc, #624]	@ (800123c <HAL_I2C_MspInit+0x290>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	f040 809b 	bne.w	8001106 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	4b9a      	ldr	r3, [pc, #616]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd8:	4a99      	ldr	r2, [pc, #612]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe0:	4b97      	ldr	r3, [pc, #604]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fec:	23c0      	movs	r3, #192	@ 0xc0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	488f      	ldr	r0, [pc, #572]	@ (8001244 <HAL_I2C_MspInit+0x298>)
 8001008:	f002 fca2 	bl	8003950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	4b8b      	ldr	r3, [pc, #556]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a8a      	ldr	r2, [pc, #552]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b88      	ldr	r3, [pc, #544]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001028:	4b87      	ldr	r3, [pc, #540]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 800102a:	4a88      	ldr	r2, [pc, #544]	@ (800124c <HAL_I2C_MspInit+0x2a0>)
 800102c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800102e:	4b86      	ldr	r3, [pc, #536]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001034:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b84      	ldr	r3, [pc, #528]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b82      	ldr	r3, [pc, #520]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b81      	ldr	r3, [pc, #516]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001048:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104a:	4b7f      	ldr	r3, [pc, #508]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001050:	4b7d      	ldr	r3, [pc, #500]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001056:	4b7c      	ldr	r3, [pc, #496]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800105c:	4b7a      	ldr	r3, [pc, #488]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 800105e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001062:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001064:	4b78      	ldr	r3, [pc, #480]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800106a:	4877      	ldr	r0, [pc, #476]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 800106c:	f002 f8e6 	bl	800323c <HAL_DMA_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001076:	f7ff fecb 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a72      	ldr	r2, [pc, #456]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001080:	4a71      	ldr	r2, [pc, #452]	@ (8001248 <HAL_I2C_MspInit+0x29c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001086:	4b72      	ldr	r3, [pc, #456]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 8001088:	4a72      	ldr	r2, [pc, #456]	@ (8001254 <HAL_I2C_MspInit+0x2a8>)
 800108a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800108c:	4b70      	ldr	r3, [pc, #448]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 800108e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001092:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001094:	4b6e      	ldr	r3, [pc, #440]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 8001096:	2240      	movs	r2, #64	@ 0x40
 8001098:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109a:	4b6d      	ldr	r3, [pc, #436]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a8:	4b69      	ldr	r3, [pc, #420]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ae:	4b68      	ldr	r3, [pc, #416]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010b4:	4b66      	ldr	r3, [pc, #408]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010ba:	4b65      	ldr	r3, [pc, #404]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c2:	4b63      	ldr	r3, [pc, #396]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010c8:	4861      	ldr	r0, [pc, #388]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010ca:	f002 f8b7 	bl	800323c <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80010d4:	f7ff fe9c 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a5d      	ldr	r2, [pc, #372]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80010de:	4a5c      	ldr	r2, [pc, #368]	@ (8001250 <HAL_I2C_MspInit+0x2a4>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2105      	movs	r1, #5
 80010e8:	201f      	movs	r0, #31
 80010ea:	f002 f870 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ee:	201f      	movs	r0, #31
 80010f0:	f002 f889 	bl	8003206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2105      	movs	r1, #5
 80010f8:	2020      	movs	r0, #32
 80010fa:	f002 f868 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010fe:	2020      	movs	r0, #32
 8001100:	f002 f881 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001104:	e095      	b.n	8001232 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a53      	ldr	r2, [pc, #332]	@ (8001258 <HAL_I2C_MspInit+0x2ac>)
 800110c:	4293      	cmp	r3, r2
 800110e:	f040 8090 	bne.w	8001232 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112e:	2303      	movs	r3, #3
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001132:	2312      	movs	r3, #18
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800113e:	2304      	movs	r3, #4
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4844      	ldr	r0, [pc, #272]	@ (800125c <HAL_I2C_MspInit+0x2b0>)
 800114a:	f002 fc01 	bl	8003950 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001158:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <HAL_I2C_MspInit+0x294>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 800116c:	4a3d      	ldr	r2, [pc, #244]	@ (8001264 <HAL_I2C_MspInit+0x2b8>)
 800116e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001170:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 8001172:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001176:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001178:	4b39      	ldr	r3, [pc, #228]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 8001186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001192:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011aa:	482d      	ldr	r0, [pc, #180]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 80011ac:	f002 f846 	bl	800323c <HAL_DMA_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 80011b6:	f7ff fe2b 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 80011be:	639a      	str	r2, [r3, #56]	@ 0x38
 80011c0:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <HAL_I2C_MspInit+0x2b4>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011c8:	4a28      	ldr	r2, [pc, #160]	@ (800126c <HAL_I2C_MspInit+0x2c0>)
 80011ca:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80011cc:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011ce:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80011d2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d4:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011d6:	2240      	movs	r2, #64	@ 0x40
 80011d8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001206:	4818      	ldr	r0, [pc, #96]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 8001208:	f002 f818 	bl	800323c <HAL_DMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 8001212:	f7ff fdfd 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 800121a:	635a      	str	r2, [r3, #52]	@ 0x34
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <HAL_I2C_MspInit+0x2bc>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	2021      	movs	r0, #33	@ 0x21
 8001228:	f001 ffd1 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800122c:	2021      	movs	r0, #33	@ 0x21
 800122e:	f001 ffea 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	@ 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40005400 	.word	0x40005400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400
 8001248:	20000150 	.word	0x20000150
 800124c:	40026010 	.word	0x40026010
 8001250:	200001b0 	.word	0x200001b0
 8001254:	400260a0 	.word	0x400260a0
 8001258:	40005800 	.word	0x40005800
 800125c:	40021400 	.word	0x40021400
 8001260:	20000210 	.word	0x20000210
 8001264:	40026040 	.word	0x40026040
 8001268:	20000270 	.word	0x20000270
 800126c:	400260b8 	.word	0x400260b8

08001270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a4a      	ldr	r2, [pc, #296]	@ (80013b8 <HAL_SPI_MspInit+0x148>)
 800128e:	4293      	cmp	r3, r2
 8001290:	f040 80a0 	bne.w	80013d4 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	4b48      	ldr	r3, [pc, #288]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	4a47      	ldr	r2, [pc, #284]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a4:	4b45      	ldr	r3, [pc, #276]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	4a40      	ldr	r2, [pc, #256]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c0:	4b3e      	ldr	r3, [pc, #248]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012cc:	23e0      	movs	r3, #224	@ 0xe0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012dc:	2305      	movs	r3, #5
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4836      	ldr	r0, [pc, #216]	@ (80013c0 <HAL_SPI_MspInit+0x150>)
 80012e8:	f002 fb32 	bl	8003950 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80012ec:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 80012ee:	4a36      	ldr	r2, [pc, #216]	@ (80013c8 <HAL_SPI_MspInit+0x158>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 80012f4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001308:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800130c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130e:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800132c:	4825      	ldr	r0, [pc, #148]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 800132e:	f001 ff85 	bl	800323c <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001338:	f7ff fd6a 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001340:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001342:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <HAL_SPI_MspInit+0x154>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <HAL_SPI_MspInit+0x160>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001350:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001354:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001356:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001358:	2240      	movs	r2, #64	@ 0x40
 800135a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001388:	4810      	ldr	r0, [pc, #64]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800138a:	f001 ff57 	bl	800323c <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001394:	f7ff fd3c 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800139c:	649a      	str	r2, [r3, #72]	@ 0x48
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2105      	movs	r1, #5
 80013a8:	2023      	movs	r0, #35	@ 0x23
 80013aa:	f001 ff10 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013ae:	2023      	movs	r0, #35	@ 0x23
 80013b0:	f001 ff29 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013b4:	e0c1      	b.n	800153a <HAL_SPI_MspInit+0x2ca>
 80013b6:	bf00      	nop
 80013b8:	40013000 	.word	0x40013000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	20000380 	.word	0x20000380
 80013c8:	40026410 	.word	0x40026410
 80013cc:	200003e0 	.word	0x200003e0
 80013d0:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001544 <HAL_SPI_MspInit+0x2d4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	f040 80ad 	bne.w	800153a <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	4b58      	ldr	r3, [pc, #352]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a57      	ldr	r2, [pc, #348]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b55      	ldr	r3, [pc, #340]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b51      	ldr	r3, [pc, #324]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	4a50      	ldr	r2, [pc, #320]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6313      	str	r3, [r2, #48]	@ 0x30
 800140c:	4b4e      	ldr	r3, [pc, #312]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	4a49      	ldr	r2, [pc, #292]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	6313      	str	r3, [r2, #48]	@ 0x30
 8001428:	4b47      	ldr	r3, [pc, #284]	@ (8001548 <HAL_SPI_MspInit+0x2d8>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001434:	230c      	movs	r3, #12
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001444:	2305      	movs	r3, #5
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	483f      	ldr	r0, [pc, #252]	@ (800154c <HAL_SPI_MspInit+0x2dc>)
 8001450:	f002 fa7e 	bl	8003950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001466:	2305      	movs	r3, #5
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4837      	ldr	r0, [pc, #220]	@ (8001550 <HAL_SPI_MspInit+0x2e0>)
 8001472:	f002 fa6d 	bl	8003950 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 8001478:	4a37      	ldr	r2, [pc, #220]	@ (8001558 <HAL_SPI_MspInit+0x2e8>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800147c:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 8001490:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001494:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80014a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80014b4:	4827      	ldr	r0, [pc, #156]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 80014b6:	f001 fec1 	bl	800323c <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 80014c0:	f7ff fca6 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 80014c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014ca:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <HAL_SPI_MspInit+0x2e4>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014d2:	4a23      	ldr	r2, [pc, #140]	@ (8001560 <HAL_SPI_MspInit+0x2f0>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014de:	2240      	movs	r2, #64	@ 0x40
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f6:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014fc:	4b17      	ldr	r3, [pc, #92]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800150e:	4813      	ldr	r0, [pc, #76]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 8001510:	f001 fe94 	bl	800323c <HAL_DMA_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 800151a:	f7ff fc79 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a0e      	ldr	r2, [pc, #56]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 8001522:	649a      	str	r2, [r3, #72]	@ 0x48
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <HAL_SPI_MspInit+0x2ec>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2024      	movs	r0, #36	@ 0x24
 8001530:	f001 fe4d 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001534:	2024      	movs	r0, #36	@ 0x24
 8001536:	f001 fe66 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	@ 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40003800 	.word	0x40003800
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800
 8001550:	40020400 	.word	0x40020400
 8001554:	20000440 	.word	0x20000440
 8001558:	40026058 	.word	0x40026058
 800155c:	200004a0 	.word	0x200004a0
 8001560:	40026070 	.word	0x40026070

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <HAL_UART_MspInit+0xb4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d144      	bne.n	8001610 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b24      	ldr	r3, [pc, #144]	@ (800161c <HAL_UART_MspInit+0xb8>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_UART_MspInit+0xb8>)
 8001590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_UART_MspInit+0xb8>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_UART_MspInit+0xb8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <HAL_UART_MspInit+0xb8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_UART_MspInit+0xb8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ce:	2308      	movs	r3, #8
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4811      	ldr	r0, [pc, #68]	@ (8001620 <HAL_UART_MspInit+0xbc>)
 80015da:	f002 f9b9 	bl	8003950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 80015f0:	230b      	movs	r3, #11
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4809      	ldr	r0, [pc, #36]	@ (8001620 <HAL_UART_MspInit+0xbc>)
 80015fc:	f002 f9a8 	bl	8003950 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2105      	movs	r1, #5
 8001604:	2034      	movs	r0, #52	@ 0x34
 8001606:	f001 fde2 	bl	80031ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800160a:	2034      	movs	r0, #52	@ 0x34
 800160c:	f001 fdfb 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	@ 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40004c00 	.word	0x40004c00
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165e:	f000 faef 	bl	8001c40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001662:	f009 f8db 	bl	800a81c <xTaskGetSchedulerState>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d001      	beq.n	8001670 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800166c:	f009 fed4 	bl	800b418 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DMA1_Stream0_IRQHandler+0x10>)
 800167a:	f001 ff1f 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000150 	.word	0x20000150

08001688 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Stream2_IRQHandler+0x10>)
 800168e:	f001 ff15 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000210 	.word	0x20000210

0800169c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <DMA1_Stream3_IRQHandler+0x10>)
 80016a2:	f001 ff0b 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000440 	.word	0x20000440

080016b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA1_Stream4_IRQHandler+0x10>)
 80016b6:	f001 ff01 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200004a0 	.word	0x200004a0

080016c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA1_Stream6_IRQHandler+0x10>)
 80016ca:	f001 fef7 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001b0 	.word	0x200001b0

080016d8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <CAN1_TX_IRQHandler+0x10>)
 80016de:	f001 fa6c 	bl	8002bba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000080 	.word	0x20000080

080016ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <CAN1_RX0_IRQHandler+0x10>)
 80016f2:	f001 fa62 	bl	8002bba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000080 	.word	0x20000080

08001700 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
  * @brief  CAN1 RX0 수신 메시지 대기 인터럽트 콜백
  */ // edit
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;
  uint8_t rxData[8];

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	f107 0214 	add.w	r2, r7, #20
 8001710:	2100      	movs	r1, #0
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 f919 	bl	800294a <HAL_CAN_GetRxMessage>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
  {
    // 진단기 요청 ID check
    if (rxHeader.StdId == CAN_ID_DIAG_REQUEST) {
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 8001724:	d10b      	bne.n	800173e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
        if (canRxQueueHandle != NULL) {
 8001726:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
            osMessageQueuePut(canRxQueueHandle, rxData, 0U, 0U);
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	f107 010c 	add.w	r1, r7, #12
 8001736:	2300      	movs	r3, #0
 8001738:	2200      	movs	r2, #0
 800173a:	f007 fa8b 	bl	8008c54 <osMessageQueuePut>
        }
    }
  }
}
 800173e:	bf00      	nop
 8001740:	3730      	adds	r7, #48	@ 0x30
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000002c 	.word	0x2000002c

0800174c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <I2C1_EV_IRQHandler+0x10>)
 8001752:	f002 fe15 	bl	8004380 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200000a8 	.word	0x200000a8

08001760 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <I2C1_ER_IRQHandler+0x10>)
 8001766:	f002 ff7c 	bl	8004662 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000a8 	.word	0x200000a8

08001774 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <I2C2_EV_IRQHandler+0x10>)
 800177a:	f002 fe01 	bl	8004380 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000fc 	.word	0x200000fc

08001788 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <SPI1_IRQHandler+0x10>)
 800178e:	f005 fe29 	bl	80073e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002d0 	.word	0x200002d0

0800179c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <SPI2_IRQHandler+0x10>)
 80017a2:	f005 fe1f 	bl	80073e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000328 	.word	0x20000328

080017b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <DMA1_Stream7_IRQHandler+0x10>)
 80017b6:	f001 fe81 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000270 	.word	0x20000270

080017c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <UART4_IRQHandler+0x10>)
 80017ca:	f006 f939 	bl	8007a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000500 	.word	0x20000500

080017d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <DMA2_Stream0_IRQHandler+0x10>)
 80017de:	f001 fe6d 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000380 	.word	0x20000380

080017ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <DMA2_Stream3_IRQHandler+0x10>)
 80017f2:	f001 fe63 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200003e0 	.word	0x200003e0

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	@ (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	@ (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	@ (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f00a f869 	bl	800b928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff f805 	bl	8000864 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800185c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001868:	0800ba28 	.word	0x0800ba28
  ldr r2, =_sbss
 800186c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001870:	20004ea8 	.word	0x20004ea8

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <EEPROM_CS_Select>:
#define EEPROM_CS_PORT      GPIOB
#define EEPROM_CS_PIN       GPIO_PIN_6

static SPI_HandleTypeDef *g_hspi;

static inline void EEPROM_CS_Select() { HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_RESET); }
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
 800187c:	2200      	movs	r2, #0
 800187e:	2140      	movs	r1, #64	@ 0x40
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <EEPROM_CS_Select+0x14>)
 8001882:	f002 f9f9 	bl	8003c78 <HAL_GPIO_WritePin>
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020400 	.word	0x40020400

08001890 <EEPROM_CS_Deselect>:
static inline void EEPROM_CS_Deselect() { HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET); }
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
 8001894:	2201      	movs	r2, #1
 8001896:	2140      	movs	r1, #64	@ 0x40
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <EEPROM_CS_Deselect+0x14>)
 800189a:	f002 f9ed 	bl	8003c78 <HAL_GPIO_WritePin>
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020400 	.word	0x40020400

080018a8 <EEPROM_Init>:

void EEPROM_Init(SPI_HandleTypeDef *hspi) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    g_hspi = hspi;
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <EEPROM_Init+0x1c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
    EEPROM_CS_Deselect();
 80018b6:	f7ff ffeb 	bl	8001890 <EEPROM_CS_Deselect>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000544 	.word	0x20000544

080018c8 <EEPROM_Write_Record>:

HAL_StatusTypeDef EEPROM_Write_Record(DTC_Record_t record) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	463b      	mov	r3, r7
 80018d0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t wren_cmd = EEPROM_CMD_WREN;
 80018d4:	2306      	movs	r3, #6
 80018d6:	73fb      	strb	r3, [r7, #15]
    uint8_t tx_header[3];

    EEPROM_CS_Select();
 80018d8:	f7ff ffce 	bl	8001878 <EEPROM_CS_Select>
    HAL_SPI_Transmit(g_hspi, &wren_cmd, 1, 100);
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <EEPROM_Write_Record+0x70>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 010f 	add.w	r1, r7, #15
 80018e4:	2364      	movs	r3, #100	@ 0x64
 80018e6:	2201      	movs	r2, #1
 80018e8:	f005 f98d 	bl	8006c06 <HAL_SPI_Transmit>
    EEPROM_CS_Deselect();
 80018ec:	f7ff ffd0 	bl	8001890 <EEPROM_CS_Deselect>
    HAL_Delay(5);
 80018f0:	2005      	movs	r0, #5
 80018f2:	f000 f9c5 	bl	8001c80 <HAL_Delay>

    tx_header[0] = EEPROM_CMD_WRITE;
 80018f6:	2302      	movs	r3, #2
 80018f8:	733b      	strb	r3, [r7, #12]
    tx_header[1] = (EEPROM_DTC_ADDRESS >> 8) & 0xFF;
 80018fa:	2301      	movs	r3, #1
 80018fc:	737b      	strb	r3, [r7, #13]
    tx_header[2] = EEPROM_DTC_ADDRESS & 0xFF;
 80018fe:	2300      	movs	r3, #0
 8001900:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_Select();
 8001902:	f7ff ffb9 	bl	8001878 <EEPROM_CS_Select>
    HAL_SPI_Transmit(g_hspi, tx_header, 3, 100);
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <EEPROM_Write_Record+0x70>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f107 010c 	add.w	r1, r7, #12
 800190e:	2364      	movs	r3, #100	@ 0x64
 8001910:	2203      	movs	r2, #3
 8001912:	f005 f978 	bl	8006c06 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(g_hspi, (uint8_t*)&record, sizeof(uint32_t), 100);
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <EEPROM_Write_Record+0x70>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	4639      	mov	r1, r7
 800191c:	2364      	movs	r3, #100	@ 0x64
 800191e:	2204      	movs	r2, #4
 8001920:	f005 f971 	bl	8006c06 <HAL_SPI_Transmit>
    EEPROM_CS_Deselect();
 8001924:	f7ff ffb4 	bl	8001890 <EEPROM_CS_Deselect>
    HAL_Delay(5);
 8001928:	2005      	movs	r0, #5
 800192a:	f000 f9a9 	bl	8001c80 <HAL_Delay>

    return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000544 	.word	0x20000544

0800193c <EEPROM_Read_Record>:

HAL_StatusTypeDef EEPROM_Read_Record(DTC_Record_t *record) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    uint8_t tx_header[3];

    tx_header[0] = EEPROM_CMD_READ;
 8001944:	2303      	movs	r3, #3
 8001946:	733b      	strb	r3, [r7, #12]
    tx_header[1] = (EEPROM_DTC_ADDRESS >> 8) & 0xFF;
 8001948:	2301      	movs	r3, #1
 800194a:	737b      	strb	r3, [r7, #13]
    tx_header[2] = EEPROM_DTC_ADDRESS & 0xFF;
 800194c:	2300      	movs	r3, #0
 800194e:	73bb      	strb	r3, [r7, #14]

    EEPROM_CS_Select();
 8001950:	f7ff ff92 	bl	8001878 <EEPROM_CS_Select>
    HAL_SPI_Transmit(g_hspi, tx_header, 3, 100);
 8001954:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <EEPROM_Read_Record+0x44>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	f107 010c 	add.w	r1, r7, #12
 800195c:	2364      	movs	r3, #100	@ 0x64
 800195e:	2203      	movs	r2, #3
 8001960:	f005 f951 	bl	8006c06 <HAL_SPI_Transmit>
    HAL_SPI_Receive(g_hspi, (uint8_t*)record, sizeof(uint32_t), 100);
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <EEPROM_Read_Record+0x44>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	2364      	movs	r3, #100	@ 0x64
 800196a:	2204      	movs	r2, #4
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	f005 fa86 	bl	8006e7e <HAL_SPI_Receive>
    EEPROM_CS_Deselect();
 8001972:	f7ff ff8d 	bl	8001890 <EEPROM_CS_Deselect>

    return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000544 	.word	0x20000544

08001984 <EEPROM_Clear_Record>:

HAL_StatusTypeDef EEPROM_Clear_Record(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	DTC_Record_t empty_record = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
    return EEPROM_Write_Record(empty_record);
 8001992:	463b      	mov	r3, r7
 8001994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001998:	f7ff ff96 	bl	80018c8 <EEPROM_Write_Record>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <GateDriver_Init>:

#include "gatedriver_drv8871.h"

static SPI_HandleTypeDef *g_hspi;

void GateDriver_Init(SPI_HandleTypeDef *hspi) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    g_hspi = hspi;
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <GateDriver_Init+0x1c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
    GateDriver_DisableMotor();
 80019b6:	f000 f812 	bl	80019de <GateDriver_DisableMotor>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000548 	.word	0x20000548

080019c8 <GateDriver_EnableMotor>:

void GateDriver_EnableMotor(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
    uint8_t enable_cmd = 0xAA; // 모터 활성화
 80019ce:	23aa      	movs	r3, #170	@ 0xaa
 80019d0:	71fb      	strb	r3, [r7, #7]
    // HAL_SPI_Transmit(g_hspi, &enable_cmd, 1, 100);
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <GateDriver_DisableMotor>:

void GateDriver_DisableMotor(void) {
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
    uint8_t disable_cmd = 0x55; // 모터 비활성화
 80019e4:	2355      	movs	r3, #85	@ 0x55
 80019e6:	71fb      	strb	r3, [r7, #7]
    // HAL_SPI_Transmit(g_hspi, &disable_cmd, 1, 100);
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <PMIC_Init>:
    } fields;
} PmicStatusReg2_t;

static I2C_HandleTypeDef *g_hi2c;

HAL_StatusTypeDef PMIC_Init(I2C_HandleTypeDef *hi2c) {
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    g_hi2c = hi2c;
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <PMIC_Init+0x1c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	2000054c 	.word	0x2000054c

08001a14 <PMIC_Check_Faults>:

FaultType_t PMIC_Check_Faults(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af04      	add	r7, sp, #16
    PmicStatusReg1_t statusReg1; // UV/OC check
    PmicStatusReg2_t statusReg2; // OV check

    // [고장 우선순위 1순위] OV check
    if (HAL_I2C_Mem_Read(g_hi2c, PMIC_SLAVE_ADDR, PMIC_REG_STATUS2,
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <PMIC_Check_Faults+0x80>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	230a      	movs	r3, #10
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	2301      	movs	r3, #1
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	463b      	mov	r3, r7
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	21d0      	movs	r1, #208	@ 0xd0
 8001a30:	f002 fa80 	bl	8003f34 <HAL_I2C_Mem_Read>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d107      	bne.n	8001a4a <PMIC_Check_Faults+0x36>
    		I2C_MEMADD_SIZE_8BIT, &statusReg2.rawData, 1, 10) == HAL_OK) {
        if (statusReg2.fields.buck1_ov_flg) {
 8001a3a:	783b      	ldrb	r3, [r7, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <PMIC_Check_Faults+0x36>
            return FAULT_TYPE_OV;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e020      	b.n	8001a8c <PMIC_Check_Faults+0x78>
        }
    }

    // [고장 우선순위 2, 3순위] UV/OC check
    if (HAL_I2C_Mem_Read(g_hi2c, PMIC_SLAVE_ADDR, PMIC_REG_STATUS,
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <PMIC_Check_Faults+0x80>)
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	230a      	movs	r3, #10
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	220e      	movs	r2, #14
 8001a5e:	21d0      	movs	r1, #208	@ 0xd0
 8001a60:	f002 fa68 	bl	8003f34 <HAL_I2C_Mem_Read>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <PMIC_Check_Faults+0x76>
    		I2C_MEMADD_SIZE_8BIT, &statusReg1.rawData, 1, 10) == HAL_OK) {
        if (statusReg1.fields.buck1_oc_flg) {
 8001a6a:	793b      	ldrb	r3, [r7, #4]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <PMIC_Check_Faults+0x66>
            return FAULT_TYPE_OC;
 8001a76:	2302      	movs	r3, #2
 8001a78:	e008      	b.n	8001a8c <PMIC_Check_Faults+0x78>
        }
        if (statusReg1.fields.buck1_uv_flg) {
 8001a7a:	793b      	ldrb	r3, [r7, #4]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <PMIC_Check_Faults+0x76>
            return FAULT_TYPE_UV;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e000      	b.n	8001a8c <PMIC_Check_Faults+0x78>
        }
    }

    return FAULT_TYPE_NONE;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000054c 	.word	0x2000054c

08001a98 <CAN_Manager_Init>:
#define CAN_STB_PORT    GPIOC
#define CAN_STB_PIN     GPIO_PIN_13

static CAN_HandleTypeDef *g_hcan;

void CAN_Manager_Init(CAN_HandleTypeDef *hcan) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    g_hcan = hcan;
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <CAN_Manager_Init+0x38>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(CAN_STB_PORT, CAN_STB_PIN, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aac:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <CAN_Manager_Init+0x3c>)
 8001aae:	f002 f8e3 	bl	8003c78 <HAL_GPIO_WritePin>
    HAL_CAN_Start(g_hcan);
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <CAN_Manager_Init+0x38>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fdf3 	bl	80026a2 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(g_hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <CAN_Manager_Init+0x38>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f853 	bl	8002b6e <HAL_CAN_ActivateNotification>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000550 	.word	0x20000550
 8001ad4:	40020800 	.word	0x40020800

08001ad8 <CAN_Transmit_DTC_Broadcast>:

HAL_StatusTypeDef CAN_Transmit_DTC_Broadcast(uint32_t dtcCode) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[4];
    uint32_t txMailbox;

    txHeader.StdId = CAN_ID_DTC_BROADCAST;;
 8001ae0:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8001ae4:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    txHeader.DLC = 4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	623b      	str	r3, [r7, #32]

    txData[0] = (dtcCode >> 24) & 0xFF;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	0e1b      	lsrs	r3, r3, #24
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	733b      	strb	r3, [r7, #12]
    txData[1] = (dtcCode >> 16) & 0xFF;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	737b      	strb	r3, [r7, #13]
    txData[2] = (dtcCode >> 8) & 0xFF;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	73bb      	strb	r3, [r7, #14]
    txData[3] = dtcCode & 0xFF;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_GetTxMailboxesFreeLevel(g_hcan) == 0) return HAL_BUSY;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <CAN_Transmit_DTC_Broadcast+0x6c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fee3 	bl	80028e0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <CAN_Transmit_DTC_Broadcast+0x4c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e00a      	b.n	8001b3a <CAN_Transmit_DTC_Broadcast+0x62>
    return HAL_CAN_AddTxMessage(g_hcan, &txHeader, txData, &txMailbox);
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <CAN_Transmit_DTC_Broadcast+0x6c>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	f107 0110 	add.w	r1, r7, #16
 8001b34:	f000 fdf9 	bl	800272a <HAL_CAN_AddTxMessage>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3728      	adds	r7, #40	@ 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000550 	.word	0x20000550

08001b48 <CAN_Transmit_Diag_Response>:

HAL_StatusTypeDef CAN_Transmit_Diag_Response(uint8_t *data, uint8_t length) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.StdId = CAN_ID_DIAG_RESPONSE;
 8001b54:	f44f 63f5 	mov.w	r3, #1960	@ 0x7a8
 8001b58:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    txHeader.DLC = length;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_GetTxMailboxesFreeLevel(g_hcan) == 0) return HAL_BUSY;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <CAN_Transmit_Diag_Response+0x50>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 feb8 	bl	80028e0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <CAN_Transmit_Diag_Response+0x32>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e009      	b.n	8001b8e <CAN_Transmit_Diag_Response+0x46>
    return HAL_CAN_AddTxMessage(g_hcan, &txHeader, data, &txMailbox);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <CAN_Transmit_Diag_Response+0x50>)
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	f107 0110 	add.w	r1, r7, #16
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	f000 fdcf 	bl	800272a <HAL_CAN_AddTxMessage>
 8001b8c:	4603      	mov	r3, r0

}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000550 	.word	0x20000550

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <HAL_Init+0x40>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_Init+0x40>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_Init+0x40>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f001 faf7 	bl	80031b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff f924 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fb0f 	bl	8003222 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f001 fad7 	bl	80031ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000554 	.word	0x20000554

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000554 	.word	0x20000554

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e033      	b.n	8001d46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff f8c4 	bl	8000e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d118      	bne.n	8001d38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d0e:	f023 0302 	bic.w	r3, r3, #2
 8001d12:	f043 0202 	orr.w	r2, r3, #2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 faca 	bl	80022b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d36:	e001      	b.n	8001d3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Start+0x1a>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e097      	b.n	8001e9a <HAL_ADC_Start+0x14a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d018      	beq.n	8001db2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d90:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_ADC_Start+0x158>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a45      	ldr	r2, [pc, #276]	@ (8001eac <HAL_ADC_Start+0x15c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0c9a      	lsrs	r2, r3, #18
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001da4:	e002      	b.n	8001dac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f9      	bne.n	8001da6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d15f      	bne.n	8001e80 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f023 0206 	bic.w	r2, r3, #6
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e0c:	e002      	b.n	8001e14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1c:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_ADC_Start+0x160>)
 8001e1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d129      	bne.n	8001e98 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e020      	b.n	8001e98 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <HAL_ADC_Start+0x164>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d11b      	bne.n	8001e98 <HAL_ADC_Start+0x148>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d114      	bne.n	8001e98 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	e00b      	b.n	8001e98 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	f043 0210 	orr.w	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	40012000 	.word	0x40012000

08001eb8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Stop+0x16>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e021      	b.n	8001f12 <HAL_ADC_Stop+0x5a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3a:	d113      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f4a:	d10b      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e063      	b.n	800202c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f64:	f7ff fe80 	bl	8001c68 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f6a:	e021      	b.n	8001fb0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f72:	d01d      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x6c>
 8001f7a:	f7ff fe75 	bl	8001c68 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d212      	bcs.n	8001fb0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d00b      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e03d      	b.n	800202c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d1d6      	bne.n	8001f6c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0212 	mvn.w	r2, #18
 8001fc6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d123      	bne.n	800202a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11f      	bne.n	800202a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002002:	2b00      	cmp	r3, #0
 8002004:	d111      	bne.n	800202a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e113      	b.n	8002294 <HAL_ADC_ConfigChannel+0x244>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d925      	bls.n	80020c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1e      	subs	r3, #30
 8002092:	2207      	movs	r2, #7
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43da      	mvns	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	400a      	ands	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4403      	add	r3, r0
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	409a      	lsls	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	e022      	b.n	800210e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	2207      	movs	r2, #7
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4403      	add	r3, r0
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d824      	bhi.n	8002160 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b05      	subs	r3, #5
 8002128:	221f      	movs	r2, #31
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b05      	subs	r3, #5
 8002152:	fa00 f203 	lsl.w	r2, r0, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34
 800215e:	e04c      	b.n	80021fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d824      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	3b23      	subs	r3, #35	@ 0x23
 800217a:	221f      	movs	r2, #31
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b23      	subs	r3, #35	@ 0x23
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b0:	e023      	b.n	80021fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b41      	subs	r3, #65	@ 0x41
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b41      	subs	r3, #65	@ 0x41
 80021ee:	fa00 f203 	lsl.w	r2, r0, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fa:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <HAL_ADC_ConfigChannel+0x250>)
 80021fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_ADC_ConfigChannel+0x254>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d10f      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d8>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b12      	cmp	r3, #18
 800220e:	d10b      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_ADC_ConfigChannel+0x254>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <HAL_ADC_ConfigChannel+0x258>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x1f4>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b11      	cmp	r3, #17
 8002242:	d122      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	@ (80022a8 <HAL_ADC_ConfigChannel+0x258>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d111      	bne.n	800228a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_ADC_ConfigChannel+0x25c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <HAL_ADC_ConfigChannel+0x260>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0c9a      	lsrs	r2, r3, #18
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800227c:	e002      	b.n	8002284 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3b01      	subs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40012300 	.word	0x40012300
 80022a4:	40012000 	.word	0x40012000
 80022a8:	10000012 	.word	0x10000012
 80022ac:	20000000 	.word	0x20000000
 80022b0:	431bde83 	.word	0x431bde83

080022b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022bc:	4b79      	ldr	r3, [pc, #484]	@ (80024a4 <ADC_Init+0x1f0>)
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800232e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <ADC_Init+0x1f4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800235a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800237c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e00f      	b.n	80023b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0202 	bic.w	r2, r2, #2
 80023c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7e1b      	ldrb	r3, [r3, #24]
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	3b01      	subs	r3, #1
 800240c:	035a      	lsls	r2, r3, #13
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	e007      	b.n	8002428 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	3b01      	subs	r3, #1
 8002444:	051a      	lsls	r2, r3, #20
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800246a:	025a      	lsls	r2, r3, #9
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	029a      	lsls	r2, r3, #10
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40012300 	.word	0x40012300
 80024a8:	0f000001 	.word	0x0f000001

080024ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0ed      	b.n	800269a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fd16 	bl	8000efc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e0:	f7ff fbc2 	bl	8001c68 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024e6:	e012      	b.n	800250e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e8:	f7ff fbbe 	bl	8001c68 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b0a      	cmp	r3, #10
 80024f4:	d90b      	bls.n	800250e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2205      	movs	r2, #5
 8002506:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0c5      	b.n	800269a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0e5      	beq.n	80024e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0202 	bic.w	r2, r2, #2
 800252a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252c:	f7ff fb9c 	bl	8001c68 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002532:	e012      	b.n	800255a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002534:	f7ff fb98 	bl	8001c68 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b0a      	cmp	r3, #10
 8002540:	d90b      	bls.n	800255a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2205      	movs	r2, #5
 8002552:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e09f      	b.n	800269a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e5      	bne.n	8002534 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e1b      	ldrb	r3, [r3, #24]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d108      	bne.n	8002582 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7e5b      	ldrb	r3, [r3, #25]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d108      	bne.n	80025ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e007      	b.n	80025bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7e9b      	ldrb	r3, [r3, #26]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d108      	bne.n	80025d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e007      	b.n	80025e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0220 	bic.w	r2, r2, #32
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7edb      	ldrb	r3, [r3, #27]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d108      	bne.n	8002600 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0210 	bic.w	r2, r2, #16
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e007      	b.n	8002610 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0210 	orr.w	r2, r2, #16
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7f1b      	ldrb	r3, [r3, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d108      	bne.n	800262a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0208 	orr.w	r2, r2, #8
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0208 	bic.w	r2, r2, #8
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7f5b      	ldrb	r3, [r3, #29]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d108      	bne.n	8002654 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0204 	orr.w	r2, r2, #4
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e007      	b.n	8002664 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	ea42 0103 	orr.w	r1, r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d12e      	bne.n	8002714 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026ce:	f7ff facb 	bl	8001c68 <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026d4:	e012      	b.n	80026fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026d6:	f7ff fac7 	bl	8001c68 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b0a      	cmp	r3, #10
 80026e2:	d90b      	bls.n	80026fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2205      	movs	r2, #5
 80026f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e012      	b.n	8002722 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e006      	b.n	8002722 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800272a:	b480      	push	{r7}
 800272c:	b089      	sub	sp, #36	@ 0x24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d003      	beq.n	8002756 <HAL_CAN_AddTxMessage+0x2c>
 800274e:	7ffb      	ldrb	r3, [r7, #31]
 8002750:	2b02      	cmp	r3, #2
 8002752:	f040 80b8 	bne.w	80028c6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a0 	beq.w	80028b6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	0e1b      	lsrs	r3, r3, #24
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d907      	bls.n	8002796 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e09e      	b.n	80028d4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002796:	2201      	movs	r2, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10d      	bne.n	80027c4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	6809      	ldr	r1, [r1, #0]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3318      	adds	r3, #24
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	440b      	add	r3, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e00f      	b.n	80027e4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3318      	adds	r3, #24
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	440b      	add	r3, r1
 80027e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3318      	adds	r3, #24
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	440b      	add	r3, r1
 80027f4:	3304      	adds	r3, #4
 80027f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	7d1b      	ldrb	r3, [r3, #20]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d111      	bne.n	8002824 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3318      	adds	r3, #24
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	6811      	ldr	r1, [r2, #0]
 8002814:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3318      	adds	r3, #24
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	440b      	add	r3, r1
 8002820:	3304      	adds	r3, #4
 8002822:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3307      	adds	r3, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	061a      	lsls	r2, r3, #24
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3306      	adds	r3, #6
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3305      	adds	r3, #5
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	4313      	orrs	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	3204      	adds	r2, #4
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	4610      	mov	r0, r2
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	6811      	ldr	r1, [r2, #0]
 800284c:	ea43 0200 	orr.w	r2, r3, r0
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	440b      	add	r3, r1
 8002856:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800285a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3303      	adds	r3, #3
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	061a      	lsls	r2, r3, #24
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3302      	adds	r3, #2
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3301      	adds	r3, #1
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	4313      	orrs	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	4610      	mov	r0, r2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6811      	ldr	r1, [r2, #0]
 8002882:	ea43 0200 	orr.w	r2, r3, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	440b      	add	r3, r1
 800288c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002890:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3318      	adds	r3, #24
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4413      	add	r3, r2
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3318      	adds	r3, #24
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	440b      	add	r3, r1
 80028b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e00e      	b.n	80028d4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e006      	b.n	80028d4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3724      	adds	r7, #36	@ 0x24
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028f4:	7afb      	ldrb	r3, [r7, #11]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d002      	beq.n	8002900 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11d      	bne.n	800293c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800294a:	b480      	push	{r7}
 800294c:	b087      	sub	sp, #28
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d003      	beq.n	800296e <HAL_CAN_GetRxMessage+0x24>
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b02      	cmp	r3, #2
 800296a:	f040 80f3 	bne.w	8002b54 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10e      	bne.n	8002992 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0e7      	b.n	8002b62 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d8      	b.n	8002b62 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	331b      	adds	r3, #27
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0204 	and.w	r2, r3, #4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	331b      	adds	r3, #27
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0d5b      	lsrs	r3, r3, #21
 80029de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	331b      	adds	r3, #27
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4413      	add	r3, r2
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	331b      	adds	r3, #27
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0202 	and.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	331b      	adds	r3, #27
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	331b      	adds	r3, #27
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	331b      	adds	r3, #27
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0a1a      	lsrs	r2, r3, #8
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0c1a      	lsrs	r2, r3, #16
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e1a      	lsrs	r2, r3, #24
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	3303      	adds	r3, #3
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0a1a      	lsrs	r2, r3, #8
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	3305      	adds	r3, #5
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0c1a      	lsrs	r2, r3, #16
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	3306      	adds	r3, #6
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	0e1a      	lsrs	r2, r3, #24
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3307      	adds	r3, #7
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	e007      	b.n	8002b50 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0220 	orr.w	r2, r2, #32
 8002b4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e006      	b.n	8002b62 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d002      	beq.n	8002b8c <HAL_CAN_ActivateNotification+0x1e>
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d109      	bne.n	8002ba0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6959      	ldr	r1, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e006      	b.n	8002bae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b08a      	sub	sp, #40	@ 0x28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d07c      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d023      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f983 	bl	8002f28 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c22:	e016      	b.n	8002c52 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	e00c      	b.n	8002c52 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4a:	e002      	b.n	8002c52 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f989 	bl	8002f64 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d024      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f963 	bl	8002f3c <HAL_CAN_TxMailbox1CompleteCallback>
 8002c76:	e016      	b.n	8002ca6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8a:	e00c      	b.n	8002ca6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9e:	e002      	b.n	8002ca6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f969 	bl	8002f78 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d024      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f943 	bl	8002f50 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cca:	e016      	b.n	8002cfa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cde:	e00c      	b.n	8002cfa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf2:	e002      	b.n	8002cfa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f949 	bl	8002f8c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2208      	movs	r2, #8
 8002d38:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f930 	bl	8002fa0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fe fcd1 	bl	8001700 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2210      	movs	r2, #16
 8002d80:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f912 	bl	8002fc8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8f9 	bl	8002fb4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f8fc 	bl	8002fdc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8f5 	bl	8002ff0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d07b      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d072      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d043      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03e      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e88:	2b60      	cmp	r3, #96	@ 0x60
 8002e8a:	d02b      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x32a>
 8002e8c:	2b60      	cmp	r3, #96	@ 0x60
 8002e8e:	d82e      	bhi.n	8002eee <HAL_CAN_IRQHandler+0x334>
 8002e90:	2b50      	cmp	r3, #80	@ 0x50
 8002e92:	d022      	beq.n	8002eda <HAL_CAN_IRQHandler+0x320>
 8002e94:	2b50      	cmp	r3, #80	@ 0x50
 8002e96:	d82a      	bhi.n	8002eee <HAL_CAN_IRQHandler+0x334>
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d019      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x316>
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d826      	bhi.n	8002eee <HAL_CAN_IRQHandler+0x334>
 8002ea0:	2b30      	cmp	r3, #48	@ 0x30
 8002ea2:	d010      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x30c>
 8002ea4:	2b30      	cmp	r3, #48	@ 0x30
 8002ea6:	d822      	bhi.n	8002eee <HAL_CAN_IRQHandler+0x334>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d002      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x2f8>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d005      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002eb0:	e01d      	b.n	8002eee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eba:	e019      	b.n	8002ef0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec4:	e014      	b.n	8002ef0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	f043 0320 	orr.w	r3, r3, #32
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ece:	e00f      	b.n	8002ef0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed8:	e00a      	b.n	8002ef0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ee2:	e005      	b.n	8002ef0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eec:	e000      	b.n	8002ef0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002eee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002efe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2204      	movs	r2, #4
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f872 	bl	8003004 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f20:	bf00      	nop
 8002f22:	3728      	adds	r7, #40	@ 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	@ (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db0a      	blt.n	80030e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	490c      	ldr	r1, [pc, #48]	@ (8003104 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	440b      	add	r3, r1
 80030dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e0:	e00a      	b.n	80030f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4908      	ldr	r1, [pc, #32]	@ (8003108 <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	761a      	strb	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf28      	it	cs
 800312a:	2304      	movcs	r3, #4
 800312c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3304      	adds	r3, #4
 8003132:	2b06      	cmp	r3, #6
 8003134:	d902      	bls.n	800313c <NVIC_EncodePriority+0x30>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3b03      	subs	r3, #3
 800313a:	e000      	b.n	800313e <NVIC_EncodePriority+0x32>
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43d9      	mvns	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	4313      	orrs	r3, r2
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	@ 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003184:	d301      	bcc.n	800318a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003186:	2301      	movs	r3, #1
 8003188:	e00f      	b.n	80031aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <SysTick_Config+0x40>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003192:	210f      	movs	r1, #15
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	f7ff ff8e 	bl	80030b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <SysTick_Config+0x40>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a2:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <SysTick_Config+0x40>)
 80031a4:	2207      	movs	r2, #7
 80031a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	e000e010 	.word	0xe000e010

080031b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff29 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e0:	f7ff ff3e 	bl	8003060 <__NVIC_GetPriorityGrouping>
 80031e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff8e 	bl	800310c <NVIC_EncodePriority>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5d 	bl	80030b8 <__NVIC_SetPriority>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff31 	bl	800307c <__NVIC_EnableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ffa2 	bl	8003174 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7fe fd0e 	bl	8001c68 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e099      	b.n	800338c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003278:	e00f      	b.n	800329a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327a:	f7fe fcf5 	bl	8001c68 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b05      	cmp	r3, #5
 8003286:	d908      	bls.n	800329a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e078      	b.n	800338c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e8      	bne.n	800327a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4b38      	ldr	r3, [pc, #224]	@ (8003394 <HAL_DMA_Init+0x158>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	4313      	orrs	r3, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	2b04      	cmp	r3, #4
 800332c:	d117      	bne.n	800335e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fa89 	bl	8003858 <DMA_CheckFifoParam>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2240      	movs	r2, #64	@ 0x40
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800335a:	2301      	movs	r3, #1
 800335c:	e016      	b.n	800338c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa40 	bl	80037ec <DMA_CalcBaseAndBitshift>
 800336c:	4603      	mov	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	223f      	movs	r2, #63	@ 0x3f
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	e010803f 	.word	0xe010803f

08003398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7fe fc5f 	bl	8001c68 <HAL_GetTick>
 80033aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d008      	beq.n	80033ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e052      	b.n	8003470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0216 	bic.w	r2, r2, #22
 80033d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_DMA_Abort+0x62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0208 	bic.w	r2, r2, #8
 8003408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341a:	e013      	b.n	8003444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341c:	f7fe fc24 	bl	8001c68 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b05      	cmp	r3, #5
 8003428:	d90c      	bls.n	8003444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2203      	movs	r2, #3
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e015      	b.n	8003470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e4      	bne.n	800341c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003456:	223f      	movs	r2, #63	@ 0x3f
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	@ 0x80
 8003490:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00c      	b.n	80034b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2205      	movs	r2, #5
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003704 <HAL_DMA_IRQHandler+0x248>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003708 <HAL_DMA_IRQHandler+0x24c>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	2208      	movs	r2, #8
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	2208      	movs	r2, #8
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	2201      	movs	r2, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0202 	orr.w	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	2204      	movs	r2, #4
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003598:	2210      	movs	r2, #16
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d043      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03c      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	2210      	movs	r2, #16
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d024      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
 80035ea:	e01f      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e016      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0208 	bic.w	r2, r2, #8
 800361a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	2220      	movs	r2, #32
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 808f 	beq.w	800375c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8087 	beq.w	800375c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	2220      	movs	r2, #32
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b05      	cmp	r3, #5
 8003664:	d136      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0216 	bic.w	r2, r2, #22
 8003674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_DMA_IRQHandler+0x1da>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	223f      	movs	r2, #63	@ 0x3f
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d07e      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
        }
        return;
 80036d2:	e079      	b.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d031      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e02c      	b.n	800375c <HAL_DMA_IRQHandler+0x2a0>
 8003702:	bf00      	nop
 8003704:	20000000 	.word	0x20000000
 8003708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e01e      	b.n	800375c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0210 	bic.w	r2, r2, #16
 800373a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	d032      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2205      	movs	r2, #5
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3301      	adds	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	d307      	bcc.n	80037a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f2      	bne.n	8003788 <HAL_DMA_IRQHandler+0x2cc>
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e000      	b.n	80037ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80037c8:	bf00      	nop
    }
  }
}
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037de:	b2db      	uxtb	r3, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3b10      	subs	r3, #16
 80037fc:	4a14      	ldr	r2, [pc, #80]	@ (8003850 <DMA_CalcBaseAndBitshift+0x64>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003806:	4a13      	ldr	r2, [pc, #76]	@ (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d909      	bls.n	800382e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	659a      	str	r2, [r3, #88]	@ 0x58
 800382c:	e007      	b.n	800383e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	aaaaaaab 	.word	0xaaaaaaab
 8003854:	0800ba10 	.word	0x0800ba10

08003858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11f      	bne.n	80038b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d856      	bhi.n	8003926 <DMA_CheckFifoParam+0xce>
 8003878:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <DMA_CheckFifoParam+0x28>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a3 	.word	0x080038a3
 8003888:	08003891 	.word	0x08003891
 800388c:	08003927 	.word	0x08003927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d046      	beq.n	800392a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e043      	b.n	800392a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038aa:	d140      	bne.n	800392e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e03d      	b.n	800392e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ba:	d121      	bne.n	8003900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d837      	bhi.n	8003932 <DMA_CheckFifoParam+0xda>
 80038c2:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <DMA_CheckFifoParam+0x70>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038df 	.word	0x080038df
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	080038f1 	.word	0x080038f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e030      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d025      	beq.n	8003936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e022      	b.n	8003936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038f8:	d11f      	bne.n	800393a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038fe:	e01c      	b.n	800393a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d903      	bls.n	800390e <DMA_CheckFifoParam+0xb6>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d003      	beq.n	8003914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800390c:	e018      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      break;
 8003912:	e015      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e00b      	b.n	800393e <DMA_CheckFifoParam+0xe6>
      break;
 8003926:	bf00      	nop
 8003928:	e00a      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e008      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
 8003930:	e006      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;   
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
    }
  } 
  
  return status; 
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	@ 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e165      	b.n	8003c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	f040 8154 	bne.w	8003c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d005      	beq.n	80039a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d130      	bne.n	8003a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d017      	beq.n	8003a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d123      	bne.n	8003a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	220f      	movs	r2, #15
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ae 	beq.w	8003c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b5d      	ldr	r3, [pc, #372]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	4a5c      	ldr	r2, [pc, #368]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003af2:	4a58      	ldr	r2, [pc, #352]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4f      	ldr	r2, [pc, #316]	@ (8003c58 <HAL_GPIO_Init+0x308>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d025      	beq.n	8003b6a <HAL_GPIO_Init+0x21a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4e      	ldr	r2, [pc, #312]	@ (8003c5c <HAL_GPIO_Init+0x30c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01f      	beq.n	8003b66 <HAL_GPIO_Init+0x216>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4d      	ldr	r2, [pc, #308]	@ (8003c60 <HAL_GPIO_Init+0x310>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d019      	beq.n	8003b62 <HAL_GPIO_Init+0x212>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4c      	ldr	r2, [pc, #304]	@ (8003c64 <HAL_GPIO_Init+0x314>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_GPIO_Init+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4b      	ldr	r2, [pc, #300]	@ (8003c68 <HAL_GPIO_Init+0x318>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <HAL_GPIO_Init+0x20a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	@ (8003c6c <HAL_GPIO_Init+0x31c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <HAL_GPIO_Init+0x206>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a49      	ldr	r2, [pc, #292]	@ (8003c70 <HAL_GPIO_Init+0x320>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <HAL_GPIO_Init+0x202>
 8003b4e:	2306      	movs	r3, #6
 8003b50:	e00c      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b52:	2307      	movs	r3, #7
 8003b54:	e00a      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b56:	2305      	movs	r3, #5
 8003b58:	e008      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e006      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e004      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_GPIO_Init+0x21c>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f002 0203 	and.w	r2, r2, #3
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	4093      	lsls	r3, r2
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7c:	4935      	ldr	r1, [pc, #212]	@ (8003c54 <HAL_GPIO_Init+0x304>)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bae:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bd8:	4a26      	ldr	r2, [pc, #152]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bde:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c02:	4a1c      	ldr	r2, [pc, #112]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c2c:	4a11      	ldr	r2, [pc, #68]	@ (8003c74 <HAL_GPIO_Init+0x324>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3301      	adds	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	f67f ae96 	bls.w	800396c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3724      	adds	r7, #36	@ 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40013800 	.word	0x40013800
 8003c58:	40020000 	.word	0x40020000
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	40020800 	.word	0x40020800
 8003c64:	40020c00 	.word	0x40020c00
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40021400 	.word	0x40021400
 8003c70:	40021800 	.word	0x40021800
 8003c74:	40013c00 	.word	0x40013c00

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e12b      	b.n	8003f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd f96a 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	@ 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d10:	f002 fc44 	bl	800659c <HAL_RCC_GetPCLK1Freq>
 8003d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a81      	ldr	r2, [pc, #516]	@ (8003f20 <HAL_I2C_Init+0x274>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d807      	bhi.n	8003d30 <HAL_I2C_Init+0x84>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a80      	ldr	r2, [pc, #512]	@ (8003f24 <HAL_I2C_Init+0x278>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bf94      	ite	ls
 8003d28:	2301      	movls	r3, #1
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e006      	b.n	8003d3e <HAL_I2C_Init+0x92>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a7d      	ldr	r2, [pc, #500]	@ (8003f28 <HAL_I2C_Init+0x27c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bf94      	ite	ls
 8003d38:	2301      	movls	r3, #1
 8003d3a:	2300      	movhi	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0e7      	b.n	8003f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a78      	ldr	r2, [pc, #480]	@ (8003f2c <HAL_I2C_Init+0x280>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9b      	lsrs	r3, r3, #18
 8003d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a6a      	ldr	r2, [pc, #424]	@ (8003f20 <HAL_I2C_Init+0x274>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d802      	bhi.n	8003d80 <HAL_I2C_Init+0xd4>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	e009      	b.n	8003d94 <HAL_I2C_Init+0xe8>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	4a69      	ldr	r2, [pc, #420]	@ (8003f30 <HAL_I2C_Init+0x284>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	3301      	adds	r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003da6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	495c      	ldr	r1, [pc, #368]	@ (8003f20 <HAL_I2C_Init+0x274>)
 8003db0:	428b      	cmp	r3, r1
 8003db2:	d819      	bhi.n	8003de8 <HAL_I2C_Init+0x13c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1e59      	subs	r1, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003dc8:	400b      	ands	r3, r1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_I2C_Init+0x138>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1e59      	subs	r1, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de2:	e051      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003de4:	2304      	movs	r3, #4
 8003de6:	e04f      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d111      	bne.n	8003e14 <HAL_I2C_Init+0x168>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	440b      	add	r3, r1
 8003dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e012      	b.n	8003e3a <HAL_I2C_Init+0x18e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	0099      	lsls	r1, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x196>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10e      	bne.n	8003e68 <HAL_I2C_Init+0x1bc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e58      	subs	r0, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	440b      	add	r3, r1
 8003e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e66:	e00f      	b.n	8003e88 <HAL_I2C_Init+0x1dc>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	6809      	ldr	r1, [r1, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003eb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6911      	ldr	r1, [r2, #16]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68d2      	ldr	r2, [r2, #12]
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	000186a0 	.word	0x000186a0
 8003f24:	001e847f 	.word	0x001e847f
 8003f28:	003d08ff 	.word	0x003d08ff
 8003f2c:	431bde83 	.word	0x431bde83
 8003f30:	10624dd3 	.word	0x10624dd3

08003f34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	@ 0x30
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f4e:	f7fd fe8b 	bl	8001c68 <HAL_GetTick>
 8003f52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	f040 8208 	bne.w	8004372 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2319      	movs	r3, #25
 8003f68:	2201      	movs	r2, #1
 8003f6a:	497b      	ldr	r1, [pc, #492]	@ (8004158 <HAL_I2C_Mem_Read+0x224>)
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f001 ff73 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e1fb      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Mem_Read+0x56>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e1f4      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d007      	beq.n	8003fb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2222      	movs	r2, #34	@ 0x22
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2240      	movs	r2, #64	@ 0x40
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a5b      	ldr	r2, [pc, #364]	@ (800415c <HAL_I2C_Mem_Read+0x228>)
 8003ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ff2:	88f8      	ldrh	r0, [r7, #6]
 8003ff4:	893a      	ldrh	r2, [r7, #8]
 8003ff6:	8979      	ldrh	r1, [r7, #10]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	4603      	mov	r3, r0
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f001 fd98 	bl	8005b38 <I2C_RequestMemoryRead>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1b0      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e184      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	2b01      	cmp	r3, #1
 8004048:	d11b      	bne.n	8004082 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e164      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b02      	cmp	r3, #2
 8004088:	d11b      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004098:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	e144      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040d8:	e138      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	2b03      	cmp	r3, #3
 80040e0:	f200 80f1 	bhi.w	80042c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d123      	bne.n	8004134 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f001 fffb 	bl	80060ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e139      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004132:	e10b      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	2b02      	cmp	r3, #2
 800413a:	d14e      	bne.n	80041da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	2200      	movs	r2, #0
 8004144:	4906      	ldr	r1, [pc, #24]	@ (8004160 <HAL_I2C_Mem_Read+0x22c>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f001 fe86 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e10e      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
 8004156:	bf00      	nop
 8004158:	00100002 	.word	0x00100002
 800415c:	ffff0000 	.word	0xffff0000
 8004160:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041d8:	e0b8      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2200      	movs	r2, #0
 80041e2:	4966      	ldr	r1, [pc, #408]	@ (800437c <HAL_I2C_Mem_Read+0x448>)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f001 fe37 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0bf      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	2200      	movs	r2, #0
 800423e:	494f      	ldr	r1, [pc, #316]	@ (800437c <HAL_I2C_Mem_Read+0x448>)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f001 fe09 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e091      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042c4:	e042      	b.n	800434c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f001 ff0e 	bl	80060ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e04c      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d118      	bne.n	800434c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	f47f aec2 	bne.w	80040da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e000      	b.n	8004374 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
  }
}
 8004374:	4618      	mov	r0, r3
 8004376:	3728      	adds	r7, #40	@ 0x28
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	00010004 	.word	0x00010004

08004380 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d003      	beq.n	80043b8 <HAL_I2C_EV_IRQHandler+0x38>
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	f040 80c1 	bne.w	800453a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <HAL_I2C_EV_IRQHandler+0x6e>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80043d8:	d003      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x62>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80043e0:	d101      	bne.n	80043e6 <HAL_I2C_EV_IRQHandler+0x66>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_I2C_EV_IRQHandler+0x68>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	f000 8132 	beq.w	8004652 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00c      	beq.n	8004412 <HAL_I2C_EV_IRQHandler+0x92>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	0a5b      	lsrs	r3, r3, #9
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 fef6 	bl	80061f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fd79 	bl	8004f02 <I2C_Master_SB>
 8004410:	e092      	b.n	8004538 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	08db      	lsrs	r3, r3, #3
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_I2C_EV_IRQHandler+0xb2>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	0a5b      	lsrs	r3, r3, #9
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fdef 	bl	800500e <I2C_Master_ADD10>
 8004430:	e082      	b.n	8004538 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0xd2>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	0a5b      	lsrs	r3, r3, #9
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fe09 	bl	8005062 <I2C_Master_ADDR>
 8004450:	e072      	b.n	8004538 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d03b      	beq.n	80044d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800446c:	f000 80f3 	beq.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	09db      	lsrs	r3, r3, #7
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00f      	beq.n	800449c <HAL_I2C_EV_IRQHandler+0x11c>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_I2C_EV_IRQHandler+0x11c>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9f3 	bl	8004880 <I2C_MasterTransmit_TXE>
 800449a:	e04d      	b.n	8004538 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80d6 	beq.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	0a5b      	lsrs	r3, r3, #9
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80cf 	beq.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044b8:	7bbb      	ldrb	r3, [r7, #14]
 80044ba:	2b21      	cmp	r3, #33	@ 0x21
 80044bc:	d103      	bne.n	80044c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa7a 	bl	80049b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c4:	e0c7      	b.n	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b40      	cmp	r3, #64	@ 0x40
 80044ca:	f040 80c4 	bne.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fae8 	bl	8004aa4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d4:	e0bf      	b.n	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e4:	f000 80b7 	beq.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00f      	beq.n	8004514 <HAL_I2C_EV_IRQHandler+0x194>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	0a9b      	lsrs	r3, r3, #10
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <HAL_I2C_EV_IRQHandler+0x194>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fb5d 	bl	8004bcc <I2C_MasterReceive_RXNE>
 8004512:	e011      	b.n	8004538 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 809a 	beq.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	0a5b      	lsrs	r3, r3, #9
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8093 	beq.w	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fbfc 	bl	8004d2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004536:	e08e      	b.n	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004538:	e08d      	b.n	8004656 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e007      	b.n	800455c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d012      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x20e>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	0a5b      	lsrs	r3, r3, #9
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00c      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004584:	69b9      	ldr	r1, [r7, #24]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 ffba 	bl	8005500 <I2C_Slave_ADDR>
 800458c:	e066      	b.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_I2C_EV_IRQHandler+0x22e>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	0a5b      	lsrs	r3, r3, #9
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fff4 	bl	8005594 <I2C_Slave_STOPF>
 80045ac:	e056      	b.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045ae:	7bbb      	ldrb	r3, [r7, #14]
 80045b0:	2b21      	cmp	r3, #33	@ 0x21
 80045b2:	d002      	beq.n	80045ba <HAL_I2C_EV_IRQHandler+0x23a>
 80045b4:	7bbb      	ldrb	r3, [r7, #14]
 80045b6:	2b29      	cmp	r3, #41	@ 0x29
 80045b8:	d125      	bne.n	8004606 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	09db      	lsrs	r3, r3, #7
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00f      	beq.n	80045e6 <HAL_I2C_EV_IRQHandler+0x266>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	0a9b      	lsrs	r3, r3, #10
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_I2C_EV_IRQHandler+0x266>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fed0 	bl	8005384 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e4:	e039      	b.n	800465a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d033      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0x2da>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	0a5b      	lsrs	r3, r3, #9
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d02d      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fefd 	bl	80053fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004604:	e029      	b.n	800465a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00f      	beq.n	8004632 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	0a9b      	lsrs	r3, r3, #10
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_I2C_EV_IRQHandler+0x2b2>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 ff08 	bl	8005440 <I2C_SlaveReceive_RXNE>
 8004630:	e014      	b.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	0a5b      	lsrs	r3, r3, #9
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 ff36 	bl	80054bc <I2C_SlaveReceive_BTF>
 8004650:	e004      	b.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800465a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b08a      	sub	sp, #40	@ 0x28
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004684:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00e      	beq.n	80046b0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	0a5b      	lsrs	r3, r3, #9
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <HAL_I2C_ER_IRQHandler+0x78>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	f043 0302 	orr.w	r3, r3, #2
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80046d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	0a9b      	lsrs	r3, r3, #10
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03f      	beq.n	8004766 <HAL_I2C_ER_IRQHandler+0x104>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d039      	beq.n	8004766 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80046f2:	7efb      	ldrb	r3, [r7, #27]
 80046f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004704:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800470c:	7ebb      	ldrb	r3, [r7, #26]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d112      	bne.n	8004738 <HAL_I2C_ER_IRQHandler+0xd6>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10f      	bne.n	8004738 <HAL_I2C_ER_IRQHandler+0xd6>
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b21      	cmp	r3, #33	@ 0x21
 800471c:	d008      	beq.n	8004730 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800471e:	7cfb      	ldrb	r3, [r7, #19]
 8004720:	2b29      	cmp	r3, #41	@ 0x29
 8004722:	d005      	beq.n	8004730 <HAL_I2C_ER_IRQHandler+0xce>
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	2b28      	cmp	r3, #40	@ 0x28
 8004728:	d106      	bne.n	8004738 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b21      	cmp	r3, #33	@ 0x21
 800472e:	d103      	bne.n	8004738 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f001 f85f 	bl	80057f4 <I2C_Slave_AF>
 8004736:	e016      	b.n	8004766 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004740:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800474a:	7efb      	ldrb	r3, [r7, #27]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d002      	beq.n	8004756 <HAL_I2C_ER_IRQHandler+0xf4>
 8004750:	7efb      	ldrb	r3, [r7, #27]
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d107      	bne.n	8004766 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004764:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	0adb      	lsrs	r3, r3, #11
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <HAL_I2C_ER_IRQHandler+0x12e>
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	f043 0308 	orr.w	r3, r3, #8
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800478e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 f896 	bl	80058d4 <I2C_ITError>
  }
}
 80047a8:	bf00      	nop
 80047aa:	3728      	adds	r7, #40	@ 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
 800480c:	4613      	mov	r3, r2
 800480e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004896:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d150      	bne.n	8004948 <I2C_MasterTransmit_TXE+0xc8>
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b21      	cmp	r3, #33	@ 0x21
 80048aa:	d14d      	bne.n	8004948 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d01d      	beq.n	80048ee <I2C_MasterTransmit_TXE+0x6e>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d01a      	beq.n	80048ee <I2C_MasterTransmit_TXE+0x6e>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048be:	d016      	beq.n	80048ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2211      	movs	r2, #17
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ff62 	bl	80047b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ec:	e060      	b.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d107      	bne.n	8004938 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ff7d 	bl	8004830 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004936:	e03b      	b.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ff35 	bl	80047b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004946:	e033      	b.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b21      	cmp	r3, #33	@ 0x21
 800494c:	d005      	beq.n	800495a <I2C_MasterTransmit_TXE+0xda>
 800494e:	7bbb      	ldrb	r3, [r7, #14]
 8004950:	2b40      	cmp	r3, #64	@ 0x40
 8004952:	d12d      	bne.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b22      	cmp	r3, #34	@ 0x22
 8004958:	d12a      	bne.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004972:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004974:	e01c      	b.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b40      	cmp	r3, #64	@ 0x40
 8004980:	d103      	bne.n	800498a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f88e 	bl	8004aa4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004988:	e012      	b.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80049ae:	e7ff      	b.n	80049b0 <I2C_MasterTransmit_TXE+0x130>
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b21      	cmp	r3, #33	@ 0x21
 80049d0:	d164      	bne.n	8004a9c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d012      	beq.n	8004a02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a00:	e04c      	b.n	8004a9c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d01d      	beq.n	8004a44 <I2C_MasterTransmit_BTF+0x8c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d01a      	beq.n	8004a44 <I2C_MasterTransmit_BTF+0x8c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a14:	d016      	beq.n	8004a44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2211      	movs	r2, #17
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff feb7 	bl	80047b0 <HAL_I2C_MasterTxCpltCallback>
}
 8004a42:	e02b      	b.n	8004a9c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d107      	bne.n	8004a8e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fed2 	bl	8004830 <HAL_I2C_MemTxCpltCallback>
}
 8004a8c:	e006      	b.n	8004a9c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fe8a 	bl	80047b0 <HAL_I2C_MasterTxCpltCallback>
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d11d      	bne.n	8004af8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10b      	bne.n	8004adc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ada:	e073      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	121b      	asrs	r3, r3, #8
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004af6:	e065      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10b      	bne.n	8004b18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b16:	e055      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d151      	bne.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b22      	cmp	r3, #34	@ 0x22
 8004b24:	d10d      	bne.n	8004b42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b40:	e040      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b21      	cmp	r3, #33	@ 0x21
 8004b50:	d112      	bne.n	8004b78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b76:	e025      	b.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d120      	bne.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b21      	cmp	r3, #33	@ 0x21
 8004b86:	d11d      	bne.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fe36 	bl	8004830 <HAL_I2C_MemTxCpltCallback>
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b22      	cmp	r3, #34	@ 0x22
 8004bde:	f040 80a2 	bne.w	8004d26 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d921      	bls.n	8004c34 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	f040 8082 	bne.w	8004d26 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c30:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004c32:	e078      	b.n	8004d26 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d074      	beq.n	8004d26 <I2C_MasterReceive_RXNE+0x15a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d002      	beq.n	8004c48 <I2C_MasterReceive_RXNE+0x7c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d16e      	bne.n	8004d26 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 fa1d 	bl	8006088 <I2C_WaitOnSTOPRequestThroughIT>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d142      	bne.n	8004cda <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c62:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d10a      	bne.n	8004cc4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fdc1 	bl	8004844 <HAL_I2C_MemRxCpltCallback>
}
 8004cc2:	e030      	b.n	8004d26 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2212      	movs	r2, #18
 8004cd0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fd76 	bl	80047c4 <HAL_I2C_MasterRxCpltCallback>
}
 8004cd8:	e025      	b.n	8004d26 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ce8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff fd99 	bl	8004858 <HAL_I2C_ErrorCallback>
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d11b      	bne.n	8004d7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d7c:	e0bd      	b.n	8004efa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d129      	bne.n	8004ddc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d00a      	beq.n	8004db4 <I2C_MasterReceive_BTF+0x86>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d007      	beq.n	8004db4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004dda:	e08e      	b.n	8004efa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d176      	bne.n	8004ed4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d002      	beq.n	8004df2 <I2C_MasterReceive_BTF+0xc4>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d108      	bne.n	8004e04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e019      	b.n	8004e38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d002      	beq.n	8004e10 <I2C_MasterReceive_BTF+0xe2>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d108      	bne.n	8004e22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e00a      	b.n	8004e38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d007      	beq.n	8004e38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004e92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	d10a      	bne.n	8004ebe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fcc4 	bl	8004844 <HAL_I2C_MemRxCpltCallback>
}
 8004ebc:	e01d      	b.n	8004efa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2212      	movs	r2, #18
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fc79 	bl	80047c4 <HAL_I2C_MasterRxCpltCallback>
}
 8004ed2:	e012      	b.n	8004efa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b40      	cmp	r3, #64	@ 0x40
 8004f14:	d117      	bne.n	8004f46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f30:	e067      	b.n	8005002 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]
}
 8004f44:	e05d      	b.n	8005002 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f4e:	d133      	bne.n	8004fb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b21      	cmp	r3, #33	@ 0x21
 8004f5a:	d109      	bne.n	8004f70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f6c:	611a      	str	r2, [r3, #16]
 8004f6e:	e008      	b.n	8004f82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d004      	beq.n	8004f94 <I2C_Master_SB+0x92>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d108      	bne.n	8004fa6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d032      	beq.n	8005002 <I2C_Master_SB+0x100>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02d      	beq.n	8005002 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb4:	605a      	str	r2, [r3, #4]
}
 8004fb6:	e024      	b.n	8005002 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10e      	bne.n	8004fde <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	11db      	asrs	r3, r3, #7
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f003 0306 	and.w	r3, r3, #6
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f063 030f 	orn	r3, r3, #15
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]
}
 8004fdc:	e011      	b.n	8005002 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10d      	bne.n	8005002 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	11db      	asrs	r3, r3, #7
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 0306 	and.w	r3, r3, #6
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f063 030e 	orn	r3, r3, #14
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	b2da      	uxtb	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <I2C_Master_ADD10+0x26>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d108      	bne.n	8005046 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <I2C_Master_ADD10+0x48>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005054:	605a      	str	r2, [r3, #4]
  }
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005062:	b480      	push	{r7}
 8005064:	b091      	sub	sp, #68	@ 0x44
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005070:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b22      	cmp	r3, #34	@ 0x22
 800508a:	f040 8169 	bne.w	8005360 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <I2C_Master_ADDR+0x54>
 8005096:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800509a:	2b40      	cmp	r3, #64	@ 0x40
 800509c:	d10b      	bne.n	80050b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509e:	2300      	movs	r3, #0
 80050a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	e160      	b.n	8005378 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11d      	bne.n	80050fa <I2C_Master_ADDR+0x98>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050c6:	d118      	bne.n	80050fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c8:	2300      	movs	r3, #0
 80050ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80050f8:	e13e      	b.n	8005378 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005104:	2300      	movs	r3, #0
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e115      	b.n	8005358 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	f040 808a 	bne.w	800524c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800513e:	d137      	bne.n	80051b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800515e:	d113      	bne.n	8005188 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005170:	2300      	movs	r3, #0
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	e0e7      	b.n	8005358 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005188:	2300      	movs	r3, #0
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e0d3      	b.n	8005358 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80051b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d02e      	beq.n	8005214 <I2C_Master_ADDR+0x1b2>
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d02b      	beq.n	8005214 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80051bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051be:	2b12      	cmp	r3, #18
 80051c0:	d102      	bne.n	80051c8 <I2C_Master_ADDR+0x166>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d125      	bne.n	8005214 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d00e      	beq.n	80051ec <I2C_Master_ADDR+0x18a>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d00b      	beq.n	80051ec <I2C_Master_ADDR+0x18a>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d008      	beq.n	80051ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e007      	b.n	80051fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fc:	2300      	movs	r3, #0
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	e0a1      	b.n	8005358 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005222:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e085      	b.n	8005358 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d14d      	bne.n	80052f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	2b04      	cmp	r3, #4
 800525a:	d016      	beq.n	800528a <I2C_Master_ADDR+0x228>
 800525c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525e:	2b02      	cmp	r3, #2
 8005260:	d013      	beq.n	800528a <I2C_Master_ADDR+0x228>
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	2b10      	cmp	r3, #16
 8005266:	d010      	beq.n	800528a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005276:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e007      	b.n	800529a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005298:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a8:	d117      	bne.n	80052da <I2C_Master_ADDR+0x278>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b0:	d00b      	beq.n	80052ca <I2C_Master_ADDR+0x268>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d008      	beq.n	80052ca <I2C_Master_ADDR+0x268>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d005      	beq.n	80052ca <I2C_Master_ADDR+0x268>
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d002      	beq.n	80052ca <I2C_Master_ADDR+0x268>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d107      	bne.n	80052da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	e032      	b.n	8005358 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005300:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800530c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005310:	d117      	bne.n	8005342 <I2C_Master_ADDR+0x2e0>
 8005312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005314:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005318:	d00b      	beq.n	8005332 <I2C_Master_ADDR+0x2d0>
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	2b01      	cmp	r3, #1
 800531e:	d008      	beq.n	8005332 <I2C_Master_ADDR+0x2d0>
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	2b08      	cmp	r3, #8
 8005324:	d005      	beq.n	8005332 <I2C_Master_ADDR+0x2d0>
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	2b10      	cmp	r3, #16
 800532a:	d002      	beq.n	8005332 <I2C_Master_ADDR+0x2d0>
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	2b20      	cmp	r3, #32
 8005330:	d107      	bne.n	8005342 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005340:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800535e:	e00b      	b.n	8005378 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	e7ff      	b.n	8005378 <I2C_Master_ADDR+0x316>
 8005378:	bf00      	nop
 800537a:	3744      	adds	r7, #68	@ 0x44
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005392:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02b      	beq.n	80053f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	781a      	ldrb	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d114      	bne.n	80053f6 <I2C_SlaveTransmit_TXE+0x72>
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b29      	cmp	r3, #41	@ 0x29
 80053d0:	d111      	bne.n	80053f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2221      	movs	r2, #33	@ 0x21
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2228      	movs	r2, #40	@ 0x28
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff f9f1 	bl	80047d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02c      	beq.n	80054b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d114      	bne.n	80054b4 <I2C_SlaveReceive_RXNE+0x74>
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	2b2a      	cmp	r3, #42	@ 0x2a
 800548e:	d111      	bne.n	80054b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2222      	movs	r2, #34	@ 0x22
 80054a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2228      	movs	r2, #40	@ 0x28
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff f99c 	bl	80047ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d012      	beq.n	80054f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800551a:	2b28      	cmp	r3, #40	@ 0x28
 800551c:	d127      	bne.n	800556e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	81bb      	strh	r3, [r7, #12]
 8005550:	e002      	b.n	8005558 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005560:	89ba      	ldrh	r2, [r7, #12]
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff f94a 	bl	8004800 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800556c:	e00e      	b.n	800558c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f0:	d172      	bne.n	80056d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b22      	cmp	r3, #34	@ 0x22
 80055f6:	d002      	beq.n	80055fe <I2C_Slave_STOPF+0x6a>
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80055fc:	d135      	bne.n	800566a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005630:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe f8ca 	bl	80037d0 <HAL_DMA_GetState>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d049      	beq.n	80056d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	4a69      	ldr	r2, [pc, #420]	@ (80057ec <I2C_Slave_STOPF+0x258>)
 8005648:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd ff12 	bl	8003478 <HAL_DMA_Abort_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d03d      	beq.n	80056d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005664:	4610      	mov	r0, r2
 8005666:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005668:	e035      	b.n	80056d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	f043 0204 	orr.w	r2, r3, #4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800569c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe f894 	bl	80037d0 <HAL_DMA_GetState>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d014      	beq.n	80056d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b2:	4a4e      	ldr	r2, [pc, #312]	@ (80057ec <I2C_Slave_STOPF+0x258>)
 80056b4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fd fedc 	bl	8003478 <HAL_DMA_Abort_IT>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
 80056d4:	e000      	b.n	80056d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03e      	beq.n	8005760 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d112      	bne.n	8005716 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005720:	2b40      	cmp	r3, #64	@ 0x40
 8005722:	d112      	bne.n	800574a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	f043 0204 	orr.w	r2, r3, #4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f8b3 	bl	80058d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800576e:	e039      	b.n	80057e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b2a      	cmp	r3, #42	@ 0x2a
 8005774:	d109      	bne.n	800578a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2228      	movs	r2, #40	@ 0x28
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff f831 	bl	80047ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b28      	cmp	r3, #40	@ 0x28
 8005794:	d111      	bne.n	80057ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <I2C_Slave_STOPF+0x25c>)
 800579a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff f832 	bl	800481c <HAL_I2C_ListenCpltCallback>
}
 80057b8:	e014      	b.n	80057e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	2b22      	cmp	r3, #34	@ 0x22
 80057c0:	d002      	beq.n	80057c8 <I2C_Slave_STOPF+0x234>
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b22      	cmp	r3, #34	@ 0x22
 80057c6:	d10d      	bne.n	80057e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff f804 	bl	80047ec <HAL_I2C_SlaveRxCpltCallback>
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	08005d09 	.word	0x08005d09
 80057f0:	ffff0000 	.word	0xffff0000

080057f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005802:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b08      	cmp	r3, #8
 800580e:	d002      	beq.n	8005816 <I2C_Slave_AF+0x22>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b20      	cmp	r3, #32
 8005814:	d129      	bne.n	800586a <I2C_Slave_AF+0x76>
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b28      	cmp	r3, #40	@ 0x28
 800581a:	d126      	bne.n	800586a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2c      	ldr	r2, [pc, #176]	@ (80058d0 <I2C_Slave_AF+0xdc>)
 8005820:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005830:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800583a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fe ffda 	bl	800481c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005868:	e02e      	b.n	80058c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b21      	cmp	r3, #33	@ 0x21
 800586e:	d126      	bne.n	80058be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a17      	ldr	r2, [pc, #92]	@ (80058d0 <I2C_Slave_AF+0xdc>)
 8005874:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2221      	movs	r2, #33	@ 0x21
 800587a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800589a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fe ff8e 	bl	80047d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80058bc:	e004      	b.n	80058c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058c6:	615a      	str	r2, [r3, #20]
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	ffff0000 	.word	0xffff0000

080058d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d002      	beq.n	80058f8 <I2C_ITError+0x24>
 80058f2:	7bbb      	ldrb	r3, [r7, #14]
 80058f4:	2b40      	cmp	r3, #64	@ 0x40
 80058f6:	d10a      	bne.n	800590e <I2C_ITError+0x3a>
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b22      	cmp	r3, #34	@ 0x22
 80058fc:	d107      	bne.n	800590e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800590c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005914:	2b28      	cmp	r3, #40	@ 0x28
 8005916:	d107      	bne.n	8005928 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2228      	movs	r2, #40	@ 0x28
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005926:	e015      	b.n	8005954 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005936:	d00a      	beq.n	800594e <I2C_ITError+0x7a>
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b60      	cmp	r3, #96	@ 0x60
 800593c:	d007      	beq.n	800594e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800595e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005962:	d162      	bne.n	8005a2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005972:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d020      	beq.n	80059c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005986:	4a6a      	ldr	r2, [pc, #424]	@ (8005b30 <I2C_ITError+0x25c>)
 8005988:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	4618      	mov	r0, r3
 8005990:	f7fd fd72 	bl	8003478 <HAL_DMA_Abort_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8089 	beq.w	8005aae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059be:	4610      	mov	r0, r2
 80059c0:	4798      	blx	r3
 80059c2:	e074      	b.n	8005aae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	4a59      	ldr	r2, [pc, #356]	@ (8005b30 <I2C_ITError+0x25c>)
 80059ca:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fd fd51 	bl	8003478 <HAL_DMA_Abort_IT>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d068      	beq.n	8005aae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e6:	2b40      	cmp	r3, #64	@ 0x40
 80059e8:	d10b      	bne.n	8005a02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
 8005a28:	e041      	b.n	8005aae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b60      	cmp	r3, #96	@ 0x60
 8005a34:	d125      	bne.n	8005a82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d10b      	bne.n	8005a6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe fef6 	bl	800486c <HAL_I2C_AbortCpltCallback>
 8005a80:	e015      	b.n	8005aae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8c:	2b40      	cmp	r3, #64	@ 0x40
 8005a8e:	d10b      	bne.n	8005aa8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fe fed5 	bl	8004858 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10e      	bne.n	8005adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d113      	bne.n	8005b28 <I2C_ITError+0x254>
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b28      	cmp	r3, #40	@ 0x28
 8005b04:	d110      	bne.n	8005b28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <I2C_ITError+0x260>)
 8005b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fe fe7a 	bl	800481c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	08005d09 	.word	0x08005d09
 8005b34:	ffff0000 	.word	0xffff0000

08005b38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	4608      	mov	r0, r1
 8005b42:	4611      	mov	r1, r2
 8005b44:	461a      	mov	r2, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	817b      	strh	r3, [r7, #10]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	813b      	strh	r3, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f96a 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b98:	d103      	bne.n	8005ba2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0aa      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	4952      	ldr	r1, [pc, #328]	@ (8005d04 <I2C_RequestMemoryRead+0x1cc>)
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f9a2 	bl	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e097      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be4:	6a39      	ldr	r1, [r7, #32]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fa0c 	bl	8006004 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00d      	beq.n	8005c0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d107      	bne.n	8005c0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e076      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c14:	893b      	ldrh	r3, [r7, #8]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	e021      	b.n	8005c64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c20:	893b      	ldrh	r3, [r7, #8]
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c30:	6a39      	ldr	r1, [r7, #32]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f9e6 	bl	8006004 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d107      	bne.n	8005c56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e050      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c66:	6a39      	ldr	r1, [r7, #32]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f9cb 	bl	8006004 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00d      	beq.n	8005c90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d107      	bne.n	8005c8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e035      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f8d3 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc6:	d103      	bne.n	8005cd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e013      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cd4:	897b      	ldrh	r3, [r7, #10]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	4906      	ldr	r1, [pc, #24]	@ (8005d04 <I2C_RequestMemoryRead+0x1cc>)
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f90b 	bl	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	00010002 	.word	0x00010002

08005d08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d22:	4b4b      	ldr	r3, [pc, #300]	@ (8005e50 <I2C_DMAAbort+0x148>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	08db      	lsrs	r3, r3, #3
 8005d28:	4a4a      	ldr	r2, [pc, #296]	@ (8005e54 <I2C_DMAAbort+0x14c>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	0a1a      	lsrs	r2, r3, #8
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	00da      	lsls	r2, r3, #3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005d4e:	e00a      	b.n	8005d66 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d64:	d0ea      	beq.n	8005d3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d72:	2200      	movs	r2, #0
 8005d74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	2200      	movs	r2, #0
 8005d84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da8:	2200      	movs	r2, #0
 8005daa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db8:	2200      	movs	r2, #0
 8005dba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b60      	cmp	r3, #96	@ 0x60
 8005dd6:	d10e      	bne.n	8005df6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f7fe fd3c 	bl	800486c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005df4:	e027      	b.n	8005e46 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dfc:	2b28      	cmp	r3, #40	@ 0x28
 8005dfe:	d117      	bne.n	8005e30 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2228      	movs	r2, #40	@ 0x28
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e2e:	e007      	b.n	8005e40 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f7fe fd09 	bl	8004858 <HAL_I2C_ErrorCallback>
}
 8005e46:	bf00      	nop
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000000 	.word	0x20000000
 8005e54:	14f8b589 	.word	0x14f8b589

08005e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e68:	e025      	b.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d021      	beq.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fb fef9 	bl	8001c68 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d116      	bne.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e023      	b.n	8005efe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10d      	bne.n	8005edc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	43da      	mvns	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	e00c      	b.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	43da      	mvns	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d0b6      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f14:	e051      	b.n	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f24:	d123      	bne.n	8005f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5a:	f043 0204 	orr.w	r2, r3, #4
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e046      	b.n	8005ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d021      	beq.n	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f76:	f7fb fe77 	bl	8001c68 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d302      	bcc.n	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d116      	bne.n	8005fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e020      	b.n	8005ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d10c      	bne.n	8005fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	43da      	mvns	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e00b      	b.n	8005ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	43da      	mvns	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d18d      	bne.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006010:	e02d      	b.n	800606e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f8c0 	bl	8006198 <I2C_IsAcknowledgeFailed>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e02d      	b.n	800607e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d021      	beq.n	800606e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fb fe1d 	bl	8001c68 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d116      	bne.n	800606e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e007      	b.n	800607e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	2b80      	cmp	r3, #128	@ 0x80
 800607a:	d1ca      	bne.n	8006012 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006094:	4b13      	ldr	r3, [pc, #76]	@ (80060e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	4a13      	ldr	r2, [pc, #76]	@ (80060e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	0a1a      	lsrs	r2, r3, #8
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d107      	bne.n	80060c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e008      	b.n	80060d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d4:	d0e9      	beq.n	80060aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20000000 	.word	0x20000000
 80060e8:	14f8b589 	.word	0x14f8b589

080060ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060f8:	e042      	b.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b10      	cmp	r3, #16
 8006106:	d119      	bne.n	800613c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0210 	mvn.w	r2, #16
 8006110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e029      	b.n	8006190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613c:	f7fb fd94 	bl	8001c68 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	429a      	cmp	r2, r3
 800614a:	d302      	bcc.n	8006152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d116      	bne.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e007      	b.n	8006190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618a:	2b40      	cmp	r3, #64	@ 0x40
 800618c:	d1b5      	bne.n	80060fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ae:	d11b      	bne.n	80061e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	f043 0204 	orr.w	r2, r3, #4
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006206:	d103      	bne.n	8006210 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800620e:	e007      	b.n	8006220 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006218:	d102      	bne.n	8006220 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2208      	movs	r2, #8
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0cc      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006240:	4b68      	ldr	r3, [pc, #416]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d90c      	bls.n	8006268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b65      	ldr	r3, [pc, #404]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b63      	ldr	r3, [pc, #396]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0b8      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006280:	4b59      	ldr	r3, [pc, #356]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a58      	ldr	r2, [pc, #352]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800628a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006298:	4b53      	ldr	r3, [pc, #332]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4a52      	ldr	r2, [pc, #328]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a4:	4b50      	ldr	r3, [pc, #320]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	494d      	ldr	r1, [pc, #308]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d044      	beq.n	800634c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ca:	4b47      	ldr	r3, [pc, #284]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d119      	bne.n	800630a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e07f      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d003      	beq.n	80062ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d107      	bne.n	80062fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ea:	4b3f      	ldr	r3, [pc, #252]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e06f      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fa:	4b3b      	ldr	r3, [pc, #236]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e067      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800630a:	4b37      	ldr	r3, [pc, #220]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f023 0203 	bic.w	r2, r3, #3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	4934      	ldr	r1, [pc, #208]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	4313      	orrs	r3, r2
 800631a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800631c:	f7fb fca4 	bl	8001c68 <HAL_GetTick>
 8006320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006322:	e00a      	b.n	800633a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006324:	f7fb fca0 	bl	8001c68 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e04f      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633a:	4b2b      	ldr	r3, [pc, #172]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 020c 	and.w	r2, r3, #12
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	429a      	cmp	r2, r3
 800634a:	d1eb      	bne.n	8006324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800634c:	4b25      	ldr	r3, [pc, #148]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d20c      	bcs.n	8006374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635a:	4b22      	ldr	r3, [pc, #136]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006362:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d001      	beq.n	8006374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e032      	b.n	80063da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006380:	4b19      	ldr	r3, [pc, #100]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4916      	ldr	r1, [pc, #88]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800639e:	4b12      	ldr	r3, [pc, #72]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	490e      	ldr	r1, [pc, #56]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063b2:	f000 f821 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 80063b6:	4602      	mov	r2, r0
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	490a      	ldr	r1, [pc, #40]	@ (80063ec <HAL_RCC_ClockConfig+0x1c0>)
 80063c4:	5ccb      	ldrb	r3, [r1, r3]
 80063c6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ca:	4a09      	ldr	r2, [pc, #36]	@ (80063f0 <HAL_RCC_ClockConfig+0x1c4>)
 80063cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063ce:	4b09      	ldr	r3, [pc, #36]	@ (80063f4 <HAL_RCC_ClockConfig+0x1c8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fb fc04 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023c00 	.word	0x40023c00
 80063e8:	40023800 	.word	0x40023800
 80063ec:	0800b9f8 	.word	0x0800b9f8
 80063f0:	20000000 	.word	0x20000000
 80063f4:	20000004 	.word	0x20000004

080063f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063fc:	b090      	sub	sp, #64	@ 0x40
 80063fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
 8006404:	2300      	movs	r3, #0
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006408:	2300      	movs	r3, #0
 800640a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006410:	4b59      	ldr	r3, [pc, #356]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x180>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b08      	cmp	r3, #8
 800641a:	d00d      	beq.n	8006438 <HAL_RCC_GetSysClockFreq+0x40>
 800641c:	2b08      	cmp	r3, #8
 800641e:	f200 80a1 	bhi.w	8006564 <HAL_RCC_GetSysClockFreq+0x16c>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x34>
 8006426:	2b04      	cmp	r3, #4
 8006428:	d003      	beq.n	8006432 <HAL_RCC_GetSysClockFreq+0x3a>
 800642a:	e09b      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800642c:	4b53      	ldr	r3, [pc, #332]	@ (800657c <HAL_RCC_GetSysClockFreq+0x184>)
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006430:	e09b      	b.n	800656a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006432:	4b53      	ldr	r3, [pc, #332]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x188>)
 8006434:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006436:	e098      	b.n	800656a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006438:	4b4f      	ldr	r3, [pc, #316]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x180>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006442:	4b4d      	ldr	r3, [pc, #308]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x180>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d028      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800644e:	4b4a      	ldr	r3, [pc, #296]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x180>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	099b      	lsrs	r3, r3, #6
 8006454:	2200      	movs	r2, #0
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	627a      	str	r2, [r7, #36]	@ 0x24
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006460:	2100      	movs	r1, #0
 8006462:	4b47      	ldr	r3, [pc, #284]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x188>)
 8006464:	fb03 f201 	mul.w	r2, r3, r1
 8006468:	2300      	movs	r3, #0
 800646a:	fb00 f303 	mul.w	r3, r0, r3
 800646e:	4413      	add	r3, r2
 8006470:	4a43      	ldr	r2, [pc, #268]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x188>)
 8006472:	fba0 1202 	umull	r1, r2, r0, r2
 8006476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006478:	460a      	mov	r2, r1
 800647a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800647c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800647e:	4413      	add	r3, r2
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006484:	2200      	movs	r2, #0
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	61fa      	str	r2, [r7, #28]
 800648a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800648e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006492:	f7f9 fec5 	bl	8000220 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4613      	mov	r3, r2
 800649c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800649e:	e053      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a0:	4b35      	ldr	r3, [pc, #212]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x180>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	099b      	lsrs	r3, r3, #6
 80064a6:	2200      	movs	r2, #0
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	617a      	str	r2, [r7, #20]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064b2:	f04f 0b00 	mov.w	fp, #0
 80064b6:	4652      	mov	r2, sl
 80064b8:	465b      	mov	r3, fp
 80064ba:	f04f 0000 	mov.w	r0, #0
 80064be:	f04f 0100 	mov.w	r1, #0
 80064c2:	0159      	lsls	r1, r3, #5
 80064c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064c8:	0150      	lsls	r0, r2, #5
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	ebb2 080a 	subs.w	r8, r2, sl
 80064d2:	eb63 090b 	sbc.w	r9, r3, fp
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80064e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80064e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80064ea:	ebb2 0408 	subs.w	r4, r2, r8
 80064ee:	eb63 0509 	sbc.w	r5, r3, r9
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	00eb      	lsls	r3, r5, #3
 80064fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006500:	00e2      	lsls	r2, r4, #3
 8006502:	4614      	mov	r4, r2
 8006504:	461d      	mov	r5, r3
 8006506:	eb14 030a 	adds.w	r3, r4, sl
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	eb45 030b 	adc.w	r3, r5, fp
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800651e:	4629      	mov	r1, r5
 8006520:	028b      	lsls	r3, r1, #10
 8006522:	4621      	mov	r1, r4
 8006524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006528:	4621      	mov	r1, r4
 800652a:	028a      	lsls	r2, r1, #10
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	2200      	movs	r2, #0
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	60fa      	str	r2, [r7, #12]
 8006538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653c:	f7f9 fe70 	bl	8000220 <__aeabi_uldivmod>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4613      	mov	r3, r2
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006548:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x180>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	3301      	adds	r3, #1
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006558:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006560:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006562:	e002      	b.n	800656a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <HAL_RCC_GetSysClockFreq+0x184>)
 8006566:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800656c:	4618      	mov	r0, r3
 800656e:	3740      	adds	r7, #64	@ 0x40
 8006570:	46bd      	mov	sp, r7
 8006572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800
 800657c:	00f42400 	.word	0x00f42400
 8006580:	017d7840 	.word	0x017d7840

08006584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006588:	4b03      	ldr	r3, [pc, #12]	@ (8006598 <HAL_RCC_GetHCLKFreq+0x14>)
 800658a:	681b      	ldr	r3, [r3, #0]
}
 800658c:	4618      	mov	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000000 	.word	0x20000000

0800659c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065a0:	f7ff fff0 	bl	8006584 <HAL_RCC_GetHCLKFreq>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	0a9b      	lsrs	r3, r3, #10
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	4903      	ldr	r1, [pc, #12]	@ (80065c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b2:	5ccb      	ldrb	r3, [r1, r3]
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40023800 	.word	0x40023800
 80065c0:	0800ba08 	.word	0x0800ba08

080065c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065c8:	f7ff ffdc 	bl	8006584 <HAL_RCC_GetHCLKFreq>
 80065cc:	4602      	mov	r2, r0
 80065ce:	4b05      	ldr	r3, [pc, #20]	@ (80065e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	0b5b      	lsrs	r3, r3, #13
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	4903      	ldr	r1, [pc, #12]	@ (80065e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065da:	5ccb      	ldrb	r3, [r1, r3]
 80065dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40023800 	.word	0x40023800
 80065e8:	0800ba08 	.word	0x0800ba08

080065ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e273      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d075      	beq.n	80066f6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800660a:	4b88      	ldr	r3, [pc, #544]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b04      	cmp	r3, #4
 8006614:	d00c      	beq.n	8006630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006616:	4b85      	ldr	r3, [pc, #532]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800661e:	2b08      	cmp	r3, #8
 8006620:	d112      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006622:	4b82      	ldr	r3, [pc, #520]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800662e:	d10b      	bne.n	8006648 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	4b7e      	ldr	r3, [pc, #504]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d05b      	beq.n	80066f4 <HAL_RCC_OscConfig+0x108>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d157      	bne.n	80066f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e24e      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006650:	d106      	bne.n	8006660 <HAL_RCC_OscConfig+0x74>
 8006652:	4b76      	ldr	r3, [pc, #472]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a75      	ldr	r2, [pc, #468]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e01d      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x98>
 800666a:	4b70      	ldr	r3, [pc, #448]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a6f      	ldr	r2, [pc, #444]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b6d      	ldr	r3, [pc, #436]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a6c      	ldr	r2, [pc, #432]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e00b      	b.n	800669c <HAL_RCC_OscConfig+0xb0>
 8006684:	4b69      	ldr	r3, [pc, #420]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a68      	ldr	r2, [pc, #416]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800668a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4b66      	ldr	r3, [pc, #408]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a65      	ldr	r2, [pc, #404]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800669a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fb fae0 	bl	8001c68 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fb fadc 	bl	8001c68 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	@ 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e213      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066be:	4b5b      	ldr	r3, [pc, #364]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0xc0>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fb facc 	bl	8001c68 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fb fac8 	bl	8001c68 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	@ 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e1ff      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e6:	4b51      	ldr	r3, [pc, #324]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0xe8>
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d063      	beq.n	80067ca <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006702:	4b4a      	ldr	r3, [pc, #296]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 030c 	and.w	r3, r3, #12
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800670e:	4b47      	ldr	r3, [pc, #284]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006716:	2b08      	cmp	r3, #8
 8006718:	d11c      	bne.n	8006754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800671a:	4b44      	ldr	r3, [pc, #272]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d116      	bne.n	8006754 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006726:	4b41      	ldr	r3, [pc, #260]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_RCC_OscConfig+0x152>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d001      	beq.n	800673e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e1d3      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673e:	4b3b      	ldr	r3, [pc, #236]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4937      	ldr	r1, [pc, #220]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006752:	e03a      	b.n	80067ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d020      	beq.n	800679e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800675c:	4b34      	ldr	r3, [pc, #208]	@ (8006830 <HAL_RCC_OscConfig+0x244>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb fa81 	bl	8001c68 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800676a:	f7fb fa7d 	bl	8001c68 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e1b4      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677c:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006788:	4b28      	ldr	r3, [pc, #160]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4925      	ldr	r1, [pc, #148]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
 800679c:	e015      	b.n	80067ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800679e:	4b24      	ldr	r3, [pc, #144]	@ (8006830 <HAL_RCC_OscConfig+0x244>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fb fa60 	bl	8001c68 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ac:	f7fb fa5c 	bl	8001c68 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e193      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067be:	4b1b      	ldr	r3, [pc, #108]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d036      	beq.n	8006844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067de:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <HAL_RCC_OscConfig+0x248>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fb fa40 	bl	8001c68 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ec:	f7fb fa3c 	bl	8001c68 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e173      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <HAL_RCC_OscConfig+0x240>)
 8006800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x200>
 800680a:	e01b      	b.n	8006844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800680c:	4b09      	ldr	r3, [pc, #36]	@ (8006834 <HAL_RCC_OscConfig+0x248>)
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006812:	f7fb fa29 	bl	8001c68 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006818:	e00e      	b.n	8006838 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800681a:	f7fb fa25 	bl	8001c68 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d907      	bls.n	8006838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e15c      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
 800682c:	40023800 	.word	0x40023800
 8006830:	42470000 	.word	0x42470000
 8006834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006838:	4b8a      	ldr	r3, [pc, #552]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 800683a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ea      	bne.n	800681a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8097 	beq.w	8006980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006856:	4b83      	ldr	r3, [pc, #524]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10f      	bne.n	8006882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	4b7f      	ldr	r3, [pc, #508]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006870:	6413      	str	r3, [r2, #64]	@ 0x40
 8006872:	4b7c      	ldr	r3, [pc, #496]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687e:	2301      	movs	r3, #1
 8006880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006882:	4b79      	ldr	r3, [pc, #484]	@ (8006a68 <HAL_RCC_OscConfig+0x47c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d118      	bne.n	80068c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800688e:	4b76      	ldr	r3, [pc, #472]	@ (8006a68 <HAL_RCC_OscConfig+0x47c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a75      	ldr	r2, [pc, #468]	@ (8006a68 <HAL_RCC_OscConfig+0x47c>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689a:	f7fb f9e5 	bl	8001c68 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a2:	f7fb f9e1 	bl	8001c68 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e118      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006a68 <HAL_RCC_OscConfig+0x47c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x2ea>
 80068c8:	4b66      	ldr	r3, [pc, #408]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	4a65      	ldr	r2, [pc, #404]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d4:	e01c      	b.n	8006910 <HAL_RCC_OscConfig+0x324>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x30c>
 80068de:	4b61      	ldr	r3, [pc, #388]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e2:	4a60      	ldr	r2, [pc, #384]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068e4:	f043 0304 	orr.w	r3, r3, #4
 80068e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ea:	4b5e      	ldr	r3, [pc, #376]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	4a5d      	ldr	r2, [pc, #372]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f6:	e00b      	b.n	8006910 <HAL_RCC_OscConfig+0x324>
 80068f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fc:	4a59      	ldr	r2, [pc, #356]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	6713      	str	r3, [r2, #112]	@ 0x70
 8006904:	4b57      	ldr	r3, [pc, #348]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006908:	4a56      	ldr	r2, [pc, #344]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fb f9a6 	bl	8001c68 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691e:	e00a      	b.n	8006936 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006920:	f7fb f9a2 	bl	8001c68 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e0d7      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006936:	4b4b      	ldr	r3, [pc, #300]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ee      	beq.n	8006920 <HAL_RCC_OscConfig+0x334>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fb f990 	bl	8001c68 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fb f98c 	bl	8001c68 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e0c1      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006962:	4b40      	ldr	r3, [pc, #256]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ee      	bne.n	800694c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d105      	bne.n	8006980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006974:	4b3b      	ldr	r3, [pc, #236]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	4a3a      	ldr	r2, [pc, #232]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 800697a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800697e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80ad 	beq.w	8006ae4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800698a:	4b36      	ldr	r3, [pc, #216]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b08      	cmp	r3, #8
 8006994:	d060      	beq.n	8006a58 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d145      	bne.n	8006a2a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699e:	4b33      	ldr	r3, [pc, #204]	@ (8006a6c <HAL_RCC_OscConfig+0x480>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fb f960 	bl	8001c68 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ac:	f7fb f95c 	bl	8001c68 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e093      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069be:	4b29      	ldr	r3, [pc, #164]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69da      	ldr	r2, [r3, #28]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	019b      	lsls	r3, r3, #6
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	3b01      	subs	r3, #1
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	071b      	lsls	r3, r3, #28
 80069f6:	491b      	ldr	r1, [pc, #108]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a6c <HAL_RCC_OscConfig+0x480>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a02:	f7fb f931 	bl	8001c68 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0a:	f7fb f92d 	bl	8001c68 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e064      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1c:	4b11      	ldr	r3, [pc, #68]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x41e>
 8006a28:	e05c      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2a:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_RCC_OscConfig+0x480>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fb f91a 	bl	8001c68 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fb f916 	bl	8001c68 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e04d      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4a:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <HAL_RCC_OscConfig+0x478>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x44c>
 8006a56:	e045      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d107      	bne.n	8006a70 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e040      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40007000 	.word	0x40007000
 8006a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a70:	4b1f      	ldr	r3, [pc, #124]	@ (8006af0 <HAL_RCC_OscConfig+0x504>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d030      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d129      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d122      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d119      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d10f      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40023800 	.word	0x40023800

08006af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e07b      	b.n	8006bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d108      	bne.n	8006b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b16:	d009      	beq.n	8006b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	61da      	str	r2, [r3, #28]
 8006b1e:	e005      	b.n	8006b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fa fb92 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb0:	ea42 0103 	orr.w	r1, r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	f003 0104 	and.w	r1, r3, #4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	f003 0210 	and.w	r2, r3, #16
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_SPI_Transmit+0x22>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e126      	b.n	8006e76 <HAL_SPI_Transmit+0x270>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c30:	f7fb f81a 	bl	8001c68 <HAL_GetTick>
 8006c34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
 8006c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c4a:	e10b      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_SPI_Transmit+0x52>
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c5c:	e102      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2203      	movs	r2, #3
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca4:	d10f      	bne.n	8006cc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b40      	cmp	r3, #64	@ 0x40
 8006cd2:	d007      	beq.n	8006ce4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cec:	d14b      	bne.n	8006d86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_SPI_Transmit+0xf6>
 8006cf6:	8afb      	ldrh	r3, [r7, #22]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d13e      	bne.n	8006d7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0c:	1c9a      	adds	r2, r3, #2
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d20:	e02b      	b.n	8006d7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d112      	bne.n	8006d56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d40:	1c9a      	adds	r2, r3, #2
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d54:	e011      	b.n	8006d7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d56:	f7fa ff87 	bl	8001c68 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d803      	bhi.n	8006d6e <HAL_SPI_Transmit+0x168>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_Transmit+0x16e>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d78:	e074      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1ce      	bne.n	8006d22 <HAL_SPI_Transmit+0x11c>
 8006d84:	e04c      	b.n	8006e20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_SPI_Transmit+0x18e>
 8006d8e:	8afb      	ldrh	r3, [r7, #22]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d140      	bne.n	8006e16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dba:	e02c      	b.n	8006e16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d113      	bne.n	8006df2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006df0:	e011      	b.n	8006e16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df2:	f7fa ff39 	bl	8001c68 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d803      	bhi.n	8006e0a <HAL_SPI_Transmit+0x204>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e08:	d102      	bne.n	8006e10 <HAL_SPI_Transmit+0x20a>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e14:	e026      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1cd      	bne.n	8006dbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fce9 	bl	80077fc <SPI_EndRxTxTransaction>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e000      	b.n	8006e64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b088      	sub	sp, #32
 8006e82:	af02      	add	r7, sp, #8
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	603b      	str	r3, [r7, #0]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e9a:	d112      	bne.n	8006ec2 <HAL_SPI_Receive+0x44>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10e      	bne.n	8006ec2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006eac:	88fa      	ldrh	r2, [r7, #6]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f8f1 	bl	80070a0 <HAL_SPI_TransmitReceive>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	e0ea      	b.n	8007098 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_SPI_Receive+0x52>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e0e3      	b.n	8007098 <HAL_SPI_Receive+0x21a>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed8:	f7fa fec6 	bl	8001c68 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
 8006eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eee:	e0ca      	b.n	8007086 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Receive+0x7e>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f00:	e0c1      	b.n	8007086 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2204      	movs	r2, #4
 8006f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f48:	d10f      	bne.n	8006f6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f74:	2b40      	cmp	r3, #64	@ 0x40
 8006f76:	d007      	beq.n	8006f88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d162      	bne.n	8007056 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f90:	e02e      	b.n	8006ff0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d115      	bne.n	8006fcc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f103 020c 	add.w	r2, r3, #12
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fca:	e011      	b.n	8006ff0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fcc:	f7fa fe4c 	bl	8001c68 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d803      	bhi.n	8006fe4 <HAL_SPI_Receive+0x166>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d102      	bne.n	8006fea <HAL_SPI_Receive+0x16c>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fee:	e04a      	b.n	8007086 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1cb      	bne.n	8006f92 <HAL_SPI_Receive+0x114>
 8006ffa:	e031      	b.n	8007060 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d113      	bne.n	8007032 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007014:	b292      	uxth	r2, r2
 8007016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007030:	e011      	b.n	8007056 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007032:	f7fa fe19 	bl	8001c68 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d803      	bhi.n	800704a <HAL_SPI_Receive+0x1cc>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d102      	bne.n	8007050 <HAL_SPI_Receive+0x1d2>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007054:	e017      	b.n	8007086 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1cd      	bne.n	8006ffc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fb63 	bl	8007730 <SPI_EndRxTransaction>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
 8007082:	e000      	b.n	8007086 <HAL_SPI_Receive+0x208>
  }

error :
 8007084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	@ 0x30
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070ae:	2301      	movs	r3, #1
 80070b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_SPI_TransmitReceive+0x26>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e18a      	b.n	80073dc <HAL_SPI_TransmitReceive+0x33c>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ce:	f7fa fdcb 	bl	8001c68 <HAL_GetTick>
 80070d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d00f      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x70>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070f6:	d107      	bne.n	8007108 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <HAL_SPI_TransmitReceive+0x68>
 8007100:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007104:	2b04      	cmp	r3, #4
 8007106:	d003      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007108:	2302      	movs	r3, #2
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800710e:	e15b      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_SPI_TransmitReceive+0x82>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SPI_TransmitReceive+0x82>
 800711c:	887b      	ldrh	r3, [r7, #2]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007128:	e14e      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b04      	cmp	r3, #4
 8007134:	d003      	beq.n	800713e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2205      	movs	r2, #5
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	887a      	ldrh	r2, [r7, #2]
 800714e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	887a      	ldrh	r2, [r7, #2]
 8007154:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	887a      	ldrh	r2, [r7, #2]
 8007160:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	887a      	ldrh	r2, [r7, #2]
 8007166:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717e:	2b40      	cmp	r3, #64	@ 0x40
 8007180:	d007      	beq.n	8007192 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719a:	d178      	bne.n	800728e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_SPI_TransmitReceive+0x10a>
 80071a4:	8b7b      	ldrh	r3, [r7, #26]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d166      	bne.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ae:	881a      	ldrh	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	1c9a      	adds	r2, r3, #2
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ce:	e053      	b.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d11b      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x176>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d016      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x176>
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d113      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fe:	1c9a      	adds	r2, r3, #2
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d119      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x1b8>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d014      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	b292      	uxth	r2, r2
 800723a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	1c9a      	adds	r2, r3, #2
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007258:	f7fa fd06 	bl	8001c68 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007264:	429a      	cmp	r2, r3
 8007266:	d807      	bhi.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d003      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007276:	e0a7      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1a6      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x130>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1a1      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x130>
 800728c:	e07c      	b.n	8007388 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_TransmitReceive+0x1fc>
 8007296:	8b7b      	ldrh	r3, [r7, #26]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d16b      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c2:	e057      	b.n	8007374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d11c      	bne.n	800730c <HAL_SPI_TransmitReceive+0x26c>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d017      	beq.n	800730c <HAL_SPI_TransmitReceive+0x26c>
 80072dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d114      	bne.n	800730c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d119      	bne.n	800734e <HAL_SPI_TransmitReceive+0x2ae>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d014      	beq.n	800734e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800734a:	2301      	movs	r3, #1
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800734e:	f7fa fc8b 	bl	8001c68 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800735a:	429a      	cmp	r2, r3
 800735c:	d803      	bhi.n	8007366 <HAL_SPI_TransmitReceive+0x2c6>
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d102      	bne.n	800736c <HAL_SPI_TransmitReceive+0x2cc>
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007372:	e029      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1a2      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x224>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d19d      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800738a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fa35 	bl	80077fc <SPI_EndRxTxTransaction>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80073a4:	e010      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	e000      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80073c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80073d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3730      	adds	r7, #48	@ 0x30
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10f      	bne.n	8007428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	099b      	lsrs	r3, r3, #6
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
    return;
 8007426:	e0d7      	b.n	80075d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_SPI_IRQHandler+0x66>
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	09db      	lsrs	r3, r3, #7
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
    return;
 8007448:	e0c6      	b.n	80075d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10c      	bne.n	8007470 <HAL_SPI_IRQHandler+0x8c>
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	099b      	lsrs	r3, r3, #6
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80b4 	beq.w	80075d8 <HAL_SPI_IRQHandler+0x1f4>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80ad 	beq.w	80075d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	099b      	lsrs	r3, r3, #6
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d023      	beq.n	80074d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d011      	beq.n	80074ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	e00b      	b.n	80074d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	693b      	ldr	r3, [r7, #16]
        return;
 80074d0:	e082      	b.n	80075d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e2:	f043 0201 	orr.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	f043 0208 	orr.w	r2, r3, #8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007520:	2300      	movs	r3, #0
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	60bb      	str	r3, [r7, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	2b00      	cmp	r3, #0
 8007534:	d04f      	beq.n	80075d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007544:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <HAL_SPI_IRQHandler+0x17e>
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d034      	beq.n	80075cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0203 	bic.w	r2, r2, #3
 8007570:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d011      	beq.n	800759e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800757e:	4a18      	ldr	r2, [pc, #96]	@ (80075e0 <HAL_SPI_IRQHandler+0x1fc>)
 8007580:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007586:	4618      	mov	r0, r3
 8007588:	f7fb ff76 	bl	8003478 <HAL_DMA_Abort_IT>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075aa:	4a0d      	ldr	r2, [pc, #52]	@ (80075e0 <HAL_SPI_IRQHandler+0x1fc>)
 80075ac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fb ff60 	bl	8003478 <HAL_DMA_Abort_IT>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80075ca:	e003      	b.n	80075d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f809 	bl	80075e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075d2:	e000      	b.n	80075d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80075d4:	bf00      	nop
    return;
 80075d6:	bf00      	nop
  }
}
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	080075f9 	.word	0x080075f9

080075e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff ffe6 	bl	80075e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007630:	f7fa fb1a 	bl	8001c68 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4413      	add	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007640:	f7fa fb12 	bl	8001c68 <HAL_GetTick>
 8007644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007646:	4b39      	ldr	r3, [pc, #228]	@ (800772c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	015b      	lsls	r3, r3, #5
 800764c:	0d1b      	lsrs	r3, r3, #20
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	fb02 f303 	mul.w	r3, r2, r3
 8007654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007656:	e054      	b.n	8007702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d050      	beq.n	8007702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007660:	f7fa fb02 	bl	8001c68 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	429a      	cmp	r2, r3
 800766e:	d902      	bls.n	8007676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d13d      	bne.n	80076f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800768e:	d111      	bne.n	80076b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007698:	d004      	beq.n	80076a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a2:	d107      	bne.n	80076b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076bc:	d10f      	bne.n	80076de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e017      	b.n	8007722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	3b01      	subs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4013      	ands	r3, r2
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	429a      	cmp	r2, r3
 8007710:	bf0c      	ite	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	2300      	movne	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	429a      	cmp	r2, r3
 800771e:	d19b      	bne.n	8007658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000000 	.word	0x20000000

08007730 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007744:	d111      	bne.n	800776a <SPI_EndRxTransaction+0x3a>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774e:	d004      	beq.n	800775a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007758:	d107      	bne.n	800776a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007768:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007772:	d12a      	bne.n	80077ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777c:	d012      	beq.n	80077a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	2180      	movs	r1, #128	@ 0x80
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff ff49 	bl	8007620 <SPI_WaitFlagStateUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d02d      	beq.n	80077f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007798:	f043 0220 	orr.w	r2, r3, #32
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e026      	b.n	80077f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	2101      	movs	r1, #1
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7ff ff36 	bl	8007620 <SPI_WaitFlagStateUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01a      	beq.n	80077f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077be:	f043 0220 	orr.w	r2, r3, #32
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e013      	b.n	80077f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2200      	movs	r2, #0
 80077d2:	2101      	movs	r1, #1
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff ff23 	bl	8007620 <SPI_WaitFlagStateUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e4:	f043 0220 	orr.w	r2, r3, #32
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e000      	b.n	80077f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af02      	add	r7, sp, #8
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007808:	4b1b      	ldr	r3, [pc, #108]	@ (8007878 <SPI_EndRxTxTransaction+0x7c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1b      	ldr	r2, [pc, #108]	@ (800787c <SPI_EndRxTxTransaction+0x80>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	0d5b      	lsrs	r3, r3, #21
 8007814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007826:	d112      	bne.n	800784e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2200      	movs	r2, #0
 8007830:	2180      	movs	r1, #128	@ 0x80
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fef4 	bl	8007620 <SPI_WaitFlagStateUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d016      	beq.n	800786c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	f043 0220 	orr.w	r2, r3, #32
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e00f      	b.n	800786e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	3b01      	subs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007864:	2b80      	cmp	r3, #128	@ 0x80
 8007866:	d0f2      	beq.n	800784e <SPI_EndRxTxTransaction+0x52>
 8007868:	e000      	b.n	800786c <SPI_EndRxTxTransaction+0x70>
        break;
 800786a:	bf00      	nop
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000000 	.word	0x20000000
 800787c:	165e9f81 	.word	0x165e9f81

08007880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e03f      	b.n	8007912 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7f9 fe5c 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2224      	movs	r2, #36	@ 0x24
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fd7b 	bl	80083c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695a      	ldr	r2, [r3, #20]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b08a      	sub	sp, #40	@ 0x28
 800791e:	af02      	add	r7, sp, #8
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b20      	cmp	r3, #32
 8007938:	d17c      	bne.n	8007a34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <HAL_UART_Transmit+0x2c>
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e075      	b.n	8007a36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_UART_Transmit+0x3e>
 8007954:	2302      	movs	r3, #2
 8007956:	e06e      	b.n	8007a36 <HAL_UART_Transmit+0x11c>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2221      	movs	r2, #33	@ 0x21
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800796e:	f7fa f97b 	bl	8001c68 <HAL_GetTick>
 8007972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007988:	d108      	bne.n	800799c <HAL_UART_Transmit+0x82>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	e003      	b.n	80079a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80079ac:	e02a      	b.n	8007a04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2200      	movs	r2, #0
 80079b6:	2180      	movs	r1, #128	@ 0x80
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 faf9 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e036      	b.n	8007a36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	3302      	adds	r3, #2
 80079e2:	61bb      	str	r3, [r7, #24]
 80079e4:	e007      	b.n	80079f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	3301      	adds	r3, #1
 80079f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1cf      	bne.n	80079ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	2140      	movs	r1, #64	@ 0x40
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fac9 	bl	8007fb0 <UART_WaitOnFlagUntilTimeout>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e006      	b.n	8007a36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b0ba      	sub	sp, #232	@ 0xe8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10f      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x66>
 8007a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fbd3 	bl	800824a <UART_Receive_IT>
      return;
 8007aa4:	e256      	b.n	8007f54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80de 	beq.w	8007c6c <HAL_UART_IRQHandler+0x22c>
 8007ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80d1 	beq.w	8007c6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xae>
 8007ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae6:	f043 0201 	orr.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <HAL_UART_IRQHandler+0xd2>
 8007afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0a:	f043 0202 	orr.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <HAL_UART_IRQHandler+0xf6>
 8007b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2e:	f043 0204 	orr.w	r2, r3, #4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d011      	beq.n	8007b66 <HAL_UART_IRQHandler+0x126>
 8007b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	f043 0208 	orr.w	r2, r3, #8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 81ed 	beq.w	8007f4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <HAL_UART_IRQHandler+0x14e>
 8007b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fb5e 	bl	800824a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b98:	2b40      	cmp	r3, #64	@ 0x40
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d103      	bne.n	8007bba <HAL_UART_IRQHandler+0x17a>
 8007bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d04f      	beq.n	8007c5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa66 	bl	800808c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bca:	2b40      	cmp	r3, #64	@ 0x40
 8007bcc:	d141      	bne.n	8007c52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3314      	adds	r3, #20
 8007bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007be8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3314      	adds	r3, #20
 8007bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1d9      	bne.n	8007bce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d013      	beq.n	8007c4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c26:	4a7d      	ldr	r2, [pc, #500]	@ (8007e1c <HAL_UART_IRQHandler+0x3dc>)
 8007c28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fb fc22 	bl	8003478 <HAL_DMA_Abort_IT>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d016      	beq.n	8007c68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	e00e      	b.n	8007c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f99a 	bl	8007f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	e00a      	b.n	8007c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f996 	bl	8007f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	e006      	b.n	8007c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f992 	bl	8007f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007c66:	e170      	b.n	8007f4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c68:	bf00      	nop
    return;
 8007c6a:	e16e      	b.n	8007f4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	f040 814a 	bne.w	8007f0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 8143 	beq.w	8007f0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 813c 	beq.w	8007f0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c92:	2300      	movs	r3, #0
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb2:	2b40      	cmp	r3, #64	@ 0x40
 8007cb4:	f040 80b4 	bne.w	8007e20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8140 	beq.w	8007f4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f080 8139 	bcs.w	8007f4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ce2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cee:	f000 8088 	beq.w	8007e02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1d9      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3314      	adds	r3, #20
 8007d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e1      	bne.n	8007d3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3314      	adds	r3, #20
 8007d9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007da0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007da4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e3      	bne.n	8007d7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dd2:	f023 0310 	bic.w	r3, r3, #16
 8007dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007de4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007de6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e3      	bne.n	8007dc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fb facb 	bl	8003398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8c0 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e18:	e099      	b.n	8007f4e <HAL_UART_IRQHandler+0x50e>
 8007e1a:	bf00      	nop
 8007e1c:	08008153 	.word	0x08008153
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 808b 	beq.w	8007f52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8086 	beq.w	8007f52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e3      	bne.n	8007e46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3314      	adds	r3, #20
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ea2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e3      	bne.n	8007e7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0310 	bic.w	r3, r3, #16
 8007eda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ee8:	61fa      	str	r2, [r7, #28]
 8007eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	69b9      	ldr	r1, [r7, #24]
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e3      	bne.n	8007ec4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f848 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f08:	e023      	b.n	8007f52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <HAL_UART_IRQHandler+0x4ea>
 8007f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f929 	bl	800817a <UART_Transmit_IT>
    return;
 8007f28:	e014      	b.n	8007f54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00e      	beq.n	8007f54 <HAL_UART_IRQHandler+0x514>
 8007f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f969 	bl	800821a <UART_EndTransmit_IT>
    return;
 8007f48:	e004      	b.n	8007f54 <HAL_UART_IRQHandler+0x514>
    return;
 8007f4a:	bf00      	nop
 8007f4c:	e002      	b.n	8007f54 <HAL_UART_IRQHandler+0x514>
      return;
 8007f4e:	bf00      	nop
 8007f50:	e000      	b.n	8007f54 <HAL_UART_IRQHandler+0x514>
      return;
 8007f52:	bf00      	nop
  }
}
 8007f54:	37e8      	adds	r7, #232	@ 0xe8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop

08007f5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b090      	sub	sp, #64	@ 0x40
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc0:	e050      	b.n	8008064 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d04c      	beq.n	8008064 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fd0:	f7f9 fe4a 	bl	8001c68 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d241      	bcs.n	8008064 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008000:	637a      	str	r2, [r7, #52]	@ 0x34
 8008002:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e5      	bne.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	613b      	str	r3, [r7, #16]
   return(result);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3314      	adds	r3, #20
 8008032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008034:	623a      	str	r2, [r7, #32]
 8008036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	61bb      	str	r3, [r7, #24]
   return(result);
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e00f      	b.n	8008084 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4013      	ands	r3, r2
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	429a      	cmp	r2, r3
 8008072:	bf0c      	ite	eq
 8008074:	2301      	moveq	r3, #1
 8008076:	2300      	movne	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	429a      	cmp	r2, r3
 8008080:	d09f      	beq.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3740      	adds	r7, #64	@ 0x40
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b095      	sub	sp, #84	@ 0x54
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330c      	adds	r3, #12
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e5      	bne.n	8008094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3314      	adds	r3, #20
 80080ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3314      	adds	r3, #20
 80080e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e5      	bne.n	80080c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	2b01      	cmp	r3, #1
 8008102:	d119      	bne.n	8008138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60bb      	str	r3, [r7, #8]
   return(result);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0310 	bic.w	r3, r3, #16
 800811a:	647b      	str	r3, [r7, #68]	@ 0x44
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008124:	61ba      	str	r2, [r7, #24]
 8008126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6979      	ldr	r1, [r7, #20]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	613b      	str	r3, [r7, #16]
   return(result);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e5      	bne.n	8008104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008146:	bf00      	nop
 8008148:	3754      	adds	r7, #84	@ 0x54
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff ff09 	bl	8007f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008172:	bf00      	nop
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b21      	cmp	r3, #33	@ 0x21
 800818c:	d13e      	bne.n	800820c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008196:	d114      	bne.n	80081c2 <UART_Transmit_IT+0x48>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d110      	bne.n	80081c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	1c9a      	adds	r2, r3, #2
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]
 80081c0:	e008      	b.n	80081d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	1c59      	adds	r1, r3, #1
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6211      	str	r1, [r2, #32]
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	b29b      	uxth	r3, r3
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	4619      	mov	r1, r3
 80081e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10f      	bne.n	8008208 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008206:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	e000      	b.n	800820e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800820c:	2302      	movs	r3, #2
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008230:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff fe8e 	bl	8007f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08c      	sub	sp, #48	@ 0x30
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b22      	cmp	r3, #34	@ 0x22
 800825c:	f040 80ab 	bne.w	80083b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008268:	d117      	bne.n	800829a <UART_Receive_IT+0x50>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d113      	bne.n	800829a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008288:	b29a      	uxth	r2, r3
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008292:	1c9a      	adds	r2, r3, #2
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	629a      	str	r2, [r3, #40]	@ 0x28
 8008298:	e026      	b.n	80082e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ac:	d007      	beq.n	80082be <UART_Receive_IT+0x74>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10a      	bne.n	80082cc <UART_Receive_IT+0x82>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	e008      	b.n	80082de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4619      	mov	r1, r3
 80082f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d15a      	bne.n	80083b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0220 	bic.w	r2, r2, #32
 800830a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800831a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	695a      	ldr	r2, [r3, #20]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008338:	2b01      	cmp	r3, #1
 800833a:	d135      	bne.n	80083a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	330c      	adds	r3, #12
 8008348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	613b      	str	r3, [r7, #16]
   return(result);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f023 0310 	bic.w	r3, r3, #16
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008362:	623a      	str	r2, [r7, #32]
 8008364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	69f9      	ldr	r1, [r7, #28]
 8008368:	6a3a      	ldr	r2, [r7, #32]
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0310 	and.w	r3, r3, #16
 8008380:	2b10      	cmp	r3, #16
 8008382:	d10a      	bne.n	800839a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff fdf9 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
 80083a6:	e002      	b.n	80083ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fde1 	bl	8007f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e002      	b.n	80083b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e000      	b.n	80083b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083b6:	2302      	movs	r3, #2
  }
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3730      	adds	r7, #48	@ 0x30
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083c4:	b0c0      	sub	sp, #256	@ 0x100
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80083d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083dc:	68d9      	ldr	r1, [r3, #12]
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	ea40 0301 	orr.w	r3, r0, r1
 80083e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	431a      	orrs	r2, r3
 80083f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	431a      	orrs	r2, r3
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800840c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008418:	f021 010c 	bic.w	r1, r1, #12
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008426:	430b      	orrs	r3, r1
 8008428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800842a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800843a:	6999      	ldr	r1, [r3, #24]
 800843c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	ea40 0301 	orr.w	r3, r0, r1
 8008446:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b95      	ldr	r3, [pc, #596]	@ (80086a4 <UART_SetConfig+0x2e4>)
 8008450:	429a      	cmp	r2, r3
 8008452:	d011      	beq.n	8008478 <UART_SetConfig+0xb8>
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	4b93      	ldr	r3, [pc, #588]	@ (80086a8 <UART_SetConfig+0x2e8>)
 800845c:	429a      	cmp	r2, r3
 800845e:	d00b      	beq.n	8008478 <UART_SetConfig+0xb8>
 8008460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4b91      	ldr	r3, [pc, #580]	@ (80086ac <UART_SetConfig+0x2ec>)
 8008468:	429a      	cmp	r2, r3
 800846a:	d005      	beq.n	8008478 <UART_SetConfig+0xb8>
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b8f      	ldr	r3, [pc, #572]	@ (80086b0 <UART_SetConfig+0x2f0>)
 8008474:	429a      	cmp	r2, r3
 8008476:	d104      	bne.n	8008482 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008478:	f7fe f8a4 	bl	80065c4 <HAL_RCC_GetPCLK2Freq>
 800847c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008480:	e003      	b.n	800848a <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008482:	f7fe f88b 	bl	800659c <HAL_RCC_GetPCLK1Freq>
 8008486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008494:	f040 8110 	bne.w	80086b8 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800849c:	2200      	movs	r2, #0
 800849e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80084a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80084aa:	4622      	mov	r2, r4
 80084ac:	462b      	mov	r3, r5
 80084ae:	1891      	adds	r1, r2, r2
 80084b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80084b2:	415b      	adcs	r3, r3
 80084b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80084ba:	4621      	mov	r1, r4
 80084bc:	eb12 0801 	adds.w	r8, r2, r1
 80084c0:	4629      	mov	r1, r5
 80084c2:	eb43 0901 	adc.w	r9, r3, r1
 80084c6:	f04f 0200 	mov.w	r2, #0
 80084ca:	f04f 0300 	mov.w	r3, #0
 80084ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084da:	4690      	mov	r8, r2
 80084dc:	4699      	mov	r9, r3
 80084de:	4623      	mov	r3, r4
 80084e0:	eb18 0303 	adds.w	r3, r8, r3
 80084e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084e8:	462b      	mov	r3, r5
 80084ea:	eb49 0303 	adc.w	r3, r9, r3
 80084ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008506:	460b      	mov	r3, r1
 8008508:	18db      	adds	r3, r3, r3
 800850a:	653b      	str	r3, [r7, #80]	@ 0x50
 800850c:	4613      	mov	r3, r2
 800850e:	eb42 0303 	adc.w	r3, r2, r3
 8008512:	657b      	str	r3, [r7, #84]	@ 0x54
 8008514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800851c:	f7f7 fe80 	bl	8000220 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4b63      	ldr	r3, [pc, #396]	@ (80086b4 <UART_SetConfig+0x2f4>)
 8008526:	fba3 2302 	umull	r2, r3, r3, r2
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	011c      	lsls	r4, r3, #4
 800852e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008532:	2200      	movs	r2, #0
 8008534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800853c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	1891      	adds	r1, r2, r2
 8008546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008548:	415b      	adcs	r3, r3
 800854a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800854c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008550:	4641      	mov	r1, r8
 8008552:	eb12 0a01 	adds.w	sl, r2, r1
 8008556:	4649      	mov	r1, r9
 8008558:	eb43 0b01 	adc.w	fp, r3, r1
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800856c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008570:	4692      	mov	sl, r2
 8008572:	469b      	mov	fp, r3
 8008574:	4643      	mov	r3, r8
 8008576:	eb1a 0303 	adds.w	r3, sl, r3
 800857a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800857e:	464b      	mov	r3, r9
 8008580:	eb4b 0303 	adc.w	r3, fp, r3
 8008584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800859c:	460b      	mov	r3, r1
 800859e:	18db      	adds	r3, r3, r3
 80085a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80085a2:	4613      	mov	r3, r2
 80085a4:	eb42 0303 	adc.w	r3, r2, r3
 80085a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80085b2:	f7f7 fe35 	bl	8000220 <__aeabi_uldivmod>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	4b3d      	ldr	r3, [pc, #244]	@ (80086b4 <UART_SetConfig+0x2f4>)
 80085be:	fba3 2301 	umull	r2, r3, r3, r1
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	2264      	movs	r2, #100	@ 0x64
 80085c6:	fb02 f303 	mul.w	r3, r2, r3
 80085ca:	1acb      	subs	r3, r1, r3
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80085d2:	4b38      	ldr	r3, [pc, #224]	@ (80086b4 <UART_SetConfig+0x2f4>)
 80085d4:	fba3 2302 	umull	r2, r3, r3, r2
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80085e0:	441c      	add	r4, r3
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80085f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	1891      	adds	r1, r2, r2
 80085fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80085fc:	415b      	adcs	r3, r3
 80085fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008604:	4641      	mov	r1, r8
 8008606:	1851      	adds	r1, r2, r1
 8008608:	6339      	str	r1, [r7, #48]	@ 0x30
 800860a:	4649      	mov	r1, r9
 800860c:	414b      	adcs	r3, r1
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800861c:	4659      	mov	r1, fp
 800861e:	00cb      	lsls	r3, r1, #3
 8008620:	4651      	mov	r1, sl
 8008622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008626:	4651      	mov	r1, sl
 8008628:	00ca      	lsls	r2, r1, #3
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	4603      	mov	r3, r0
 8008630:	4642      	mov	r2, r8
 8008632:	189b      	adds	r3, r3, r2
 8008634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008638:	464b      	mov	r3, r9
 800863a:	460a      	mov	r2, r1
 800863c:	eb42 0303 	adc.w	r3, r2, r3
 8008640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008658:	460b      	mov	r3, r1
 800865a:	18db      	adds	r3, r3, r3
 800865c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800865e:	4613      	mov	r3, r2
 8008660:	eb42 0303 	adc.w	r3, r2, r3
 8008664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800866a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800866e:	f7f7 fdd7 	bl	8000220 <__aeabi_uldivmod>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4b0f      	ldr	r3, [pc, #60]	@ (80086b4 <UART_SetConfig+0x2f4>)
 8008678:	fba3 1302 	umull	r1, r3, r3, r2
 800867c:	095b      	lsrs	r3, r3, #5
 800867e:	2164      	movs	r1, #100	@ 0x64
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	3332      	adds	r3, #50	@ 0x32
 800868a:	4a0a      	ldr	r2, [pc, #40]	@ (80086b4 <UART_SetConfig+0x2f4>)
 800868c:	fba2 2303 	umull	r2, r3, r2, r3
 8008690:	095b      	lsrs	r3, r3, #5
 8008692:	f003 0207 	and.w	r2, r3, #7
 8008696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4422      	add	r2, r4
 800869e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086a0:	e10a      	b.n	80088b8 <UART_SetConfig+0x4f8>
 80086a2:	bf00      	nop
 80086a4:	40011000 	.word	0x40011000
 80086a8:	40011400 	.word	0x40011400
 80086ac:	40011800 	.word	0x40011800
 80086b0:	40011c00 	.word	0x40011c00
 80086b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80086c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80086ca:	4642      	mov	r2, r8
 80086cc:	464b      	mov	r3, r9
 80086ce:	1891      	adds	r1, r2, r2
 80086d0:	6239      	str	r1, [r7, #32]
 80086d2:	415b      	adcs	r3, r3
 80086d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086da:	4641      	mov	r1, r8
 80086dc:	1854      	adds	r4, r2, r1
 80086de:	4649      	mov	r1, r9
 80086e0:	eb43 0501 	adc.w	r5, r3, r1
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	00eb      	lsls	r3, r5, #3
 80086ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086f2:	00e2      	lsls	r2, r4, #3
 80086f4:	4614      	mov	r4, r2
 80086f6:	461d      	mov	r5, r3
 80086f8:	4643      	mov	r3, r8
 80086fa:	18e3      	adds	r3, r4, r3
 80086fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008700:	464b      	mov	r3, r9
 8008702:	eb45 0303 	adc.w	r3, r5, r3
 8008706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008726:	4629      	mov	r1, r5
 8008728:	008b      	lsls	r3, r1, #2
 800872a:	4621      	mov	r1, r4
 800872c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008730:	4621      	mov	r1, r4
 8008732:	008a      	lsls	r2, r1, #2
 8008734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008738:	f7f7 fd72 	bl	8000220 <__aeabi_uldivmod>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4b60      	ldr	r3, [pc, #384]	@ (80088c4 <UART_SetConfig+0x504>)
 8008742:	fba3 2302 	umull	r2, r3, r3, r2
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	011c      	lsls	r4, r3, #4
 800874a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800874e:	2200      	movs	r2, #0
 8008750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800875c:	4642      	mov	r2, r8
 800875e:	464b      	mov	r3, r9
 8008760:	1891      	adds	r1, r2, r2
 8008762:	61b9      	str	r1, [r7, #24]
 8008764:	415b      	adcs	r3, r3
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800876c:	4641      	mov	r1, r8
 800876e:	1851      	adds	r1, r2, r1
 8008770:	6139      	str	r1, [r7, #16]
 8008772:	4649      	mov	r1, r9
 8008774:	414b      	adcs	r3, r1
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008784:	4659      	mov	r1, fp
 8008786:	00cb      	lsls	r3, r1, #3
 8008788:	4651      	mov	r1, sl
 800878a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800878e:	4651      	mov	r1, sl
 8008790:	00ca      	lsls	r2, r1, #3
 8008792:	4610      	mov	r0, r2
 8008794:	4619      	mov	r1, r3
 8008796:	4603      	mov	r3, r0
 8008798:	4642      	mov	r2, r8
 800879a:	189b      	adds	r3, r3, r2
 800879c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087a0:	464b      	mov	r3, r9
 80087a2:	460a      	mov	r2, r1
 80087a4:	eb42 0303 	adc.w	r3, r2, r3
 80087a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80087c4:	4649      	mov	r1, r9
 80087c6:	008b      	lsls	r3, r1, #2
 80087c8:	4641      	mov	r1, r8
 80087ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087ce:	4641      	mov	r1, r8
 80087d0:	008a      	lsls	r2, r1, #2
 80087d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80087d6:	f7f7 fd23 	bl	8000220 <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	4b38      	ldr	r3, [pc, #224]	@ (80088c4 <UART_SetConfig+0x504>)
 80087e2:	fba3 2301 	umull	r2, r3, r3, r1
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2264      	movs	r2, #100	@ 0x64
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	1acb      	subs	r3, r1, r3
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	3332      	adds	r3, #50	@ 0x32
 80087f4:	4a33      	ldr	r2, [pc, #204]	@ (80088c4 <UART_SetConfig+0x504>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008800:	441c      	add	r4, r3
 8008802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008806:	2200      	movs	r2, #0
 8008808:	673b      	str	r3, [r7, #112]	@ 0x70
 800880a:	677a      	str	r2, [r7, #116]	@ 0x74
 800880c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008810:	4642      	mov	r2, r8
 8008812:	464b      	mov	r3, r9
 8008814:	1891      	adds	r1, r2, r2
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	415b      	adcs	r3, r3
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008820:	4641      	mov	r1, r8
 8008822:	1851      	adds	r1, r2, r1
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	4649      	mov	r1, r9
 8008828:	414b      	adcs	r3, r1
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	f04f 0200 	mov.w	r2, #0
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008838:	4659      	mov	r1, fp
 800883a:	00cb      	lsls	r3, r1, #3
 800883c:	4651      	mov	r1, sl
 800883e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008842:	4651      	mov	r1, sl
 8008844:	00ca      	lsls	r2, r1, #3
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	4603      	mov	r3, r0
 800884c:	4642      	mov	r2, r8
 800884e:	189b      	adds	r3, r3, r2
 8008850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008852:	464b      	mov	r3, r9
 8008854:	460a      	mov	r2, r1
 8008856:	eb42 0303 	adc.w	r3, r2, r3
 800885a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	663b      	str	r3, [r7, #96]	@ 0x60
 8008866:	667a      	str	r2, [r7, #100]	@ 0x64
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008874:	4649      	mov	r1, r9
 8008876:	008b      	lsls	r3, r1, #2
 8008878:	4641      	mov	r1, r8
 800887a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800887e:	4641      	mov	r1, r8
 8008880:	008a      	lsls	r2, r1, #2
 8008882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008886:	f7f7 fccb 	bl	8000220 <__aeabi_uldivmod>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4b0d      	ldr	r3, [pc, #52]	@ (80088c4 <UART_SetConfig+0x504>)
 8008890:	fba3 1302 	umull	r1, r3, r3, r2
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	2164      	movs	r1, #100	@ 0x64
 8008898:	fb01 f303 	mul.w	r3, r1, r3
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	3332      	adds	r3, #50	@ 0x32
 80088a2:	4a08      	ldr	r2, [pc, #32]	@ (80088c4 <UART_SetConfig+0x504>)
 80088a4:	fba2 2303 	umull	r2, r3, r2, r3
 80088a8:	095b      	lsrs	r3, r3, #5
 80088aa:	f003 020f 	and.w	r2, r3, #15
 80088ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4422      	add	r2, r4
 80088b6:	609a      	str	r2, [r3, #8]
}
 80088b8:	bf00      	nop
 80088ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80088be:	46bd      	mov	sp, r7
 80088c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c4:	51eb851f 	.word	0x51eb851f

080088c8 <__NVIC_SetPriority>:
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db0a      	blt.n	80088f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	490c      	ldr	r1, [pc, #48]	@ (8008914 <__NVIC_SetPriority+0x4c>)
 80088e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e6:	0112      	lsls	r2, r2, #4
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	440b      	add	r3, r1
 80088ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80088f0:	e00a      	b.n	8008908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	4908      	ldr	r1, [pc, #32]	@ (8008918 <__NVIC_SetPriority+0x50>)
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	3b04      	subs	r3, #4
 8008900:	0112      	lsls	r2, r2, #4
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	440b      	add	r3, r1
 8008906:	761a      	strb	r2, [r3, #24]
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	e000e100 	.word	0xe000e100
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008920:	2100      	movs	r1, #0
 8008922:	f06f 0004 	mvn.w	r0, #4
 8008926:	f7ff ffcf 	bl	80088c8 <__NVIC_SetPriority>
#endif
}
 800892a:	bf00      	nop
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008936:	f3ef 8305 	mrs	r3, IPSR
 800893a:	603b      	str	r3, [r7, #0]
  return(result);
 800893c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008942:	f06f 0305 	mvn.w	r3, #5
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	e00c      	b.n	8008964 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800894a:	4b0a      	ldr	r3, [pc, #40]	@ (8008974 <osKernelInitialize+0x44>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008952:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <osKernelInitialize+0x44>)
 8008954:	2201      	movs	r2, #1
 8008956:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008958:	2300      	movs	r3, #0
 800895a:	607b      	str	r3, [r7, #4]
 800895c:	e002      	b.n	8008964 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008964:	687b      	ldr	r3, [r7, #4]
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000558 	.word	0x20000558

08008978 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897e:	f3ef 8305 	mrs	r3, IPSR
 8008982:	603b      	str	r3, [r7, #0]
  return(result);
 8008984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <osKernelStart+0x1a>
    stat = osErrorISR;
 800898a:	f06f 0305 	mvn.w	r3, #5
 800898e:	607b      	str	r3, [r7, #4]
 8008990:	e010      	b.n	80089b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008992:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <osKernelStart+0x48>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d109      	bne.n	80089ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800899a:	f7ff ffbf 	bl	800891c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800899e:	4b08      	ldr	r3, [pc, #32]	@ (80089c0 <osKernelStart+0x48>)
 80089a0:	2202      	movs	r2, #2
 80089a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089a4:	f001 fada 	bl	8009f5c <vTaskStartScheduler>
      stat = osOK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	e002      	b.n	80089b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295
 80089b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089b4:	687b      	ldr	r3, [r7, #4]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000558 	.word	0x20000558

080089c4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ca:	f3ef 8305 	mrs	r3, IPSR
 80089ce:	603b      	str	r3, [r7, #0]
  return(result);
 80089d0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80089d6:	f001 fbe5 	bl	800a1a4 <xTaskGetTickCountFromISR>
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	e002      	b.n	80089e4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80089de:	f001 fbd1 	bl	800a184 <xTaskGetTickCount>
 80089e2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80089e4:	687b      	ldr	r3, [r7, #4]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b08e      	sub	sp, #56	@ 0x38
 80089f2:	af04      	add	r7, sp, #16
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089fe:	f3ef 8305 	mrs	r3, IPSR
 8008a02:	617b      	str	r3, [r7, #20]
  return(result);
 8008a04:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d17e      	bne.n	8008b08 <osThreadNew+0x11a>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d07b      	beq.n	8008b08 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a10:	2380      	movs	r3, #128	@ 0x80
 8008a12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a14:	2318      	movs	r3, #24
 8008a16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d045      	beq.n	8008ab4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <osThreadNew+0x48>
        name = attr->name;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d008      	beq.n	8008a5c <osThreadNew+0x6e>
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2b38      	cmp	r3, #56	@ 0x38
 8008a4e:	d805      	bhi.n	8008a5c <osThreadNew+0x6e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <osThreadNew+0x72>
        return (NULL);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e054      	b.n	8008b0a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	089b      	lsrs	r3, r3, #2
 8008a6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00e      	beq.n	8008a96 <osThreadNew+0xa8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	2b5b      	cmp	r3, #91	@ 0x5b
 8008a7e:	d90a      	bls.n	8008a96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d006      	beq.n	8008a96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <osThreadNew+0xa8>
        mem = 1;
 8008a90:	2301      	movs	r3, #1
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	e010      	b.n	8008ab8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10c      	bne.n	8008ab8 <osThreadNew+0xca>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d108      	bne.n	8008ab8 <osThreadNew+0xca>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d104      	bne.n	8008ab8 <osThreadNew+0xca>
          mem = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61bb      	str	r3, [r7, #24]
 8008ab2:	e001      	b.n	8008ab8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d110      	bne.n	8008ae0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ac6:	9202      	str	r2, [sp, #8]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f001 f81b 	bl	8009b10 <xTaskCreateStatic>
 8008ada:	4603      	mov	r3, r0
 8008adc:	613b      	str	r3, [r7, #16]
 8008ade:	e013      	b.n	8008b08 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d110      	bne.n	8008b08 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	f107 0310 	add.w	r3, r7, #16
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f001 f869 	bl	8009bd0 <xTaskCreate>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d001      	beq.n	8008b08 <osThreadNew+0x11a>
            hTask = NULL;
 8008b04:	2300      	movs	r3, #0
 8008b06:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b08:	693b      	ldr	r3, [r7, #16]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3728      	adds	r7, #40	@ 0x28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b086      	sub	sp, #24
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b1a:	f3ef 8305 	mrs	r3, IPSR
 8008b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b20:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008b26:	f06f 0305 	mvn.w	r3, #5
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e019      	b.n	8008b62 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008b32:	f001 fb27 	bl	800a184 <xTaskGetTickCount>
 8008b36:	4603      	mov	r3, r0
 8008b38:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <osDelayUntil+0x4a>
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	db06      	blt.n	8008b5c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008b4e:	f107 0308 	add.w	r3, r7, #8
 8008b52:	6939      	ldr	r1, [r7, #16]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 f981 	bl	8009e5c <vTaskDelayUntil>
 8008b5a:	e002      	b.n	8008b62 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008b5c:	f06f 0303 	mvn.w	r3, #3
 8008b60:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008b62:	697b      	ldr	r3, [r7, #20]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	@ 0x28
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b7c:	f3ef 8305 	mrs	r3, IPSR
 8008b80:	613b      	str	r3, [r7, #16]
  return(result);
 8008b82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d15f      	bne.n	8008c48 <osMessageQueueNew+0xdc>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d05c      	beq.n	8008c48 <osMessageQueueNew+0xdc>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d059      	beq.n	8008c48 <osMessageQueueNew+0xdc>
    mem = -1;
 8008b94:	f04f 33ff 	mov.w	r3, #4294967295
 8008b98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d029      	beq.n	8008bf4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d012      	beq.n	8008bce <osMessageQueueNew+0x62>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b4f      	cmp	r3, #79	@ 0x4f
 8008bae:	d90e      	bls.n	8008bce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00a      	beq.n	8008bce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	695a      	ldr	r2, [r3, #20]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d302      	bcc.n	8008bce <osMessageQueueNew+0x62>
        mem = 1;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	e014      	b.n	8008bf8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d110      	bne.n	8008bf8 <osMessageQueueNew+0x8c>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10c      	bne.n	8008bf8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d108      	bne.n	8008bf8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d104      	bne.n	8008bf8 <osMessageQueueNew+0x8c>
          mem = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61bb      	str	r3, [r7, #24]
 8008bf2:	e001      	b.n	8008bf8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d10b      	bne.n	8008c16 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691a      	ldr	r2, [r3, #16]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2100      	movs	r1, #0
 8008c08:	9100      	str	r1, [sp, #0]
 8008c0a:	68b9      	ldr	r1, [r7, #8]
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fa31 	bl	8009074 <xQueueGenericCreateStatic>
 8008c12:	61f8      	str	r0, [r7, #28]
 8008c14:	e008      	b.n	8008c28 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 faa4 	bl	800916e <xQueueGenericCreate>
 8008c26:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00c      	beq.n	8008c48 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	e001      	b.n	8008c40 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c40:	6979      	ldr	r1, [r7, #20]
 8008c42:	69f8      	ldr	r0, [r7, #28]
 8008c44:	f000 ff06 	bl	8009a54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c48:	69fb      	ldr	r3, [r7, #28]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6c:	f3ef 8305 	mrs	r3, IPSR
 8008c70:	617b      	str	r3, [r7, #20]
  return(result);
 8008c72:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d028      	beq.n	8008cca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <osMessageQueuePut+0x36>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <osMessageQueuePut+0x36>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008c8a:	f06f 0303 	mvn.w	r3, #3
 8008c8e:	61fb      	str	r3, [r7, #28]
 8008c90:	e038      	b.n	8008d04 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008c96:	f107 0210 	add.w	r2, r7, #16
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	69b8      	ldr	r0, [r7, #24]
 8008ca0:	f000 fbc6 	bl	8009430 <xQueueGenericSendFromISR>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d003      	beq.n	8008cb2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008caa:	f06f 0302 	mvn.w	r3, #2
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e028      	b.n	8008d04 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d025      	beq.n	8008d04 <osMessageQueuePut+0xb0>
 8008cb8:	4b15      	ldr	r3, [pc, #84]	@ (8008d10 <osMessageQueuePut+0xbc>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	e01c      	b.n	8008d04 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <osMessageQueuePut+0x82>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d103      	bne.n	8008cde <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008cd6:	f06f 0303 	mvn.w	r3, #3
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e012      	b.n	8008d04 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cde:	2300      	movs	r3, #0
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	69b8      	ldr	r0, [r7, #24]
 8008ce6:	f000 faa1 	bl	800922c <xQueueGenericSend>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d009      	beq.n	8008d04 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008cf6:	f06f 0301 	mvn.w	r3, #1
 8008cfa:	61fb      	str	r3, [r7, #28]
 8008cfc:	e002      	b.n	8008d04 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008cfe:	f06f 0302 	mvn.w	r3, #2
 8008d02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d04:	69fb      	ldr	r3, [r7, #28]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d2a:	f3ef 8305 	mrs	r3, IPSR
 8008d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8008d30:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d028      	beq.n	8008d88 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <osMessageQueueGet+0x34>
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <osMessageQueueGet+0x34>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008d48:	f06f 0303 	mvn.w	r3, #3
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	e037      	b.n	8008dc0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d54:	f107 0310 	add.w	r3, r7, #16
 8008d58:	461a      	mov	r2, r3
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	69b8      	ldr	r0, [r7, #24]
 8008d5e:	f000 fce7 	bl	8009730 <xQueueReceiveFromISR>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d003      	beq.n	8008d70 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008d68:	f06f 0302 	mvn.w	r3, #2
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	e027      	b.n	8008dc0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d024      	beq.n	8008dc0 <osMessageQueueGet+0xac>
 8008d76:	4b15      	ldr	r3, [pc, #84]	@ (8008dcc <osMessageQueueGet+0xb8>)
 8008d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	e01b      	b.n	8008dc0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <osMessageQueueGet+0x80>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008d94:	f06f 0303 	mvn.w	r3, #3
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	e011      	b.n	8008dc0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	68b9      	ldr	r1, [r7, #8]
 8008da0:	69b8      	ldr	r0, [r7, #24]
 8008da2:	f000 fbe3 	bl	800956c <xQueueReceive>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d009      	beq.n	8008dc0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008db2:	f06f 0301 	mvn.w	r3, #1
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e002      	b.n	8008dc0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008dba:	f06f 0302 	mvn.w	r3, #2
 8008dbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008dc0:	69fb      	ldr	r3, [r7, #28]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	e000ed04 	.word	0xe000ed04

08008dd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4a07      	ldr	r2, [pc, #28]	@ (8008dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8008de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4a06      	ldr	r2, [pc, #24]	@ (8008e00 <vApplicationGetIdleTaskMemory+0x30>)
 8008de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2280      	movs	r2, #128	@ 0x80
 8008dec:	601a      	str	r2, [r3, #0]
}
 8008dee:	bf00      	nop
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	2000055c 	.word	0x2000055c
 8008e00:	200005b8 	.word	0x200005b8

08008e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a07      	ldr	r2, [pc, #28]	@ (8008e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4a06      	ldr	r2, [pc, #24]	@ (8008e34 <vApplicationGetTimerTaskMemory+0x30>)
 8008e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e22:	601a      	str	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	200007b8 	.word	0x200007b8
 8008e34:	20000814 	.word	0x20000814

08008e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f103 0208 	add.w	r2, r3, #8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f103 0208 	add.w	r2, r3, #8
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f103 0208 	add.w	r2, r3, #8
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eda:	b480      	push	{r7}
 8008edc:	b085      	sub	sp, #20
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d103      	bne.n	8008efa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	e00c      	b.n	8008f14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3308      	adds	r3, #8
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	e002      	b.n	8008f08 <vListInsert+0x2e>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d2f6      	bcs.n	8008f02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6892      	ldr	r2, [r2, #8]
 8008f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6852      	ldr	r2, [r2, #4]
 8008f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d103      	bne.n	8008f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	1e5a      	subs	r2, r3, #1
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10b      	bne.n	8008fcc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008fc6:	bf00      	nop
 8008fc8:	bf00      	nop
 8008fca:	e7fd      	b.n	8008fc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008fcc:	f002 f994 	bl	800b2f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd8:	68f9      	ldr	r1, [r7, #12]
 8008fda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008fdc:	fb01 f303 	mul.w	r3, r1, r3
 8008fe0:	441a      	add	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	22ff      	movs	r2, #255	@ 0xff
 8009010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	22ff      	movs	r2, #255	@ 0xff
 8009018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d114      	bne.n	800904c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d01a      	beq.n	8009060 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3310      	adds	r3, #16
 800902e:	4618      	mov	r0, r3
 8009030:	f001 fa34 	bl	800a49c <xTaskRemoveFromEventList>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <xQueueGenericReset+0xd0>)
 800903c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	e009      	b.n	8009060 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3310      	adds	r3, #16
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fef1 	bl	8008e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3324      	adds	r3, #36	@ 0x24
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff feec 	bl	8008e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009060:	f002 f97c 	bl	800b35c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009064:	2301      	movs	r3, #1
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08e      	sub	sp, #56	@ 0x38
 8009078:	af02      	add	r7, sp, #8
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800909a:	bf00      	nop
 800909c:	bf00      	nop
 800909e:	e7fd      	b.n	800909c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <xQueueGenericCreateStatic+0x56>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <xQueueGenericCreateStatic+0x5a>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <xQueueGenericCreateStatic+0x5c>
 80090ce:	2300      	movs	r3, #0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	623b      	str	r3, [r7, #32]
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <xQueueGenericCreateStatic+0x84>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <xQueueGenericCreateStatic+0x88>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <xQueueGenericCreateStatic+0x8a>
 80090fc:	2300      	movs	r3, #0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	61fb      	str	r3, [r7, #28]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800911a:	2350      	movs	r3, #80	@ 0x50
 800911c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b50      	cmp	r3, #80	@ 0x50
 8009122:	d00b      	beq.n	800913c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	61bb      	str	r3, [r7, #24]
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800913c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00d      	beq.n	8009164 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009150:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	4613      	mov	r3, r2
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 f840 	bl	80091e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009166:	4618      	mov	r0, r3
 8009168:	3730      	adds	r7, #48	@ 0x30
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800916e:	b580      	push	{r7, lr}
 8009170:	b08a      	sub	sp, #40	@ 0x28
 8009172:	af02      	add	r7, sp, #8
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	4613      	mov	r3, r2
 800917a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	613b      	str	r3, [r7, #16]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	3350      	adds	r3, #80	@ 0x50
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 f9c7 	bl	800b53c <pvPortMalloc>
 80091ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d011      	beq.n	80091da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	3350      	adds	r3, #80	@ 0x50
 80091be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091c8:	79fa      	ldrb	r2, [r7, #7]
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4613      	mov	r3, r2
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f805 	bl	80091e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091da:	69bb      	ldr	r3, [r7, #24]
	}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e002      	b.n	8009206 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009212:	2101      	movs	r1, #1
 8009214:	69b8      	ldr	r0, [r7, #24]
 8009216:	f7ff fec3 	bl	8008fa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08e      	sub	sp, #56	@ 0x38
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800923a:	2300      	movs	r3, #0
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <xQueueGenericSend+0x34>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <xQueueGenericSend+0x42>
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <xQueueGenericSend+0x46>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <xQueueGenericSend+0x48>
 8009272:	2300      	movs	r3, #0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <xQueueGenericSend+0x64>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800928a:	bf00      	nop
 800928c:	bf00      	nop
 800928e:	e7fd      	b.n	800928c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d103      	bne.n	800929e <xQueueGenericSend+0x72>
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <xQueueGenericSend+0x76>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <xQueueGenericSend+0x78>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10b      	bne.n	80092c0 <xQueueGenericSend+0x94>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	623b      	str	r3, [r7, #32]
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	e7fd      	b.n	80092bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092c0:	f001 faac 	bl	800a81c <xTaskGetSchedulerState>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <xQueueGenericSend+0xa4>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <xQueueGenericSend+0xa8>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e000      	b.n	80092d6 <xQueueGenericSend+0xaa>
 80092d4:	2300      	movs	r3, #0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	61fb      	str	r3, [r7, #28]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092f2:	f002 f801 	bl	800b2f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fe:	429a      	cmp	r2, r3
 8009300:	d302      	bcc.n	8009308 <xQueueGenericSend+0xdc>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b02      	cmp	r3, #2
 8009306:	d129      	bne.n	800935c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800930e:	f000 fa91 	bl	8009834 <prvCopyDataToQueue>
 8009312:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	d010      	beq.n	800933e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	3324      	adds	r3, #36	@ 0x24
 8009320:	4618      	mov	r0, r3
 8009322:	f001 f8bb 	bl	800a49c <xTaskRemoveFromEventList>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d013      	beq.n	8009354 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800932c:	4b3f      	ldr	r3, [pc, #252]	@ (800942c <xQueueGenericSend+0x200>)
 800932e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	e00a      	b.n	8009354 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009344:	4b39      	ldr	r3, [pc, #228]	@ (800942c <xQueueGenericSend+0x200>)
 8009346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009354:	f002 f802 	bl	800b35c <vPortExitCritical>
				return pdPASS;
 8009358:	2301      	movs	r3, #1
 800935a:	e063      	b.n	8009424 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d103      	bne.n	800936a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009362:	f001 fffb 	bl	800b35c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009366:	2300      	movs	r3, #0
 8009368:	e05c      	b.n	8009424 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800936a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936c:	2b00      	cmp	r3, #0
 800936e:	d106      	bne.n	800937e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009370:	f107 0314 	add.w	r3, r7, #20
 8009374:	4618      	mov	r0, r3
 8009376:	f001 f8f5 	bl	800a564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800937a:	2301      	movs	r3, #1
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800937e:	f001 ffed 	bl	800b35c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009382:	f000 fe53 	bl	800a02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009386:	f001 ffb7 	bl	800b2f8 <vPortEnterCritical>
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009390:	b25b      	sxtb	r3, r3
 8009392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009396:	d103      	bne.n	80093a0 <xQueueGenericSend+0x174>
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093a6:	b25b      	sxtb	r3, r3
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ac:	d103      	bne.n	80093b6 <xQueueGenericSend+0x18a>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093b6:	f001 ffd1 	bl	800b35c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093ba:	1d3a      	adds	r2, r7, #4
 80093bc:	f107 0314 	add.w	r3, r7, #20
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 f8e4 	bl	800a590 <xTaskCheckForTimeOut>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d124      	bne.n	8009418 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093d0:	f000 fb28 	bl	8009a24 <prvIsQueueFull>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d018      	beq.n	800940c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	3310      	adds	r3, #16
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 f808 	bl	800a3f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ea:	f000 fab3 	bl	8009954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093ee:	f000 fe2b 	bl	800a048 <xTaskResumeAll>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f47f af7c 	bne.w	80092f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80093fa:	4b0c      	ldr	r3, [pc, #48]	@ (800942c <xQueueGenericSend+0x200>)
 80093fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	e772      	b.n	80092f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800940c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800940e:	f000 faa1 	bl	8009954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009412:	f000 fe19 	bl	800a048 <xTaskResumeAll>
 8009416:	e76c      	b.n	80092f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800941a:	f000 fa9b 	bl	8009954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800941e:	f000 fe13 	bl	800a048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009422:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009424:	4618      	mov	r0, r3
 8009426:	3738      	adds	r7, #56	@ 0x38
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b090      	sub	sp, #64	@ 0x40
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800945a:	bf00      	nop
 800945c:	bf00      	nop
 800945e:	e7fd      	b.n	800945c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d103      	bne.n	800946e <xQueueGenericSendFromISR+0x3e>
 8009466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <xQueueGenericSendFromISR+0x42>
 800946e:	2301      	movs	r3, #1
 8009470:	e000      	b.n	8009474 <xQueueGenericSendFromISR+0x44>
 8009472:	2300      	movs	r3, #0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d103      	bne.n	800949e <xQueueGenericSendFromISR+0x6e>
 8009496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <xQueueGenericSendFromISR+0x72>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <xQueueGenericSendFromISR+0x74>
 80094a2:	2300      	movs	r3, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10b      	bne.n	80094c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	623b      	str	r3, [r7, #32]
}
 80094ba:	bf00      	nop
 80094bc:	bf00      	nop
 80094be:	e7fd      	b.n	80094bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094c0:	f001 fffa 	bl	800b4b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094c4:	f3ef 8211 	mrs	r2, BASEPRI
 80094c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	61fa      	str	r2, [r7, #28]
 80094da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d302      	bcc.n	80094f2 <xQueueGenericSendFromISR+0xc2>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d12f      	bne.n	8009552 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009500:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009508:	f000 f994 	bl	8009834 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800950c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009514:	d112      	bne.n	800953c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951a:	2b00      	cmp	r3, #0
 800951c:	d016      	beq.n	800954c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	3324      	adds	r3, #36	@ 0x24
 8009522:	4618      	mov	r0, r3
 8009524:	f000 ffba 	bl	800a49c <xTaskRemoveFromEventList>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00e      	beq.n	800954c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	e007      	b.n	800954c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800953c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009540:	3301      	adds	r3, #1
 8009542:	b2db      	uxtb	r3, r3
 8009544:	b25a      	sxtb	r2, r3
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800954c:	2301      	movs	r3, #1
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009550:	e001      	b.n	8009556 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009558:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009560:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009564:	4618      	mov	r0, r3
 8009566:	3740      	adds	r7, #64	@ 0x40
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08c      	sub	sp, #48	@ 0x30
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10b      	bne.n	800959e <xQueueReceive+0x32>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	623b      	str	r3, [r7, #32]
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	e7fd      	b.n	800959a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <xQueueReceive+0x40>
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <xQueueReceive+0x44>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <xQueueReceive+0x46>
 80095b0:	2300      	movs	r3, #0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <xQueueReceive+0x62>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	61fb      	str	r3, [r7, #28]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ce:	f001 f925 	bl	800a81c <xTaskGetSchedulerState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <xQueueReceive+0x72>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <xQueueReceive+0x76>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <xQueueReceive+0x78>
 80095e2:	2300      	movs	r3, #0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10b      	bne.n	8009600 <xQueueReceive+0x94>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	61bb      	str	r3, [r7, #24]
}
 80095fa:	bf00      	nop
 80095fc:	bf00      	nop
 80095fe:	e7fd      	b.n	80095fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009600:	f001 fe7a 	bl	800b2f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01f      	beq.n	8009650 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009614:	f000 f978 	bl	8009908 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	1e5a      	subs	r2, r3, #1
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00f      	beq.n	8009648 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962a:	3310      	adds	r3, #16
 800962c:	4618      	mov	r0, r3
 800962e:	f000 ff35 	bl	800a49c <xTaskRemoveFromEventList>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d007      	beq.n	8009648 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009638:	4b3c      	ldr	r3, [pc, #240]	@ (800972c <xQueueReceive+0x1c0>)
 800963a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009648:	f001 fe88 	bl	800b35c <vPortExitCritical>
				return pdPASS;
 800964c:	2301      	movs	r3, #1
 800964e:	e069      	b.n	8009724 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d103      	bne.n	800965e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009656:	f001 fe81 	bl	800b35c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800965a:	2300      	movs	r3, #0
 800965c:	e062      	b.n	8009724 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800965e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009664:	f107 0310 	add.w	r3, r7, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f000 ff7b 	bl	800a564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800966e:	2301      	movs	r3, #1
 8009670:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009672:	f001 fe73 	bl	800b35c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009676:	f000 fcd9 	bl	800a02c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800967a:	f001 fe3d 	bl	800b2f8 <vPortEnterCritical>
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009684:	b25b      	sxtb	r3, r3
 8009686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968a:	d103      	bne.n	8009694 <xQueueReceive+0x128>
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800969a:	b25b      	sxtb	r3, r3
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d103      	bne.n	80096aa <xQueueReceive+0x13e>
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096aa:	f001 fe57 	bl	800b35c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096ae:	1d3a      	adds	r2, r7, #4
 80096b0:	f107 0310 	add.w	r3, r7, #16
 80096b4:	4611      	mov	r1, r2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 ff6a 	bl	800a590 <xTaskCheckForTimeOut>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d123      	bne.n	800970a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c4:	f000 f998 	bl	80099f8 <prvIsQueueEmpty>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d017      	beq.n	80096fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d0:	3324      	adds	r3, #36	@ 0x24
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fe8e 	bl	800a3f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096de:	f000 f939 	bl	8009954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096e2:	f000 fcb1 	bl	800a048 <xTaskResumeAll>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d189      	bne.n	8009600 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80096ec:	4b0f      	ldr	r3, [pc, #60]	@ (800972c <xQueueReceive+0x1c0>)
 80096ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	e780      	b.n	8009600 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009700:	f000 f928 	bl	8009954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009704:	f000 fca0 	bl	800a048 <xTaskResumeAll>
 8009708:	e77a      	b.n	8009600 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800970a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800970c:	f000 f922 	bl	8009954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009710:	f000 fc9a 	bl	800a048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009716:	f000 f96f 	bl	80099f8 <prvIsQueueEmpty>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	f43f af6f 	beq.w	8009600 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009722:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009724:	4618      	mov	r0, r3
 8009726:	3730      	adds	r7, #48	@ 0x30
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	e000ed04 	.word	0xe000ed04

08009730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	@ 0x38
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10b      	bne.n	800975e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	623b      	str	r3, [r7, #32]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <xQueueReceiveFromISR+0x3c>
 8009764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <xQueueReceiveFromISR+0x40>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <xQueueReceiveFromISR+0x42>
 8009770:	2300      	movs	r3, #0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10b      	bne.n	800978e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	61fb      	str	r3, [r7, #28]
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	e7fd      	b.n	800978a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800978e:	f001 fe93 	bl	800b4b8 <vPortValidateInterruptPriority>
	__asm volatile
 8009792:	f3ef 8211 	mrs	r2, BASEPRI
 8009796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	61ba      	str	r2, [r7, #24]
 80097a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d02f      	beq.n	800981a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097c8:	f000 f89e 	bl	8009908 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ce:	1e5a      	subs	r2, r3, #1
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80097d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097dc:	d112      	bne.n	8009804 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d016      	beq.n	8009814 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e8:	3310      	adds	r3, #16
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fe56 	bl	800a49c <xTaskRemoveFromEventList>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00e      	beq.n	8009814 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e007      	b.n	8009814 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009808:	3301      	adds	r3, #1
 800980a:	b2db      	uxtb	r3, r3
 800980c:	b25a      	sxtb	r2, r3
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009814:	2301      	movs	r3, #1
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
 8009818:	e001      	b.n	800981e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
 800981e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009820:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f383 8811 	msr	BASEPRI, r3
}
 8009828:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800982a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800982c:	4618      	mov	r0, r3
 800982e:	3738      	adds	r7, #56	@ 0x38
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009848:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10d      	bne.n	800986e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d14d      	bne.n	80098f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fffa 	bl	800a858 <xTaskPriorityDisinherit>
 8009864:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	609a      	str	r2, [r3, #8]
 800986c:	e043      	b.n	80098f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d119      	bne.n	80098a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6858      	ldr	r0, [r3, #4]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987c:	461a      	mov	r2, r3
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	f002 f876 	bl	800b970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988c:	441a      	add	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	429a      	cmp	r2, r3
 800989c:	d32b      	bcc.n	80098f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	e026      	b.n	80098f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68d8      	ldr	r0, [r3, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b0:	461a      	mov	r2, r3
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	f002 f85c 	bl	800b970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c0:	425b      	negs	r3, r3
 80098c2:	441a      	add	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d207      	bcs.n	80098e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098dc:	425b      	negs	r3, r3
 80098de:	441a      	add	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d105      	bne.n	80098f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80098fe:	697b      	ldr	r3, [r7, #20]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	d018      	beq.n	800994c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009922:	441a      	add	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	429a      	cmp	r2, r3
 8009932:	d303      	bcc.n	800993c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68d9      	ldr	r1, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009944:	461a      	mov	r2, r3
 8009946:	6838      	ldr	r0, [r7, #0]
 8009948:	f002 f812 	bl	800b970 <memcpy>
	}
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800995c:	f001 fccc 	bl	800b2f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009966:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009968:	e011      	b.n	800998e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	d012      	beq.n	8009998 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3324      	adds	r3, #36	@ 0x24
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fd90 	bl	800a49c <xTaskRemoveFromEventList>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009982:	f000 fe69 	bl	800a658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	3b01      	subs	r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800998e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dce9      	bgt.n	800996a <prvUnlockQueue+0x16>
 8009996:	e000      	b.n	800999a <prvUnlockQueue+0x46>
					break;
 8009998:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	22ff      	movs	r2, #255	@ 0xff
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80099a2:	f001 fcdb 	bl	800b35c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099a6:	f001 fca7 	bl	800b2f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099b2:	e011      	b.n	80099d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d012      	beq.n	80099e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3310      	adds	r3, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 fd6b 	bl	800a49c <xTaskRemoveFromEventList>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099cc:	f000 fe44 	bl	800a658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dce9      	bgt.n	80099b4 <prvUnlockQueue+0x60>
 80099e0:	e000      	b.n	80099e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	22ff      	movs	r2, #255	@ 0xff
 80099e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80099ec:	f001 fcb6 	bl	800b35c <vPortExitCritical>
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a00:	f001 fc7a 	bl	800b2f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	e001      	b.n	8009a16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a16:	f001 fca1 	bl	800b35c <vPortExitCritical>

	return xReturn;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a2c:	f001 fc64 	bl	800b2f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d102      	bne.n	8009a42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e001      	b.n	8009a46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a46:	f001 fc89 	bl	800b35c <vPortExitCritical>

	return xReturn;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e014      	b.n	8009a8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a64:	4a0f      	ldr	r2, [pc, #60]	@ (8009aa4 <vQueueAddToRegistry+0x50>)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10b      	bne.n	8009a88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a70:	490c      	ldr	r1, [pc, #48]	@ (8009aa4 <vQueueAddToRegistry+0x50>)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009aa4 <vQueueAddToRegistry+0x50>)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	4413      	add	r3, r2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a86:	e006      	b.n	8009a96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b07      	cmp	r3, #7
 8009a92:	d9e7      	bls.n	8009a64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20000c14 	.word	0x20000c14

08009aa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ab8:	f001 fc1e 	bl	800b2f8 <vPortEnterCritical>
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d103      	bne.n	8009ad2 <vQueueWaitForMessageRestricted+0x2a>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ad8:	b25b      	sxtb	r3, r3
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d103      	bne.n	8009ae8 <vQueueWaitForMessageRestricted+0x40>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ae8:	f001 fc38 	bl	800b35c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	3324      	adds	r3, #36	@ 0x24
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fca1 	bl	800a444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b02:	6978      	ldr	r0, [r7, #20]
 8009b04:	f7ff ff26 	bl	8009954 <prvUnlockQueue>
	}
 8009b08:	bf00      	nop
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08e      	sub	sp, #56	@ 0x38
 8009b14:	af04      	add	r7, sp, #16
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10b      	bne.n	8009b3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	623b      	str	r3, [r7, #32]
}
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	e7fd      	b.n	8009b38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10b      	bne.n	8009b5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	61fb      	str	r3, [r7, #28]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b5a:	235c      	movs	r3, #92	@ 0x5c
 8009b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b62:	d00b      	beq.n	8009b7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	61bb      	str	r3, [r7, #24]
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	e7fd      	b.n	8009b78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01e      	beq.n	8009bc2 <xTaskCreateStatic+0xb2>
 8009b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01b      	beq.n	8009bc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	f107 0314 	add.w	r3, r7, #20
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f850 	bl	8009c5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bbc:	f000 f8de 	bl	8009d7c <prvAddNewTaskToReadyList>
 8009bc0:	e001      	b.n	8009bc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bc6:	697b      	ldr	r3, [r7, #20]
	}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	@ 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08c      	sub	sp, #48	@ 0x30
 8009bd4:	af04      	add	r7, sp, #16
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 fca9 	bl	800b53c <pvPortMalloc>
 8009bea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bf2:	205c      	movs	r0, #92	@ 0x5c
 8009bf4:	f001 fca2 	bl	800b53c <pvPortMalloc>
 8009bf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c06:	e005      	b.n	8009c14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c08:	6978      	ldr	r0, [r7, #20]
 8009c0a:	f001 fd65 	bl	800b6d8 <vPortFree>
 8009c0e:	e001      	b.n	8009c14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d017      	beq.n	8009c4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	2300      	movs	r3, #0
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f80e 	bl	8009c5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c3e:	69f8      	ldr	r0, [r7, #28]
 8009c40:	f000 f89c 	bl	8009d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c44:	2301      	movs	r3, #1
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	e002      	b.n	8009c50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c50:	69bb      	ldr	r3, [r7, #24]
	}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	461a      	mov	r2, r3
 8009c72:	21a5      	movs	r1, #165	@ 0xa5
 8009c74:	f001 fe50 	bl	800b918 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009c82:	3b01      	subs	r3, #1
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	f003 0307 	and.w	r3, r3, #7
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	617b      	str	r3, [r7, #20]
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	e7fd      	b.n	8009cb0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01f      	beq.n	8009cfa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	e012      	b.n	8009ce6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	7819      	ldrb	r1, [r3, #0]
 8009cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3334      	adds	r3, #52	@ 0x34
 8009cd0:	460a      	mov	r2, r1
 8009cd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2b0f      	cmp	r3, #15
 8009cea:	d9e9      	bls.n	8009cc0 <prvInitialiseNewTask+0x66>
 8009cec:	e000      	b.n	8009cf0 <prvInitialiseNewTask+0x96>
			{
				break;
 8009cee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009cf8:	e003      	b.n	8009d02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d04:	2b37      	cmp	r3, #55	@ 0x37
 8009d06:	d901      	bls.n	8009d0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d08:	2337      	movs	r3, #55	@ 0x37
 8009d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d16:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	3304      	adds	r3, #4
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff f8a8 	bl	8008e78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2a:	3318      	adds	r3, #24
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7ff f8a3 	bl	8008e78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	68f9      	ldr	r1, [r7, #12]
 8009d5a:	69b8      	ldr	r0, [r7, #24]
 8009d5c:	f001 f99a 	bl	800b094 <pxPortInitialiseStack>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d72:	bf00      	nop
 8009d74:	3720      	adds	r7, #32
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d84:	f001 fab8 	bl	800b2f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d88:	4b2d      	ldr	r3, [pc, #180]	@ (8009e40 <prvAddNewTaskToReadyList+0xc4>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009e40 <prvAddNewTaskToReadyList+0xc4>)
 8009d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d92:	4b2c      	ldr	r3, [pc, #176]	@ (8009e44 <prvAddNewTaskToReadyList+0xc8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d109      	bne.n	8009dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009e44 <prvAddNewTaskToReadyList+0xc8>)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009da0:	4b27      	ldr	r3, [pc, #156]	@ (8009e40 <prvAddNewTaskToReadyList+0xc4>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d110      	bne.n	8009dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009da8:	f000 fc7a 	bl	800a6a0 <prvInitialiseTaskLists>
 8009dac:	e00d      	b.n	8009dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009dae:	4b26      	ldr	r3, [pc, #152]	@ (8009e48 <prvAddNewTaskToReadyList+0xcc>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009db6:	4b23      	ldr	r3, [pc, #140]	@ (8009e44 <prvAddNewTaskToReadyList+0xc8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d802      	bhi.n	8009dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e44 <prvAddNewTaskToReadyList+0xc8>)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009dca:	4b20      	ldr	r3, [pc, #128]	@ (8009e4c <prvAddNewTaskToReadyList+0xd0>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8009e4c <prvAddNewTaskToReadyList+0xd0>)
 8009dd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009e4c <prvAddNewTaskToReadyList+0xd0>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de0:	4b1b      	ldr	r3, [pc, #108]	@ (8009e50 <prvAddNewTaskToReadyList+0xd4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d903      	bls.n	8009df0 <prvAddNewTaskToReadyList+0x74>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	4a18      	ldr	r2, [pc, #96]	@ (8009e50 <prvAddNewTaskToReadyList+0xd4>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4a15      	ldr	r2, [pc, #84]	@ (8009e54 <prvAddNewTaskToReadyList+0xd8>)
 8009dfe:	441a      	add	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f7ff f843 	bl	8008e92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e0c:	f001 faa6 	bl	800b35c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e10:	4b0d      	ldr	r3, [pc, #52]	@ (8009e48 <prvAddNewTaskToReadyList+0xcc>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e18:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <prvAddNewTaskToReadyList+0xc8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d207      	bcs.n	8009e36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e26:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <prvAddNewTaskToReadyList+0xdc>)
 8009e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001128 	.word	0x20001128
 8009e44:	20000c54 	.word	0x20000c54
 8009e48:	20001134 	.word	0x20001134
 8009e4c:	20001144 	.word	0x20001144
 8009e50:	20001130 	.word	0x20001130
 8009e54:	20000c58 	.word	0x20000c58
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08a      	sub	sp, #40	@ 0x28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10b      	bne.n	8009e88 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	617b      	str	r3, [r7, #20]
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	e7fd      	b.n	8009e84 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <vTaskDelayUntil+0x4a>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	613b      	str	r3, [r7, #16]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8009ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8009f50 <vTaskDelayUntil+0xf4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <vTaskDelayUntil+0x6a>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60fb      	str	r3, [r7, #12]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8009ec6:	f000 f8b1 	bl	800a02c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009eca:	4b22      	ldr	r3, [pc, #136]	@ (8009f54 <vTaskDelayUntil+0xf8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6a3a      	ldr	r2, [r7, #32]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d20b      	bcs.n	8009efc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	69fa      	ldr	r2, [r7, #28]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d211      	bcs.n	8009f12 <vTaskDelayUntil+0xb6>
 8009eee:	69fa      	ldr	r2, [r7, #28]
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d90d      	bls.n	8009f12 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009efa:	e00a      	b.n	8009f12 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d303      	bcc.n	8009f0e <vTaskDelayUntil+0xb2>
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d901      	bls.n	8009f12 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d006      	beq.n	8009f2c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fd06 	bl	800a938 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009f2c:	f000 f88c 	bl	800a048 <xTaskResumeAll>
 8009f30:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d107      	bne.n	8009f48 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8009f38:	4b07      	ldr	r3, [pc, #28]	@ (8009f58 <vTaskDelayUntil+0xfc>)
 8009f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f48:	bf00      	nop
 8009f4a:	3728      	adds	r7, #40	@ 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20001150 	.word	0x20001150
 8009f54:	2000112c 	.word	0x2000112c
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	@ 0x28
 8009f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f6a:	463a      	mov	r2, r7
 8009f6c:	1d39      	adds	r1, r7, #4
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe ff2c 	bl	8008dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	9202      	str	r2, [sp, #8]
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	2300      	movs	r3, #0
 8009f88:	460a      	mov	r2, r1
 8009f8a:	4922      	ldr	r1, [pc, #136]	@ (800a014 <vTaskStartScheduler+0xb8>)
 8009f8c:	4822      	ldr	r0, [pc, #136]	@ (800a018 <vTaskStartScheduler+0xbc>)
 8009f8e:	f7ff fdbf 	bl	8009b10 <xTaskCreateStatic>
 8009f92:	4603      	mov	r3, r0
 8009f94:	4a21      	ldr	r2, [pc, #132]	@ (800a01c <vTaskStartScheduler+0xc0>)
 8009f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f98:	4b20      	ldr	r3, [pc, #128]	@ (800a01c <vTaskStartScheduler+0xc0>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e001      	b.n	8009faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d102      	bne.n	8009fb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fb0:	f000 fd16 	bl	800a9e0 <xTimerCreateTimerTask>
 8009fb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d116      	bne.n	8009fea <vTaskStartScheduler+0x8e>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	613b      	str	r3, [r7, #16]
}
 8009fce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fd0:	4b13      	ldr	r3, [pc, #76]	@ (800a020 <vTaskStartScheduler+0xc4>)
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fd8:	4b12      	ldr	r3, [pc, #72]	@ (800a024 <vTaskStartScheduler+0xc8>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fde:	4b12      	ldr	r3, [pc, #72]	@ (800a028 <vTaskStartScheduler+0xcc>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fe4:	f001 f8e4 	bl	800b1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fe8:	e00f      	b.n	800a00a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff0:	d10b      	bne.n	800a00a <vTaskStartScheduler+0xae>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	60fb      	str	r3, [r7, #12]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <vTaskStartScheduler+0xaa>
}
 800a00a:	bf00      	nop
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	0800b9e0 	.word	0x0800b9e0
 800a018:	0800a671 	.word	0x0800a671
 800a01c:	2000114c 	.word	0x2000114c
 800a020:	20001148 	.word	0x20001148
 800a024:	20001134 	.word	0x20001134
 800a028:	2000112c 	.word	0x2000112c

0800a02c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a030:	4b04      	ldr	r3, [pc, #16]	@ (800a044 <vTaskSuspendAll+0x18>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	4a03      	ldr	r2, [pc, #12]	@ (800a044 <vTaskSuspendAll+0x18>)
 800a038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a03a:	bf00      	nop
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	20001150 	.word	0x20001150

0800a048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a052:	2300      	movs	r3, #0
 800a054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a056:	4b42      	ldr	r3, [pc, #264]	@ (800a160 <xTaskResumeAll+0x118>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10b      	bne.n	800a076 <xTaskResumeAll+0x2e>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	603b      	str	r3, [r7, #0]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a076:	f001 f93f 	bl	800b2f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a07a:	4b39      	ldr	r3, [pc, #228]	@ (800a160 <xTaskResumeAll+0x118>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3b01      	subs	r3, #1
 800a080:	4a37      	ldr	r2, [pc, #220]	@ (800a160 <xTaskResumeAll+0x118>)
 800a082:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a084:	4b36      	ldr	r3, [pc, #216]	@ (800a160 <xTaskResumeAll+0x118>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d162      	bne.n	800a152 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a08c:	4b35      	ldr	r3, [pc, #212]	@ (800a164 <xTaskResumeAll+0x11c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d05e      	beq.n	800a152 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a094:	e02f      	b.n	800a0f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a096:	4b34      	ldr	r3, [pc, #208]	@ (800a168 <xTaskResumeAll+0x120>)
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3318      	adds	r3, #24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe ff52 	bl	8008f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe ff4d 	bl	8008f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a16c <xTaskResumeAll+0x124>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d903      	bls.n	800a0c6 <xTaskResumeAll+0x7e>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a16c <xTaskResumeAll+0x124>)
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4a27      	ldr	r2, [pc, #156]	@ (800a170 <xTaskResumeAll+0x128>)
 800a0d4:	441a      	add	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f7fe fed8 	bl	8008e92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e6:	4b23      	ldr	r3, [pc, #140]	@ (800a174 <xTaskResumeAll+0x12c>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d302      	bcc.n	800a0f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a0f0:	4b21      	ldr	r3, [pc, #132]	@ (800a178 <xTaskResumeAll+0x130>)
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a168 <xTaskResumeAll+0x120>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1cb      	bne.n	800a096 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a104:	f000 fb6a 	bl	800a7dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a108:	4b1c      	ldr	r3, [pc, #112]	@ (800a17c <xTaskResumeAll+0x134>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d010      	beq.n	800a136 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a114:	f000 f858 	bl	800a1c8 <xTaskIncrementTick>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a11e:	4b16      	ldr	r3, [pc, #88]	@ (800a178 <xTaskResumeAll+0x130>)
 800a120:	2201      	movs	r2, #1
 800a122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3b01      	subs	r3, #1
 800a128:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1f1      	bne.n	800a114 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a130:	4b12      	ldr	r3, [pc, #72]	@ (800a17c <xTaskResumeAll+0x134>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a136:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <xTaskResumeAll+0x130>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d009      	beq.n	800a152 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a13e:	2301      	movs	r3, #1
 800a140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a142:	4b0f      	ldr	r3, [pc, #60]	@ (800a180 <xTaskResumeAll+0x138>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a152:	f001 f903 	bl	800b35c <vPortExitCritical>

	return xAlreadyYielded;
 800a156:	68bb      	ldr	r3, [r7, #8]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20001150 	.word	0x20001150
 800a164:	20001128 	.word	0x20001128
 800a168:	200010e8 	.word	0x200010e8
 800a16c:	20001130 	.word	0x20001130
 800a170:	20000c58 	.word	0x20000c58
 800a174:	20000c54 	.word	0x20000c54
 800a178:	2000113c 	.word	0x2000113c
 800a17c:	20001138 	.word	0x20001138
 800a180:	e000ed04 	.word	0xe000ed04

0800a184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a18a:	4b05      	ldr	r3, [pc, #20]	@ (800a1a0 <xTaskGetTickCount+0x1c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a190:	687b      	ldr	r3, [r7, #4]
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	2000112c 	.word	0x2000112c

0800a1a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1aa:	f001 f985 	bl	800b4b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a1b2:	4b04      	ldr	r3, [pc, #16]	@ (800a1c4 <xTaskGetTickCountFromISR+0x20>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1b8:	683b      	ldr	r3, [r7, #0]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	2000112c 	.word	0x2000112c

0800a1c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a310 <xTaskIncrementTick+0x148>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 8090 	bne.w	800a2fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1dc:	4b4d      	ldr	r3, [pc, #308]	@ (800a314 <xTaskIncrementTick+0x14c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1e4:	4a4b      	ldr	r2, [pc, #300]	@ (800a314 <xTaskIncrementTick+0x14c>)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d121      	bne.n	800a234 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1f0:	4b49      	ldr	r3, [pc, #292]	@ (800a318 <xTaskIncrementTick+0x150>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00b      	beq.n	800a212 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	603b      	str	r3, [r7, #0]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <xTaskIncrementTick+0x46>
 800a212:	4b41      	ldr	r3, [pc, #260]	@ (800a318 <xTaskIncrementTick+0x150>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	4b40      	ldr	r3, [pc, #256]	@ (800a31c <xTaskIncrementTick+0x154>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a3e      	ldr	r2, [pc, #248]	@ (800a318 <xTaskIncrementTick+0x150>)
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	4a3e      	ldr	r2, [pc, #248]	@ (800a31c <xTaskIncrementTick+0x154>)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	4b3e      	ldr	r3, [pc, #248]	@ (800a320 <xTaskIncrementTick+0x158>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	4a3c      	ldr	r2, [pc, #240]	@ (800a320 <xTaskIncrementTick+0x158>)
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	f000 fad4 	bl	800a7dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a234:	4b3b      	ldr	r3, [pc, #236]	@ (800a324 <xTaskIncrementTick+0x15c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d349      	bcc.n	800a2d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a23e:	4b36      	ldr	r3, [pc, #216]	@ (800a318 <xTaskIncrementTick+0x150>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a248:	4b36      	ldr	r3, [pc, #216]	@ (800a324 <xTaskIncrementTick+0x15c>)
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	601a      	str	r2, [r3, #0]
					break;
 800a250:	e03f      	b.n	800a2d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a252:	4b31      	ldr	r3, [pc, #196]	@ (800a318 <xTaskIncrementTick+0x150>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d203      	bcs.n	800a272 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a26a:	4a2e      	ldr	r2, [pc, #184]	@ (800a324 <xTaskIncrementTick+0x15c>)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a270:	e02f      	b.n	800a2d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	3304      	adds	r3, #4
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fe68 	bl	8008f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a280:	2b00      	cmp	r3, #0
 800a282:	d004      	beq.n	800a28e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	3318      	adds	r3, #24
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fe5f 	bl	8008f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a292:	4b25      	ldr	r3, [pc, #148]	@ (800a328 <xTaskIncrementTick+0x160>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d903      	bls.n	800a2a2 <xTaskIncrementTick+0xda>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29e:	4a22      	ldr	r2, [pc, #136]	@ (800a328 <xTaskIncrementTick+0x160>)
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a32c <xTaskIncrementTick+0x164>)
 800a2b0:	441a      	add	r2, r3
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	f7fe fdea 	bl	8008e92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a330 <xTaskIncrementTick+0x168>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d3b8      	bcc.n	800a23e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2d0:	e7b5      	b.n	800a23e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2d2:	4b17      	ldr	r3, [pc, #92]	@ (800a330 <xTaskIncrementTick+0x168>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d8:	4914      	ldr	r1, [pc, #80]	@ (800a32c <xTaskIncrementTick+0x164>)
 800a2da:	4613      	mov	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d901      	bls.n	800a2ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a2ee:	4b11      	ldr	r3, [pc, #68]	@ (800a334 <xTaskIncrementTick+0x16c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d007      	beq.n	800a306 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	e004      	b.n	800a306 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a338 <xTaskIncrementTick+0x170>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	4a0d      	ldr	r2, [pc, #52]	@ (800a338 <xTaskIncrementTick+0x170>)
 800a304:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a306:	697b      	ldr	r3, [r7, #20]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20001150 	.word	0x20001150
 800a314:	2000112c 	.word	0x2000112c
 800a318:	200010e0 	.word	0x200010e0
 800a31c:	200010e4 	.word	0x200010e4
 800a320:	20001140 	.word	0x20001140
 800a324:	20001148 	.word	0x20001148
 800a328:	20001130 	.word	0x20001130
 800a32c:	20000c58 	.word	0x20000c58
 800a330:	20000c54 	.word	0x20000c54
 800a334:	2000113c 	.word	0x2000113c
 800a338:	20001138 	.word	0x20001138

0800a33c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a342:	4b28      	ldr	r3, [pc, #160]	@ (800a3e4 <vTaskSwitchContext+0xa8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a34a:	4b27      	ldr	r3, [pc, #156]	@ (800a3e8 <vTaskSwitchContext+0xac>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a350:	e042      	b.n	800a3d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a352:	4b25      	ldr	r3, [pc, #148]	@ (800a3e8 <vTaskSwitchContext+0xac>)
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a358:	4b24      	ldr	r3, [pc, #144]	@ (800a3ec <vTaskSwitchContext+0xb0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e011      	b.n	800a384 <vTaskSwitchContext+0x48>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <vTaskSwitchContext+0x42>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	607b      	str	r3, [r7, #4]
}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	e7fd      	b.n	800a37a <vTaskSwitchContext+0x3e>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3b01      	subs	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	491a      	ldr	r1, [pc, #104]	@ (800a3f0 <vTaskSwitchContext+0xb4>)
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4613      	mov	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0e3      	beq.n	800a360 <vTaskSwitchContext+0x24>
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4a13      	ldr	r2, [pc, #76]	@ (800a3f0 <vTaskSwitchContext+0xb4>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	605a      	str	r2, [r3, #4]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d104      	bne.n	800a3c8 <vTaskSwitchContext+0x8c>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	605a      	str	r2, [r3, #4]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	4a09      	ldr	r2, [pc, #36]	@ (800a3f4 <vTaskSwitchContext+0xb8>)
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	4a06      	ldr	r2, [pc, #24]	@ (800a3ec <vTaskSwitchContext+0xb0>)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6013      	str	r3, [r2, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	20001150 	.word	0x20001150
 800a3e8:	2000113c 	.word	0x2000113c
 800a3ec:	20001130 	.word	0x20001130
 800a3f0:	20000c58 	.word	0x20000c58
 800a3f4:	20000c54 	.word	0x20000c54

0800a3f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10b      	bne.n	800a420 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60fb      	str	r3, [r7, #12]
}
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
 800a41e:	e7fd      	b.n	800a41c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a420:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <vTaskPlaceOnEventList+0x48>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3318      	adds	r3, #24
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7fe fd56 	bl	8008eda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a42e:	2101      	movs	r1, #1
 800a430:	6838      	ldr	r0, [r7, #0]
 800a432:	f000 fa81 	bl	800a938 <prvAddCurrentTaskToDelayedList>
}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000c54 	.word	0x20000c54

0800a444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10b      	bne.n	800a46e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	617b      	str	r3, [r7, #20]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a46e:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <vTaskPlaceOnEventListRestricted+0x54>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3318      	adds	r3, #24
 800a474:	4619      	mov	r1, r3
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7fe fd0b 	bl	8008e92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a482:	f04f 33ff 	mov.w	r3, #4294967295
 800a486:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	68b8      	ldr	r0, [r7, #8]
 800a48c:	f000 fa54 	bl	800a938 <prvAddCurrentTaskToDelayedList>
	}
 800a490:	bf00      	nop
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20000c54 	.word	0x20000c54

0800a49c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10b      	bne.n	800a4ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	60fb      	str	r3, [r7, #12]
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	e7fd      	b.n	800a4c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3318      	adds	r3, #24
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fd3c 	bl	8008f4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a54c <xTaskRemoveFromEventList+0xb0>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d11d      	bne.n	800a518 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fd33 	bl	8008f4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ea:	4b19      	ldr	r3, [pc, #100]	@ (800a550 <xTaskRemoveFromEventList+0xb4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d903      	bls.n	800a4fa <xTaskRemoveFromEventList+0x5e>
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f6:	4a16      	ldr	r2, [pc, #88]	@ (800a550 <xTaskRemoveFromEventList+0xb4>)
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4a13      	ldr	r2, [pc, #76]	@ (800a554 <xTaskRemoveFromEventList+0xb8>)
 800a508:	441a      	add	r2, r3
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4619      	mov	r1, r3
 800a510:	4610      	mov	r0, r2
 800a512:	f7fe fcbe 	bl	8008e92 <vListInsertEnd>
 800a516:	e005      	b.n	800a524 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	3318      	adds	r3, #24
 800a51c:	4619      	mov	r1, r3
 800a51e:	480e      	ldr	r0, [pc, #56]	@ (800a558 <xTaskRemoveFromEventList+0xbc>)
 800a520:	f7fe fcb7 	bl	8008e92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a528:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <xTaskRemoveFromEventList+0xc0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d905      	bls.n	800a53e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a532:	2301      	movs	r3, #1
 800a534:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a536:	4b0a      	ldr	r3, [pc, #40]	@ (800a560 <xTaskRemoveFromEventList+0xc4>)
 800a538:	2201      	movs	r2, #1
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	e001      	b.n	800a542 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a542:	697b      	ldr	r3, [r7, #20]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20001150 	.word	0x20001150
 800a550:	20001130 	.word	0x20001130
 800a554:	20000c58 	.word	0x20000c58
 800a558:	200010e8 	.word	0x200010e8
 800a55c:	20000c54 	.word	0x20000c54
 800a560:	2000113c 	.word	0x2000113c

0800a564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a56c:	4b06      	ldr	r3, [pc, #24]	@ (800a588 <vTaskInternalSetTimeOutState+0x24>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a574:	4b05      	ldr	r3, [pc, #20]	@ (800a58c <vTaskInternalSetTimeOutState+0x28>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	605a      	str	r2, [r3, #4]
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20001140 	.word	0x20001140
 800a58c:	2000112c 	.word	0x2000112c

0800a590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10b      	bne.n	800a5b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	613b      	str	r3, [r7, #16]
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	e7fd      	b.n	800a5b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10b      	bne.n	800a5d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
 800a5d4:	e7fd      	b.n	800a5d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a5d6:	f000 fe8f 	bl	800b2f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5da:	4b1d      	ldr	r3, [pc, #116]	@ (800a650 <xTaskCheckForTimeOut+0xc0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d102      	bne.n	800a5fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e023      	b.n	800a642 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b15      	ldr	r3, [pc, #84]	@ (800a654 <xTaskCheckForTimeOut+0xc4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d007      	beq.n	800a616 <xTaskCheckForTimeOut+0x86>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d302      	bcc.n	800a616 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a610:	2301      	movs	r3, #1
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	e015      	b.n	800a642 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d20b      	bcs.n	800a638 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	1ad2      	subs	r2, r2, r3
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff ff99 	bl	800a564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	e004      	b.n	800a642 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a63e:	2301      	movs	r3, #1
 800a640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a642:	f000 fe8b 	bl	800b35c <vPortExitCritical>

	return xReturn;
 800a646:	69fb      	ldr	r3, [r7, #28]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	2000112c 	.word	0x2000112c
 800a654:	20001140 	.word	0x20001140

0800a658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a65c:	4b03      	ldr	r3, [pc, #12]	@ (800a66c <vTaskMissedYield+0x14>)
 800a65e:	2201      	movs	r2, #1
 800a660:	601a      	str	r2, [r3, #0]
}
 800a662:	bf00      	nop
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	2000113c 	.word	0x2000113c

0800a670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a678:	f000 f852 	bl	800a720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a67c:	4b06      	ldr	r3, [pc, #24]	@ (800a698 <prvIdleTask+0x28>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d9f9      	bls.n	800a678 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a684:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <prvIdleTask+0x2c>)
 800a686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a694:	e7f0      	b.n	800a678 <prvIdleTask+0x8>
 800a696:	bf00      	nop
 800a698:	20000c58 	.word	0x20000c58
 800a69c:	e000ed04 	.word	0xe000ed04

0800a6a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	607b      	str	r3, [r7, #4]
 800a6aa:	e00c      	b.n	800a6c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4a12      	ldr	r2, [pc, #72]	@ (800a700 <prvInitialiseTaskLists+0x60>)
 800a6b8:	4413      	add	r3, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fbbc 	bl	8008e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b37      	cmp	r3, #55	@ 0x37
 800a6ca:	d9ef      	bls.n	800a6ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6cc:	480d      	ldr	r0, [pc, #52]	@ (800a704 <prvInitialiseTaskLists+0x64>)
 800a6ce:	f7fe fbb3 	bl	8008e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6d2:	480d      	ldr	r0, [pc, #52]	@ (800a708 <prvInitialiseTaskLists+0x68>)
 800a6d4:	f7fe fbb0 	bl	8008e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6d8:	480c      	ldr	r0, [pc, #48]	@ (800a70c <prvInitialiseTaskLists+0x6c>)
 800a6da:	f7fe fbad 	bl	8008e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6de:	480c      	ldr	r0, [pc, #48]	@ (800a710 <prvInitialiseTaskLists+0x70>)
 800a6e0:	f7fe fbaa 	bl	8008e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6e4:	480b      	ldr	r0, [pc, #44]	@ (800a714 <prvInitialiseTaskLists+0x74>)
 800a6e6:	f7fe fba7 	bl	8008e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a718 <prvInitialiseTaskLists+0x78>)
 800a6ec:	4a05      	ldr	r2, [pc, #20]	@ (800a704 <prvInitialiseTaskLists+0x64>)
 800a6ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <prvInitialiseTaskLists+0x7c>)
 800a6f2:	4a05      	ldr	r2, [pc, #20]	@ (800a708 <prvInitialiseTaskLists+0x68>)
 800a6f4:	601a      	str	r2, [r3, #0]
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000c58 	.word	0x20000c58
 800a704:	200010b8 	.word	0x200010b8
 800a708:	200010cc 	.word	0x200010cc
 800a70c:	200010e8 	.word	0x200010e8
 800a710:	200010fc 	.word	0x200010fc
 800a714:	20001114 	.word	0x20001114
 800a718:	200010e0 	.word	0x200010e0
 800a71c:	200010e4 	.word	0x200010e4

0800a720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a726:	e019      	b.n	800a75c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a728:	f000 fde6 	bl	800b2f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72c:	4b10      	ldr	r3, [pc, #64]	@ (800a770 <prvCheckTasksWaitingTermination+0x50>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3304      	adds	r3, #4
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fc07 	bl	8008f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a73e:	4b0d      	ldr	r3, [pc, #52]	@ (800a774 <prvCheckTasksWaitingTermination+0x54>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3b01      	subs	r3, #1
 800a744:	4a0b      	ldr	r2, [pc, #44]	@ (800a774 <prvCheckTasksWaitingTermination+0x54>)
 800a746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a748:	4b0b      	ldr	r3, [pc, #44]	@ (800a778 <prvCheckTasksWaitingTermination+0x58>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	4a0a      	ldr	r2, [pc, #40]	@ (800a778 <prvCheckTasksWaitingTermination+0x58>)
 800a750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a752:	f000 fe03 	bl	800b35c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f810 	bl	800a77c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <prvCheckTasksWaitingTermination+0x58>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e1      	bne.n	800a728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	200010fc 	.word	0x200010fc
 800a774:	20001128 	.word	0x20001128
 800a778:	20001110 	.word	0x20001110

0800a77c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d108      	bne.n	800a7a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a792:	4618      	mov	r0, r3
 800a794:	f000 ffa0 	bl	800b6d8 <vPortFree>
				vPortFree( pxTCB );
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 ff9d 	bl	800b6d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a79e:	e019      	b.n	800a7d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d103      	bne.n	800a7b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 ff94 	bl	800b6d8 <vPortFree>
	}
 800a7b0:	e010      	b.n	800a7d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d00b      	beq.n	800a7d4 <prvDeleteTCB+0x58>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	60fb      	str	r3, [r7, #12]
}
 800a7ce:	bf00      	nop
 800a7d0:	bf00      	nop
 800a7d2:	e7fd      	b.n	800a7d0 <prvDeleteTCB+0x54>
	}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a814 <prvResetNextTaskUnblockTime+0x38>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a818 <prvResetNextTaskUnblockTime+0x3c>)
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7f4:	e008      	b.n	800a808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f6:	4b07      	ldr	r3, [pc, #28]	@ (800a814 <prvResetNextTaskUnblockTime+0x38>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	4a04      	ldr	r2, [pc, #16]	@ (800a818 <prvResetNextTaskUnblockTime+0x3c>)
 800a806:	6013      	str	r3, [r2, #0]
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	200010e0 	.word	0x200010e0
 800a818:	20001148 	.word	0x20001148

0800a81c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a822:	4b0b      	ldr	r3, [pc, #44]	@ (800a850 <xTaskGetSchedulerState+0x34>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a82a:	2301      	movs	r3, #1
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	e008      	b.n	800a842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a830:	4b08      	ldr	r3, [pc, #32]	@ (800a854 <xTaskGetSchedulerState+0x38>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d102      	bne.n	800a83e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a838:	2302      	movs	r3, #2
 800a83a:	607b      	str	r3, [r7, #4]
 800a83c:	e001      	b.n	800a842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a83e:	2300      	movs	r3, #0
 800a840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a842:	687b      	ldr	r3, [r7, #4]
	}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20001134 	.word	0x20001134
 800a854:	20001150 	.word	0x20001150

0800a858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a864:	2300      	movs	r3, #0
 800a866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d058      	beq.n	800a920 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a86e:	4b2f      	ldr	r3, [pc, #188]	@ (800a92c <xTaskPriorityDisinherit+0xd4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	429a      	cmp	r2, r3
 800a876:	d00b      	beq.n	800a890 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	60fb      	str	r3, [r7, #12]
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	e7fd      	b.n	800a88c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	60bb      	str	r3, [r7, #8]
}
 800a8aa:	bf00      	nop
 800a8ac:	bf00      	nop
 800a8ae:	e7fd      	b.n	800a8ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b4:	1e5a      	subs	r2, r3, #1
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d02c      	beq.n	800a920 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d128      	bne.n	800a920 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fb3a 	bl	8008f4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <xTaskPriorityDisinherit+0xd8>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d903      	bls.n	800a900 <xTaskPriorityDisinherit+0xa8>
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fc:	4a0c      	ldr	r2, [pc, #48]	@ (800a930 <xTaskPriorityDisinherit+0xd8>)
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4a09      	ldr	r2, [pc, #36]	@ (800a934 <xTaskPriorityDisinherit+0xdc>)
 800a90e:	441a      	add	r2, r3
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	3304      	adds	r3, #4
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	f7fe fabb 	bl	8008e92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a91c:	2301      	movs	r3, #1
 800a91e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a920:	697b      	ldr	r3, [r7, #20]
	}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000c54 	.word	0x20000c54
 800a930:	20001130 	.word	0x20001130
 800a934:	20000c58 	.word	0x20000c58

0800a938 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a942:	4b21      	ldr	r3, [pc, #132]	@ (800a9c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a948:	4b20      	ldr	r3, [pc, #128]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fafc 	bl	8008f4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95a:	d10a      	bne.n	800a972 <prvAddCurrentTaskToDelayedList+0x3a>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a962:	4b1a      	ldr	r3, [pc, #104]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3304      	adds	r3, #4
 800a968:	4619      	mov	r1, r3
 800a96a:	4819      	ldr	r0, [pc, #100]	@ (800a9d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a96c:	f7fe fa91 	bl	8008e92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a970:	e026      	b.n	800a9c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4413      	add	r3, r2
 800a978:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a97a:	4b14      	ldr	r3, [pc, #80]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	429a      	cmp	r2, r3
 800a988:	d209      	bcs.n	800a99e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a98a:	4b12      	ldr	r3, [pc, #72]	@ (800a9d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3304      	adds	r3, #4
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	f7fe fa9f 	bl	8008eda <vListInsert>
}
 800a99c:	e010      	b.n	800a9c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a99e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7fe fa95 	bl	8008eda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d202      	bcs.n	800a9c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9ba:	4a08      	ldr	r2, [pc, #32]	@ (800a9dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	6013      	str	r3, [r2, #0]
}
 800a9c0:	bf00      	nop
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	2000112c 	.word	0x2000112c
 800a9cc:	20000c54 	.word	0x20000c54
 800a9d0:	20001114 	.word	0x20001114
 800a9d4:	200010e4 	.word	0x200010e4
 800a9d8:	200010e0 	.word	0x200010e0
 800a9dc:	20001148 	.word	0x20001148

0800a9e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	@ 0x28
 800a9e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9ea:	f000 fb13 	bl	800b014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9ee:	4b1d      	ldr	r3, [pc, #116]	@ (800aa64 <xTimerCreateTimerTask+0x84>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d021      	beq.n	800aa3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9fe:	1d3a      	adds	r2, r7, #4
 800aa00:	f107 0108 	add.w	r1, r7, #8
 800aa04:	f107 030c 	add.w	r3, r7, #12
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe f9fb 	bl	8008e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	9202      	str	r2, [sp, #8]
 800aa16:	9301      	str	r3, [sp, #4]
 800aa18:	2302      	movs	r3, #2
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	460a      	mov	r2, r1
 800aa20:	4911      	ldr	r1, [pc, #68]	@ (800aa68 <xTimerCreateTimerTask+0x88>)
 800aa22:	4812      	ldr	r0, [pc, #72]	@ (800aa6c <xTimerCreateTimerTask+0x8c>)
 800aa24:	f7ff f874 	bl	8009b10 <xTaskCreateStatic>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	4a11      	ldr	r2, [pc, #68]	@ (800aa70 <xTimerCreateTimerTask+0x90>)
 800aa2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa2e:	4b10      	ldr	r3, [pc, #64]	@ (800aa70 <xTimerCreateTimerTask+0x90>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa36:	2301      	movs	r3, #1
 800aa38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10b      	bne.n	800aa58 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	613b      	str	r3, [r7, #16]
}
 800aa52:	bf00      	nop
 800aa54:	bf00      	nop
 800aa56:	e7fd      	b.n	800aa54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa58:	697b      	ldr	r3, [r7, #20]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20001184 	.word	0x20001184
 800aa68:	0800b9e8 	.word	0x0800b9e8
 800aa6c:	0800abad 	.word	0x0800abad
 800aa70:	20001188 	.word	0x20001188

0800aa74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b08a      	sub	sp, #40	@ 0x28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10b      	bne.n	800aaa4 <xTimerGenericCommand+0x30>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	623b      	str	r3, [r7, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	bf00      	nop
 800aaa2:	e7fd      	b.n	800aaa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aaa4:	4b19      	ldr	r3, [pc, #100]	@ (800ab0c <xTimerGenericCommand+0x98>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d02a      	beq.n	800ab02 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b05      	cmp	r3, #5
 800aabc:	dc18      	bgt.n	800aaf0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aabe:	f7ff fead 	bl	800a81c <xTaskGetSchedulerState>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d109      	bne.n	800aadc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aac8:	4b10      	ldr	r3, [pc, #64]	@ (800ab0c <xTimerGenericCommand+0x98>)
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	f107 0110 	add.w	r1, r7, #16
 800aad0:	2300      	movs	r3, #0
 800aad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad4:	f7fe fbaa 	bl	800922c <xQueueGenericSend>
 800aad8:	6278      	str	r0, [r7, #36]	@ 0x24
 800aada:	e012      	b.n	800ab02 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aadc:	4b0b      	ldr	r3, [pc, #44]	@ (800ab0c <xTimerGenericCommand+0x98>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	f107 0110 	add.w	r1, r7, #16
 800aae4:	2300      	movs	r3, #0
 800aae6:	2200      	movs	r2, #0
 800aae8:	f7fe fba0 	bl	800922c <xQueueGenericSend>
 800aaec:	6278      	str	r0, [r7, #36]	@ 0x24
 800aaee:	e008      	b.n	800ab02 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aaf0:	4b06      	ldr	r3, [pc, #24]	@ (800ab0c <xTimerGenericCommand+0x98>)
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	f107 0110 	add.w	r1, r7, #16
 800aaf8:	2300      	movs	r3, #0
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	f7fe fc98 	bl	8009430 <xQueueGenericSendFromISR>
 800ab00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3728      	adds	r7, #40	@ 0x28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20001184 	.word	0x20001184

0800ab10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab1a:	4b23      	ldr	r3, [pc, #140]	@ (800aba8 <prvProcessExpiredTimer+0x98>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fa0f 	bl	8008f4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d023      	beq.n	800ab84 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	18d1      	adds	r1, r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	6978      	ldr	r0, [r7, #20]
 800ab4a:	f000 f8d5 	bl	800acf8 <prvInsertTimerInActiveList>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d020      	beq.n	800ab96 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab54:	2300      	movs	r3, #0
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	6978      	ldr	r0, [r7, #20]
 800ab60:	f7ff ff88 	bl	800aa74 <xTimerGenericCommand>
 800ab64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d114      	bne.n	800ab96 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	60fb      	str	r3, [r7, #12]
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	e7fd      	b.n	800ab80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab8a:	f023 0301 	bic.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	6978      	ldr	r0, [r7, #20]
 800ab9c:	4798      	blx	r3
}
 800ab9e:	bf00      	nop
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	2000117c 	.word	0x2000117c

0800abac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abb4:	f107 0308 	add.w	r3, r7, #8
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 f859 	bl	800ac70 <prvGetNextExpireTime>
 800abbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4619      	mov	r1, r3
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 f805 	bl	800abd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800abca:	f000 f8d7 	bl	800ad7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abce:	bf00      	nop
 800abd0:	e7f0      	b.n	800abb4 <prvTimerTask+0x8>
	...

0800abd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800abde:	f7ff fa25 	bl	800a02c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abe2:	f107 0308 	add.w	r3, r7, #8
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f866 	bl	800acb8 <prvSampleTimeNow>
 800abec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d130      	bne.n	800ac56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10a      	bne.n	800ac10 <prvProcessTimerOrBlockTask+0x3c>
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d806      	bhi.n	800ac10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac02:	f7ff fa21 	bl	800a048 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac06:	68f9      	ldr	r1, [r7, #12]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7ff ff81 	bl	800ab10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac0e:	e024      	b.n	800ac5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d008      	beq.n	800ac28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac16:	4b13      	ldr	r3, [pc, #76]	@ (800ac64 <prvProcessTimerOrBlockTask+0x90>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <prvProcessTimerOrBlockTask+0x50>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e000      	b.n	800ac26 <prvProcessTimerOrBlockTask+0x52>
 800ac24:	2300      	movs	r3, #0
 800ac26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac28:	4b0f      	ldr	r3, [pc, #60]	@ (800ac68 <prvProcessTimerOrBlockTask+0x94>)
 800ac2a:	6818      	ldr	r0, [r3, #0]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	4619      	mov	r1, r3
 800ac36:	f7fe ff37 	bl	8009aa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac3a:	f7ff fa05 	bl	800a048 <xTaskResumeAll>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac44:	4b09      	ldr	r3, [pc, #36]	@ (800ac6c <prvProcessTimerOrBlockTask+0x98>)
 800ac46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	f3bf 8f6f 	isb	sy
}
 800ac54:	e001      	b.n	800ac5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac56:	f7ff f9f7 	bl	800a048 <xTaskResumeAll>
}
 800ac5a:	bf00      	nop
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20001180 	.word	0x20001180
 800ac68:	20001184 	.word	0x20001184
 800ac6c:	e000ed04 	.word	0xe000ed04

0800ac70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac78:	4b0e      	ldr	r3, [pc, #56]	@ (800acb4 <prvGetNextExpireTime+0x44>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <prvGetNextExpireTime+0x16>
 800ac82:	2201      	movs	r2, #1
 800ac84:	e000      	b.n	800ac88 <prvGetNextExpireTime+0x18>
 800ac86:	2200      	movs	r2, #0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d105      	bne.n	800aca0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac94:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <prvGetNextExpireTime+0x44>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	e001      	b.n	800aca4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aca4:	68fb      	ldr	r3, [r7, #12]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	2000117c 	.word	0x2000117c

0800acb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800acc0:	f7ff fa60 	bl	800a184 <xTaskGetTickCount>
 800acc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acc6:	4b0b      	ldr	r3, [pc, #44]	@ (800acf4 <prvSampleTimeNow+0x3c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	429a      	cmp	r2, r3
 800acce:	d205      	bcs.n	800acdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800acd0:	f000 f93a 	bl	800af48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	e002      	b.n	800ace2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ace2:	4a04      	ldr	r2, [pc, #16]	@ (800acf4 <prvSampleTimeNow+0x3c>)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ace8:	68fb      	ldr	r3, [r7, #12]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	2000118c 	.word	0x2000118c

0800acf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d812      	bhi.n	800ad44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	1ad2      	subs	r2, r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d302      	bcc.n	800ad32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	e01b      	b.n	800ad6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad32:	4b10      	ldr	r3, [pc, #64]	@ (800ad74 <prvInsertTimerInActiveList+0x7c>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	f7fe f8cc 	bl	8008eda <vListInsert>
 800ad42:	e012      	b.n	800ad6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d206      	bcs.n	800ad5a <prvInsertTimerInActiveList+0x62>
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d302      	bcc.n	800ad5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad54:	2301      	movs	r3, #1
 800ad56:	617b      	str	r3, [r7, #20]
 800ad58:	e007      	b.n	800ad6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad5a:	4b07      	ldr	r3, [pc, #28]	@ (800ad78 <prvInsertTimerInActiveList+0x80>)
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f7fe f8b8 	bl	8008eda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad6a:	697b      	ldr	r3, [r7, #20]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20001180 	.word	0x20001180
 800ad78:	2000117c 	.word	0x2000117c

0800ad7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08e      	sub	sp, #56	@ 0x38
 800ad80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad82:	e0ce      	b.n	800af22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	da19      	bge.n	800adbe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad8a:	1d3b      	adds	r3, r7, #4
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10b      	bne.n	800adae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	61fb      	str	r3, [r7, #28]
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	e7fd      	b.n	800adaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800adae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adb4:	6850      	ldr	r0, [r2, #4]
 800adb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adb8:	6892      	ldr	r2, [r2, #8]
 800adba:	4611      	mov	r1, r2
 800adbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f2c0 80ae 	blt.w	800af22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add4:	3304      	adds	r3, #4
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe f8b8 	bl	8008f4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800addc:	463b      	mov	r3, r7
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff ff6a 	bl	800acb8 <prvSampleTimeNow>
 800ade4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b09      	cmp	r3, #9
 800adea:	f200 8097 	bhi.w	800af1c <prvProcessReceivedCommands+0x1a0>
 800adee:	a201      	add	r2, pc, #4	@ (adr r2, 800adf4 <prvProcessReceivedCommands+0x78>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae1d 	.word	0x0800ae1d
 800adfc:	0800ae1d 	.word	0x0800ae1d
 800ae00:	0800ae93 	.word	0x0800ae93
 800ae04:	0800aea7 	.word	0x0800aea7
 800ae08:	0800aef3 	.word	0x0800aef3
 800ae0c:	0800ae1d 	.word	0x0800ae1d
 800ae10:	0800ae1d 	.word	0x0800ae1d
 800ae14:	0800ae93 	.word	0x0800ae93
 800ae18:	0800aea7 	.word	0x0800aea7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae22:	f043 0301 	orr.w	r3, r3, #1
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	18d1      	adds	r1, r2, r3
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae3c:	f7ff ff5c 	bl	800acf8 <prvInsertTimerInActiveList>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d06c      	beq.n	800af20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d061      	beq.n	800af20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	441a      	add	r2, r3
 800ae64:	2300      	movs	r3, #0
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae6e:	f7ff fe01 	bl	800aa74 <xTimerGenericCommand>
 800ae72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d152      	bne.n	800af20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	61bb      	str	r3, [r7, #24]
}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	e7fd      	b.n	800ae8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae98:	f023 0301 	bic.w	r3, r3, #1
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aea4:	e03d      	b.n	800af22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeac:	f043 0301 	orr.w	r3, r3, #1
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aebc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10b      	bne.n	800aede <prvProcessReceivedCommands+0x162>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	617b      	str	r3, [r7, #20]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee0:	699a      	ldr	r2, [r3, #24]
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	18d1      	adds	r1, r2, r3
 800aee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aeec:	f7ff ff04 	bl	800acf8 <prvInsertTimerInActiveList>
					break;
 800aef0:	e017      	b.n	800af22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d103      	bne.n	800af08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800af00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af02:	f000 fbe9 	bl	800b6d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af06:	e00c      	b.n	800af22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af0e:	f023 0301 	bic.w	r3, r3, #1
 800af12:	b2da      	uxtb	r2, r3
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af1a:	e002      	b.n	800af22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <prvProcessReceivedCommands+0x1a6>
					break;
 800af20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af22:	4b08      	ldr	r3, [pc, #32]	@ (800af44 <prvProcessReceivedCommands+0x1c8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	1d39      	adds	r1, r7, #4
 800af28:	2200      	movs	r2, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fb1e 	bl	800956c <xQueueReceive>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	f47f af26 	bne.w	800ad84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	3730      	adds	r7, #48	@ 0x30
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20001184 	.word	0x20001184

0800af48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af4e:	e049      	b.n	800afe4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af50:	4b2e      	ldr	r3, [pc, #184]	@ (800b00c <prvSwitchTimerLists+0xc4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5a:	4b2c      	ldr	r3, [pc, #176]	@ (800b00c <prvSwitchTimerLists+0xc4>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3304      	adds	r3, #4
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fd ffef 	bl	8008f4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d02f      	beq.n	800afe4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4413      	add	r3, r2
 800af8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	429a      	cmp	r2, r3
 800af94:	d90e      	bls.n	800afb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afa2:	4b1a      	ldr	r3, [pc, #104]	@ (800b00c <prvSwitchTimerLists+0xc4>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fd ff94 	bl	8008eda <vListInsert>
 800afb2:	e017      	b.n	800afe4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afb4:	2300      	movs	r3, #0
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	2300      	movs	r3, #0
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	2100      	movs	r1, #0
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff fd58 	bl	800aa74 <xTimerGenericCommand>
 800afc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10b      	bne.n	800afe4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	603b      	str	r3, [r7, #0]
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	e7fd      	b.n	800afe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afe4:	4b09      	ldr	r3, [pc, #36]	@ (800b00c <prvSwitchTimerLists+0xc4>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1b0      	bne.n	800af50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afee:	4b07      	ldr	r3, [pc, #28]	@ (800b00c <prvSwitchTimerLists+0xc4>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aff4:	4b06      	ldr	r3, [pc, #24]	@ (800b010 <prvSwitchTimerLists+0xc8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a04      	ldr	r2, [pc, #16]	@ (800b00c <prvSwitchTimerLists+0xc4>)
 800affa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800affc:	4a04      	ldr	r2, [pc, #16]	@ (800b010 <prvSwitchTimerLists+0xc8>)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	6013      	str	r3, [r2, #0]
}
 800b002:	bf00      	nop
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	2000117c 	.word	0x2000117c
 800b010:	20001180 	.word	0x20001180

0800b014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b01a:	f000 f96d 	bl	800b2f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b01e:	4b15      	ldr	r3, [pc, #84]	@ (800b074 <prvCheckForValidListAndQueue+0x60>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d120      	bne.n	800b068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b026:	4814      	ldr	r0, [pc, #80]	@ (800b078 <prvCheckForValidListAndQueue+0x64>)
 800b028:	f7fd ff06 	bl	8008e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b02c:	4813      	ldr	r0, [pc, #76]	@ (800b07c <prvCheckForValidListAndQueue+0x68>)
 800b02e:	f7fd ff03 	bl	8008e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b032:	4b13      	ldr	r3, [pc, #76]	@ (800b080 <prvCheckForValidListAndQueue+0x6c>)
 800b034:	4a10      	ldr	r2, [pc, #64]	@ (800b078 <prvCheckForValidListAndQueue+0x64>)
 800b036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b038:	4b12      	ldr	r3, [pc, #72]	@ (800b084 <prvCheckForValidListAndQueue+0x70>)
 800b03a:	4a10      	ldr	r2, [pc, #64]	@ (800b07c <prvCheckForValidListAndQueue+0x68>)
 800b03c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b03e:	2300      	movs	r3, #0
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	4b11      	ldr	r3, [pc, #68]	@ (800b088 <prvCheckForValidListAndQueue+0x74>)
 800b044:	4a11      	ldr	r2, [pc, #68]	@ (800b08c <prvCheckForValidListAndQueue+0x78>)
 800b046:	2110      	movs	r1, #16
 800b048:	200a      	movs	r0, #10
 800b04a:	f7fe f813 	bl	8009074 <xQueueGenericCreateStatic>
 800b04e:	4603      	mov	r3, r0
 800b050:	4a08      	ldr	r2, [pc, #32]	@ (800b074 <prvCheckForValidListAndQueue+0x60>)
 800b052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b054:	4b07      	ldr	r3, [pc, #28]	@ (800b074 <prvCheckForValidListAndQueue+0x60>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b05c:	4b05      	ldr	r3, [pc, #20]	@ (800b074 <prvCheckForValidListAndQueue+0x60>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	490b      	ldr	r1, [pc, #44]	@ (800b090 <prvCheckForValidListAndQueue+0x7c>)
 800b062:	4618      	mov	r0, r3
 800b064:	f7fe fcf6 	bl	8009a54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b068:	f000 f978 	bl	800b35c <vPortExitCritical>
}
 800b06c:	bf00      	nop
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20001184 	.word	0x20001184
 800b078:	20001154 	.word	0x20001154
 800b07c:	20001168 	.word	0x20001168
 800b080:	2000117c 	.word	0x2000117c
 800b084:	20001180 	.word	0x20001180
 800b088:	20001230 	.word	0x20001230
 800b08c:	20001190 	.word	0x20001190
 800b090:	0800b9f0 	.word	0x0800b9f0

0800b094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3b04      	subs	r3, #4
 800b0a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b0ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3b04      	subs	r3, #4
 800b0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	f023 0201 	bic.w	r2, r3, #1
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3b04      	subs	r3, #4
 800b0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b0f8 <pxPortInitialiseStack+0x64>)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3b14      	subs	r3, #20
 800b0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f06f 0202 	mvn.w	r2, #2
 800b0e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3b20      	subs	r3, #32
 800b0e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	0800b0fd 	.word	0x0800b0fd

0800b0fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b106:	4b13      	ldr	r3, [pc, #76]	@ (800b154 <prvTaskExitError+0x58>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10e:	d00b      	beq.n	800b128 <prvTaskExitError+0x2c>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	60fb      	str	r3, [r7, #12]
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	e7fd      	b.n	800b124 <prvTaskExitError+0x28>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12c:	f383 8811 	msr	BASEPRI, r3
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	60bb      	str	r3, [r7, #8]
}
 800b13a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b13c:	bf00      	nop
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0fc      	beq.n	800b13e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	2000000c 	.word	0x2000000c
	...

0800b160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b160:	4b07      	ldr	r3, [pc, #28]	@ (800b180 <pxCurrentTCBConst2>)
 800b162:	6819      	ldr	r1, [r3, #0]
 800b164:	6808      	ldr	r0, [r1, #0]
 800b166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16a:	f380 8809 	msr	PSP, r0
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f380 8811 	msr	BASEPRI, r0
 800b17a:	4770      	bx	lr
 800b17c:	f3af 8000 	nop.w

0800b180 <pxCurrentTCBConst2>:
 800b180:	20000c54 	.word	0x20000c54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop

0800b188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b188:	4808      	ldr	r0, [pc, #32]	@ (800b1ac <prvPortStartFirstTask+0x24>)
 800b18a:	6800      	ldr	r0, [r0, #0]
 800b18c:	6800      	ldr	r0, [r0, #0]
 800b18e:	f380 8808 	msr	MSP, r0
 800b192:	f04f 0000 	mov.w	r0, #0
 800b196:	f380 8814 	msr	CONTROL, r0
 800b19a:	b662      	cpsie	i
 800b19c:	b661      	cpsie	f
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	df00      	svc	0
 800b1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1aa:	bf00      	nop
 800b1ac:	e000ed08 	.word	0xe000ed08

0800b1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1b6:	4b47      	ldr	r3, [pc, #284]	@ (800b2d4 <xPortStartScheduler+0x124>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a47      	ldr	r2, [pc, #284]	@ (800b2d8 <xPortStartScheduler+0x128>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d10b      	bne.n	800b1d8 <xPortStartScheduler+0x28>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	60fb      	str	r3, [r7, #12]
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1d8:	4b3e      	ldr	r3, [pc, #248]	@ (800b2d4 <xPortStartScheduler+0x124>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b2dc <xPortStartScheduler+0x12c>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d10b      	bne.n	800b1fa <xPortStartScheduler+0x4a>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	613b      	str	r3, [r7, #16]
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	e7fd      	b.n	800b1f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1fa:	4b39      	ldr	r3, [pc, #228]	@ (800b2e0 <xPortStartScheduler+0x130>)
 800b1fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	b2db      	uxtb	r3, r3
 800b204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	22ff      	movs	r2, #255	@ 0xff
 800b20a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	b2db      	uxtb	r3, r3
 800b212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	4b31      	ldr	r3, [pc, #196]	@ (800b2e4 <xPortStartScheduler+0x134>)
 800b220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b222:	4b31      	ldr	r3, [pc, #196]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b224:	2207      	movs	r2, #7
 800b226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b228:	e009      	b.n	800b23e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b22a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3b01      	subs	r3, #1
 800b230:	4a2d      	ldr	r2, [pc, #180]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	b2db      	uxtb	r3, r3
 800b242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b246:	2b80      	cmp	r3, #128	@ 0x80
 800b248:	d0ef      	beq.n	800b22a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b24a:	4b27      	ldr	r3, [pc, #156]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f1c3 0307 	rsb	r3, r3, #7
 800b252:	2b04      	cmp	r3, #4
 800b254:	d00b      	beq.n	800b26e <xPortStartScheduler+0xbe>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	60bb      	str	r3, [r7, #8]
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	e7fd      	b.n	800b26a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b26e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	4a1c      	ldr	r2, [pc, #112]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b278:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b280:	4a19      	ldr	r2, [pc, #100]	@ (800b2e8 <xPortStartScheduler+0x138>)
 800b282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	b2da      	uxtb	r2, r3
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b28c:	4b17      	ldr	r3, [pc, #92]	@ (800b2ec <xPortStartScheduler+0x13c>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a16      	ldr	r2, [pc, #88]	@ (800b2ec <xPortStartScheduler+0x13c>)
 800b292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b298:	4b14      	ldr	r3, [pc, #80]	@ (800b2ec <xPortStartScheduler+0x13c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a13      	ldr	r2, [pc, #76]	@ (800b2ec <xPortStartScheduler+0x13c>)
 800b29e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b2a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2a4:	f000 f8da 	bl	800b45c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2a8:	4b11      	ldr	r3, [pc, #68]	@ (800b2f0 <xPortStartScheduler+0x140>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2ae:	f000 f8f9 	bl	800b4a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2b2:	4b10      	ldr	r3, [pc, #64]	@ (800b2f4 <xPortStartScheduler+0x144>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a0f      	ldr	r2, [pc, #60]	@ (800b2f4 <xPortStartScheduler+0x144>)
 800b2b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b2bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2be:	f7ff ff63 	bl	800b188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2c2:	f7ff f83b 	bl	800a33c <vTaskSwitchContext>
	prvTaskExitError();
 800b2c6:	f7ff ff19 	bl	800b0fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	e000ed00 	.word	0xe000ed00
 800b2d8:	410fc271 	.word	0x410fc271
 800b2dc:	410fc270 	.word	0x410fc270
 800b2e0:	e000e400 	.word	0xe000e400
 800b2e4:	20001280 	.word	0x20001280
 800b2e8:	20001284 	.word	0x20001284
 800b2ec:	e000ed20 	.word	0xe000ed20
 800b2f0:	2000000c 	.word	0x2000000c
 800b2f4:	e000ef34 	.word	0xe000ef34

0800b2f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	607b      	str	r3, [r7, #4]
}
 800b310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b312:	4b10      	ldr	r3, [pc, #64]	@ (800b354 <vPortEnterCritical+0x5c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3301      	adds	r3, #1
 800b318:	4a0e      	ldr	r2, [pc, #56]	@ (800b354 <vPortEnterCritical+0x5c>)
 800b31a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b31c:	4b0d      	ldr	r3, [pc, #52]	@ (800b354 <vPortEnterCritical+0x5c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d110      	bne.n	800b346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b324:	4b0c      	ldr	r3, [pc, #48]	@ (800b358 <vPortEnterCritical+0x60>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00b      	beq.n	800b346 <vPortEnterCritical+0x4e>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	603b      	str	r3, [r7, #0]
}
 800b340:	bf00      	nop
 800b342:	bf00      	nop
 800b344:	e7fd      	b.n	800b342 <vPortEnterCritical+0x4a>
	}
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000000c 	.word	0x2000000c
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b362:	4b12      	ldr	r3, [pc, #72]	@ (800b3ac <vPortExitCritical+0x50>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10b      	bne.n	800b382 <vPortExitCritical+0x26>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	607b      	str	r3, [r7, #4]
}
 800b37c:	bf00      	nop
 800b37e:	bf00      	nop
 800b380:	e7fd      	b.n	800b37e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b382:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ac <vPortExitCritical+0x50>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3b01      	subs	r3, #1
 800b388:	4a08      	ldr	r2, [pc, #32]	@ (800b3ac <vPortExitCritical+0x50>)
 800b38a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b38c:	4b07      	ldr	r3, [pc, #28]	@ (800b3ac <vPortExitCritical+0x50>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d105      	bne.n	800b3a0 <vPortExitCritical+0x44>
 800b394:	2300      	movs	r3, #0
 800b396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	f383 8811 	msr	BASEPRI, r3
}
 800b39e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	2000000c 	.word	0x2000000c

0800b3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3b0:	f3ef 8009 	mrs	r0, PSP
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	4b15      	ldr	r3, [pc, #84]	@ (800b410 <pxCurrentTCBConst>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	f01e 0f10 	tst.w	lr, #16
 800b3c0:	bf08      	it	eq
 800b3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ca:	6010      	str	r0, [r2, #0]
 800b3cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b3d4:	f380 8811 	msr	BASEPRI, r0
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f7fe ffac 	bl	800a33c <vTaskSwitchContext>
 800b3e4:	f04f 0000 	mov.w	r0, #0
 800b3e8:	f380 8811 	msr	BASEPRI, r0
 800b3ec:	bc09      	pop	{r0, r3}
 800b3ee:	6819      	ldr	r1, [r3, #0]
 800b3f0:	6808      	ldr	r0, [r1, #0]
 800b3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f6:	f01e 0f10 	tst.w	lr, #16
 800b3fa:	bf08      	it	eq
 800b3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b400:	f380 8809 	msr	PSP, r0
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	f3af 8000 	nop.w

0800b410 <pxCurrentTCBConst>:
 800b410:	20000c54 	.word	0x20000c54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop

0800b418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	607b      	str	r3, [r7, #4]
}
 800b430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b432:	f7fe fec9 	bl	800a1c8 <xTaskIncrementTick>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d003      	beq.n	800b444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b43c:	4b06      	ldr	r3, [pc, #24]	@ (800b458 <xPortSysTickHandler+0x40>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	2300      	movs	r3, #0
 800b446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	f383 8811 	msr	BASEPRI, r3
}
 800b44e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	e000ed04 	.word	0xe000ed04

0800b45c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b45c:	b480      	push	{r7}
 800b45e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b460:	4b0b      	ldr	r3, [pc, #44]	@ (800b490 <vPortSetupTimerInterrupt+0x34>)
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b466:	4b0b      	ldr	r3, [pc, #44]	@ (800b494 <vPortSetupTimerInterrupt+0x38>)
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b46c:	4b0a      	ldr	r3, [pc, #40]	@ (800b498 <vPortSetupTimerInterrupt+0x3c>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a0a      	ldr	r2, [pc, #40]	@ (800b49c <vPortSetupTimerInterrupt+0x40>)
 800b472:	fba2 2303 	umull	r2, r3, r2, r3
 800b476:	099b      	lsrs	r3, r3, #6
 800b478:	4a09      	ldr	r2, [pc, #36]	@ (800b4a0 <vPortSetupTimerInterrupt+0x44>)
 800b47a:	3b01      	subs	r3, #1
 800b47c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b47e:	4b04      	ldr	r3, [pc, #16]	@ (800b490 <vPortSetupTimerInterrupt+0x34>)
 800b480:	2207      	movs	r2, #7
 800b482:	601a      	str	r2, [r3, #0]
}
 800b484:	bf00      	nop
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	e000e010 	.word	0xe000e010
 800b494:	e000e018 	.word	0xe000e018
 800b498:	20000000 	.word	0x20000000
 800b49c:	10624dd3 	.word	0x10624dd3
 800b4a0:	e000e014 	.word	0xe000e014

0800b4a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b4b4 <vPortEnableVFP+0x10>
 800b4a8:	6801      	ldr	r1, [r0, #0]
 800b4aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b4ae:	6001      	str	r1, [r0, #0]
 800b4b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4b2:	bf00      	nop
 800b4b4:	e000ed88 	.word	0xe000ed88

0800b4b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4be:	f3ef 8305 	mrs	r3, IPSR
 800b4c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b0f      	cmp	r3, #15
 800b4c8:	d915      	bls.n	800b4f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4ca:	4a18      	ldr	r2, [pc, #96]	@ (800b52c <vPortValidateInterruptPriority+0x74>)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4d4:	4b16      	ldr	r3, [pc, #88]	@ (800b530 <vPortValidateInterruptPriority+0x78>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	7afa      	ldrb	r2, [r7, #11]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d20b      	bcs.n	800b4f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	607b      	str	r3, [r7, #4]
}
 800b4f0:	bf00      	nop
 800b4f2:	bf00      	nop
 800b4f4:	e7fd      	b.n	800b4f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b534 <vPortValidateInterruptPriority+0x7c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b538 <vPortValidateInterruptPriority+0x80>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	429a      	cmp	r2, r3
 800b504:	d90b      	bls.n	800b51e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50a:	f383 8811 	msr	BASEPRI, r3
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	603b      	str	r3, [r7, #0]
}
 800b518:	bf00      	nop
 800b51a:	bf00      	nop
 800b51c:	e7fd      	b.n	800b51a <vPortValidateInterruptPriority+0x62>
	}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	e000e3f0 	.word	0xe000e3f0
 800b530:	20001280 	.word	0x20001280
 800b534:	e000ed0c 	.word	0xe000ed0c
 800b538:	20001284 	.word	0x20001284

0800b53c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08a      	sub	sp, #40	@ 0x28
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b548:	f7fe fd70 	bl	800a02c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b54c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6c0 <pvPortMalloc+0x184>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b554:	f000 f924 	bl	800b7a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b558:	4b5a      	ldr	r3, [pc, #360]	@ (800b6c4 <pvPortMalloc+0x188>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4013      	ands	r3, r2
 800b560:	2b00      	cmp	r3, #0
 800b562:	f040 8095 	bne.w	800b690 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01e      	beq.n	800b5aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b56c:	2208      	movs	r2, #8
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4413      	add	r3, r2
 800b572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f003 0307 	and.w	r3, r3, #7
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d015      	beq.n	800b5aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f023 0307 	bic.w	r3, r3, #7
 800b584:	3308      	adds	r3, #8
 800b586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f003 0307 	and.w	r3, r3, #7
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00b      	beq.n	800b5aa <pvPortMalloc+0x6e>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	617b      	str	r3, [r7, #20]
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	e7fd      	b.n	800b5a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d06f      	beq.n	800b690 <pvPortMalloc+0x154>
 800b5b0:	4b45      	ldr	r3, [pc, #276]	@ (800b6c8 <pvPortMalloc+0x18c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d86a      	bhi.n	800b690 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5ba:	4b44      	ldr	r3, [pc, #272]	@ (800b6cc <pvPortMalloc+0x190>)
 800b5bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5be:	4b43      	ldr	r3, [pc, #268]	@ (800b6cc <pvPortMalloc+0x190>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5c4:	e004      	b.n	800b5d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d903      	bls.n	800b5e2 <pvPortMalloc+0xa6>
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1f1      	bne.n	800b5c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5e2:	4b37      	ldr	r3, [pc, #220]	@ (800b6c0 <pvPortMalloc+0x184>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d051      	beq.n	800b690 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5ec:	6a3b      	ldr	r3, [r7, #32]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	4413      	add	r3, r2
 800b5f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	1ad2      	subs	r2, r2, r3
 800b606:	2308      	movs	r3, #8
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d920      	bls.n	800b650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b60e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4413      	add	r3, r2
 800b614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	f003 0307 	and.w	r3, r3, #7
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00b      	beq.n	800b638 <pvPortMalloc+0xfc>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	613b      	str	r3, [r7, #16]
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	e7fd      	b.n	800b634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b64a:	69b8      	ldr	r0, [r7, #24]
 800b64c:	f000 f90a 	bl	800b864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b650:	4b1d      	ldr	r3, [pc, #116]	@ (800b6c8 <pvPortMalloc+0x18c>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6c8 <pvPortMalloc+0x18c>)
 800b65c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b65e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6c8 <pvPortMalloc+0x18c>)
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d0 <pvPortMalloc+0x194>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d203      	bcs.n	800b672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b66a:	4b17      	ldr	r3, [pc, #92]	@ (800b6c8 <pvPortMalloc+0x18c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a18      	ldr	r2, [pc, #96]	@ (800b6d0 <pvPortMalloc+0x194>)
 800b670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4b13      	ldr	r3, [pc, #76]	@ (800b6c4 <pvPortMalloc+0x188>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	431a      	orrs	r2, r3
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b686:	4b13      	ldr	r3, [pc, #76]	@ (800b6d4 <pvPortMalloc+0x198>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3301      	adds	r3, #1
 800b68c:	4a11      	ldr	r2, [pc, #68]	@ (800b6d4 <pvPortMalloc+0x198>)
 800b68e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b690:	f7fe fcda 	bl	800a048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00b      	beq.n	800b6b6 <pvPortMalloc+0x17a>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	60fb      	str	r3, [r7, #12]
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	e7fd      	b.n	800b6b2 <pvPortMalloc+0x176>
	return pvReturn;
 800b6b6:	69fb      	ldr	r3, [r7, #28]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3728      	adds	r7, #40	@ 0x28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	20004e90 	.word	0x20004e90
 800b6c4:	20004ea4 	.word	0x20004ea4
 800b6c8:	20004e94 	.word	0x20004e94
 800b6cc:	20004e88 	.word	0x20004e88
 800b6d0:	20004e98 	.word	0x20004e98
 800b6d4:	20004e9c 	.word	0x20004e9c

0800b6d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d04f      	beq.n	800b78a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b6ea:	2308      	movs	r3, #8
 800b6ec:	425b      	negs	r3, r3
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	4b25      	ldr	r3, [pc, #148]	@ (800b794 <vPortFree+0xbc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4013      	ands	r3, r2
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <vPortFree+0x46>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60fb      	str	r3, [r7, #12]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00b      	beq.n	800b73e <vPortFree+0x66>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	60bb      	str	r3, [r7, #8]
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	e7fd      	b.n	800b73a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	4b14      	ldr	r3, [pc, #80]	@ (800b794 <vPortFree+0xbc>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4013      	ands	r3, r2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01e      	beq.n	800b78a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d11a      	bne.n	800b78a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	4b0e      	ldr	r3, [pc, #56]	@ (800b794 <vPortFree+0xbc>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	43db      	mvns	r3, r3
 800b75e:	401a      	ands	r2, r3
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b764:	f7fe fc62 	bl	800a02c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b0a      	ldr	r3, [pc, #40]	@ (800b798 <vPortFree+0xc0>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4413      	add	r3, r2
 800b772:	4a09      	ldr	r2, [pc, #36]	@ (800b798 <vPortFree+0xc0>)
 800b774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b776:	6938      	ldr	r0, [r7, #16]
 800b778:	f000 f874 	bl	800b864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b77c:	4b07      	ldr	r3, [pc, #28]	@ (800b79c <vPortFree+0xc4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	4a06      	ldr	r2, [pc, #24]	@ (800b79c <vPortFree+0xc4>)
 800b784:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b786:	f7fe fc5f 	bl	800a048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b78a:	bf00      	nop
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20004ea4 	.word	0x20004ea4
 800b798:	20004e94 	.word	0x20004e94
 800b79c:	20004ea0 	.word	0x20004ea0

0800b7a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b7aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7ac:	4b27      	ldr	r3, [pc, #156]	@ (800b84c <prvHeapInit+0xac>)
 800b7ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00c      	beq.n	800b7d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3307      	adds	r3, #7
 800b7be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f023 0307 	bic.w	r3, r3, #7
 800b7c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	4a1f      	ldr	r2, [pc, #124]	@ (800b84c <prvHeapInit+0xac>)
 800b7d0:	4413      	add	r3, r2
 800b7d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b850 <prvHeapInit+0xb0>)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7de:	4b1c      	ldr	r3, [pc, #112]	@ (800b850 <prvHeapInit+0xb0>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7ec:	2208      	movs	r2, #8
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	1a9b      	subs	r3, r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0307 	bic.w	r3, r3, #7
 800b7fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4a15      	ldr	r2, [pc, #84]	@ (800b854 <prvHeapInit+0xb4>)
 800b800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b802:	4b14      	ldr	r3, [pc, #80]	@ (800b854 <prvHeapInit+0xb4>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2200      	movs	r2, #0
 800b808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b80a:	4b12      	ldr	r3, [pc, #72]	@ (800b854 <prvHeapInit+0xb4>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	1ad2      	subs	r2, r2, r3
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b820:	4b0c      	ldr	r3, [pc, #48]	@ (800b854 <prvHeapInit+0xb4>)
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	4a0a      	ldr	r2, [pc, #40]	@ (800b858 <prvHeapInit+0xb8>)
 800b82e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	4a09      	ldr	r2, [pc, #36]	@ (800b85c <prvHeapInit+0xbc>)
 800b836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b838:	4b09      	ldr	r3, [pc, #36]	@ (800b860 <prvHeapInit+0xc0>)
 800b83a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b83e:	601a      	str	r2, [r3, #0]
}
 800b840:	bf00      	nop
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	20001288 	.word	0x20001288
 800b850:	20004e88 	.word	0x20004e88
 800b854:	20004e90 	.word	0x20004e90
 800b858:	20004e98 	.word	0x20004e98
 800b85c:	20004e94 	.word	0x20004e94
 800b860:	20004ea4 	.word	0x20004ea4

0800b864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b86c:	4b28      	ldr	r3, [pc, #160]	@ (800b910 <prvInsertBlockIntoFreeList+0xac>)
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	e002      	b.n	800b878 <prvInsertBlockIntoFreeList+0x14>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60fb      	str	r3, [r7, #12]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d8f7      	bhi.n	800b872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4413      	add	r3, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d108      	bne.n	800b8a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	441a      	add	r2, r3
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d118      	bne.n	800b8ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b15      	ldr	r3, [pc, #84]	@ (800b914 <prvInsertBlockIntoFreeList+0xb0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d00d      	beq.n	800b8e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	441a      	add	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	e008      	b.n	800b8f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b914 <prvInsertBlockIntoFreeList+0xb0>)
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	e003      	b.n	800b8f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d002      	beq.n	800b902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20004e88 	.word	0x20004e88
 800b914:	20004e90 	.word	0x20004e90

0800b918 <memset>:
 800b918:	4402      	add	r2, r0
 800b91a:	4603      	mov	r3, r0
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d100      	bne.n	800b922 <memset+0xa>
 800b920:	4770      	bx	lr
 800b922:	f803 1b01 	strb.w	r1, [r3], #1
 800b926:	e7f9      	b.n	800b91c <memset+0x4>

0800b928 <__libc_init_array>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	4d0d      	ldr	r5, [pc, #52]	@ (800b960 <__libc_init_array+0x38>)
 800b92c:	4c0d      	ldr	r4, [pc, #52]	@ (800b964 <__libc_init_array+0x3c>)
 800b92e:	1b64      	subs	r4, r4, r5
 800b930:	10a4      	asrs	r4, r4, #2
 800b932:	2600      	movs	r6, #0
 800b934:	42a6      	cmp	r6, r4
 800b936:	d109      	bne.n	800b94c <__libc_init_array+0x24>
 800b938:	4d0b      	ldr	r5, [pc, #44]	@ (800b968 <__libc_init_array+0x40>)
 800b93a:	4c0c      	ldr	r4, [pc, #48]	@ (800b96c <__libc_init_array+0x44>)
 800b93c:	f000 f826 	bl	800b98c <_init>
 800b940:	1b64      	subs	r4, r4, r5
 800b942:	10a4      	asrs	r4, r4, #2
 800b944:	2600      	movs	r6, #0
 800b946:	42a6      	cmp	r6, r4
 800b948:	d105      	bne.n	800b956 <__libc_init_array+0x2e>
 800b94a:	bd70      	pop	{r4, r5, r6, pc}
 800b94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b950:	4798      	blx	r3
 800b952:	3601      	adds	r6, #1
 800b954:	e7ee      	b.n	800b934 <__libc_init_array+0xc>
 800b956:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95a:	4798      	blx	r3
 800b95c:	3601      	adds	r6, #1
 800b95e:	e7f2      	b.n	800b946 <__libc_init_array+0x1e>
 800b960:	0800ba20 	.word	0x0800ba20
 800b964:	0800ba20 	.word	0x0800ba20
 800b968:	0800ba20 	.word	0x0800ba20
 800b96c:	0800ba24 	.word	0x0800ba24

0800b970 <memcpy>:
 800b970:	440a      	add	r2, r1
 800b972:	4291      	cmp	r1, r2
 800b974:	f100 33ff 	add.w	r3, r0, #4294967295
 800b978:	d100      	bne.n	800b97c <memcpy+0xc>
 800b97a:	4770      	bx	lr
 800b97c:	b510      	push	{r4, lr}
 800b97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b982:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b986:	4291      	cmp	r1, r2
 800b988:	d1f9      	bne.n	800b97e <memcpy+0xe>
 800b98a:	bd10      	pop	{r4, pc}

0800b98c <_init>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr

0800b998 <_fini>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr
